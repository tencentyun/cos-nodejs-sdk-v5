

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module != 'undefined' ? Module : {};

// See https://caniuse.com/mdn-javascript_builtins_object_assign

// See https://caniuse.com/mdn-javascript_builtins_bigint64array

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = Object.assign({}, Module);

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window == 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts == 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process == 'object' && typeof process.versions == 'object' && typeof process.versions.node == 'string';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

// Normally we don't log exceptions but instead let them bubble out the top
// level where the embedding environment (e.g. the browser) can handle
// them.
// However under v8 and node we sometimes exit the process direcly in which case
// its up to use us to log the exception before exiting.
// If we fix https://github.com/emscripten-core/emscripten/issues/15080
// this may no longer be needed under node.
function logExceptionOnExit(e) {
  if (e instanceof ExitStatus) return;
  let toLog = e;
  if (e && typeof e == 'object' && e.stack) {
    toLog = [e, e.stack];
  }
  err('exiting due to exception: ' + toLog);
}

if (ENVIRONMENT_IS_NODE) {
  if (typeof process == 'undefined' || !process.release || process.release.name !== 'node') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

// include: node_shell_read.js


// These modules will usually be used on Node.js. Load them eagerly to avoid
// the complexity of lazy-loading. However, for now we must guard on require()
// actually existing: if the JS is put in a .mjs file (ES6 module) and run on
// node, then we'll detect node as the environment and get here, but require()
// does not exist (since ES6 modules should use |import|). If the code actually
// uses the node filesystem then it will crash, of course, but in the case of
// code that never uses it we don't want to crash here, so the guarding if lets
// such code work properly. See discussion in
// https://github.com/emscripten-core/emscripten/pull/17851
var fs, nodePath;
if (typeof require === 'function') {
  fs = require('fs');
  nodePath = require('path');
}

read_ = (filename, binary) => {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    return binary ? ret : ret.toString();
  }
  filename = nodePath['normalize'](filename);
  return fs.readFileSync(filename, binary ? undefined : 'utf8');
};

readBinary = (filename) => {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};

readAsync = (filename, onload, onerror) => {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    onload(ret);
  }
  filename = nodePath['normalize'](filename);
  fs.readFile(filename, function(err, data) {
    if (err) onerror(err);
    else onload(data.buffer);
  });
};

// end include: node_shell_read.js
  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module != 'undefined') {
    module['exports'] = Module;
  }

  quit_ = (status, toThrow) => {
    if (keepRuntimeAlive()) {
      process['exitCode'] = status;
      throw toThrow;
    }
    logExceptionOnExit(toThrow);
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };

} else
if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process == 'object' && typeof require === 'function') || typeof window == 'object' || typeof importScripts == 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      const data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    let data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer == 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data == 'object');
    return data;
  };

  readAsync = function readAsync(f, onload, onerror) {
    setTimeout(() => onload(readBinary(f)), 0);
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit == 'function') {
    quit_ = (status, toThrow) => {
      logExceptionOnExit(toThrow);
      quit(status);
    };
  }

  if (typeof print != 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console == 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr != 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document != 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window == 'object' || typeof importScripts == 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {
// include: web_or_worker_shell_read.js


  read_ = (url) => {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  }

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = (url) => {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = (url, onload, onerror) => {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = () => {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  }

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = (title) => document.title = title;
} else
{
  throw new Error('environment detection error');
}

var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
Object.assign(Module, moduleOverrides);
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;
checkIncomingModuleAPI();

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];legacyModuleProp('arguments', 'arguments_');

if (Module['thisProgram']) thisProgram = Module['thisProgram'];legacyModuleProp('thisProgram', 'thisProgram');

if (Module['quit']) quit_ = Module['quit'];legacyModuleProp('quit', 'quit_');

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] == 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] == 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] == 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] == 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] == 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] == 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] == 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] == 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] == 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
legacyModuleProp('read', 'read_');
legacyModuleProp('readAsync', 'readAsync');
legacyModuleProp('readBinary', 'readBinary');
legacyModuleProp('setWindowTitle', 'setWindowTitle');
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';

assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");




var STACK_ALIGN = 16;
var POINTER_SIZE = 4;

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': case 'u8': return 1;
    case 'i16': case 'u16': return 2;
    case 'i32': case 'u32': return 4;
    case 'i64': case 'u64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length - 1] === '*') {
        return POINTER_SIZE;
      }
      if (type[0] === 'i') {
        const bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      }
      return 0;
    }
  }
}

// include: runtime_debug.js


function legacyModuleProp(prop, newName) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      get: function() {
        abort('Module.' + prop + ' has been replaced with plain ' + newName + ' (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)');
      }
    });
  }
}

function ignoredModuleProp(prop) {
  if (Object.getOwnPropertyDescriptor(Module, prop)) {
    abort('`Module.' + prop + '` was supplied but `' + prop + '` not included in INCOMING_MODULE_JS_API');
  }
}

// forcing the filesystem exports a few things by default
function isExportedByForceFilesystem(name) {
  return name === 'FS_createPath' ||
         name === 'FS_createDataFile' ||
         name === 'FS_createPreloadedFile' ||
         name === 'FS_unlink' ||
         name === 'addRunDependency' ||
         // The old FS has some functionality that WasmFS lacks.
         name === 'FS_createLazyFile' ||
         name === 'FS_createDevice' ||
         name === 'removeRunDependency';
}

function missingLibrarySymbol(sym) {
  if (typeof globalThis !== 'undefined' && !Object.getOwnPropertyDescriptor(globalThis, sym)) {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get: function() {
        // Can't `abort()` here because it would break code that does runtime
        // checks.  e.g. `if (typeof SDL === 'undefined')`.
        var msg = '`' + sym + '` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line';
        // DEFAULT_LIBRARY_FUNCS_TO_INCLUDE requires the name as it appears in
        // library.js, which means $name for a JS name with no prefix, or name
        // for a JS name like _name.
        var librarySymbol = sym;
        if (!librarySymbol.startsWith('_')) {
          librarySymbol = '$' + sym;
        }
        msg += " (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE=" + librarySymbol + ")";
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        warnOnce(msg);
        return undefined;
      }
    });
  }
}

function unexportedRuntimeSymbol(sym) {
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Object.defineProperty(Module, sym, {
      configurable: true,
      get: function() {
        var msg = "'" + sym + "' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        abort(msg);
      }
    });
  }
}

// end include: runtime_debug.js


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];legacyModuleProp('wasmBinary', 'wasmBinary');
var noExitRuntime = Module['noExitRuntime'] || true;legacyModuleProp('noExitRuntime', 'noExitRuntime');

// include: wasm2js.js


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  /** @constructor */
  Instance: function(module, info) {
    // TODO: use the module somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(info) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "aW5maW5pdHkALSsgICAwWDB4AC0wWCswWCAwWC0weCsweCAweAAlbGx1AG5hbgBpbmYATkFOAElORgAuAChudWxsKQAAAAAAAAAAAAAAAAAZAAoAGRkZAAAAAAUAAAAAAAAJAAAAAAsAAAAAAAAAABkAEQoZGRkDCgcAAQAJCxgAAAkGCwAACwAGGQAAABkZGQAAAAAAAAAAAAAAAAAAAAAOAAAAAAAAAAAZAAoNGRkZAA0AAAIACQ4AAAAJAA4AAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAEwAAAAATAAAAAAkMAAAAAAAMAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAA8AAAAEDwAAAAAJEAAAAAAAEAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASAAAAAAAAAAAAAAARAAAAABEAAAAACRIAAAAAABIAABIAABoAAAAaGhoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGgAAABoaGgAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAABcAAAAAFwAAAAAJFAAAAAAAFAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAAAAAAAAAAAAAAVAAAAABUAAAAACRYAAAAAABYAABYAADAxMjM0NTY3ODlBQkNERUbRdJ4AV529KoBwUg///z4nCgAAAGQAAADoAwAAECcAAKCGAQBAQg8AgJaYAADh9QUYAAAANQAAAHEAAABr////zvv//5K///8AAAAAAAAAAP////////////////////////////////////////////////////////////////8AAQIDBAUGBwgJ/////////woLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIj////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AAECBAcDBgUAAAAAAAAAAgAAwAMAAMAEAADABQAAwAYAAMAHAADACAAAwAkAAMAKAADACwAAwAwAAMANAADADgAAwA8AAMAQAADAEQAAwBIAAMATAADAFAAAwBUAAMAWAADAFwAAwBgAAMAZAADAGgAAwBsAAMAcAADAHQAAwB4AAMAfAADAAAAAswEAAMMCAADDAwAAwwQAAMMFAADDBgAAwwcAAMMIAADDCQAAwwoAAMMLAADDDAAAww0AANMOAADDDwAAwwAADLsBAAzDAgAMwwMADMMEAAzb");
  base64DecodeToExistingUint8Array(bufferView, 2140, "EItQAA==");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(imports) {
 var env = imports.env;
 var memory = env.memory;
 var buffer = memory.buffer;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var nan = NaN;
 var infinity = Infinity;
 var fimport$0 = env.emscripten_memcpy_big;
 var fimport$1 = env.emscripten_resize_heap;
 var global$0 = 5278480;
 var global$1 = 0;
 var global$2 = 0;
 var global$3 = 0;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  $100();
  $63();
 }
 
 function $1() {
  var $2_1 = 0, i64toi32_i32$0 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = 1;
  HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if (!(((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $2();
    break label$1;
   }
   $3();
  }
  global$0 = $2_1 + 16 | 0;
  return;
 }
 
 function $2() {
  $4(2144 | 0);
  return;
 }
 
 function $3() {
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $119 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4(18528 | 0);
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($2_1 + 8 | 0) >> 2] | 0) >>> 0 < 256 >>> 0 & 1 | 0)) {
       break label$3
      }
      i64toi32_i32$2 = (18528 + ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 11 | 0) | 0) + ((HEAP32[($2_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = $5(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $119 = i64toi32_i32$1;
      i64toi32_i32$1 = (18528 + ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 11 | 0) | 0) + ((HEAP32[($2_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $119;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $2_1 + 16 | 0;
  return;
 }
 
 function $4($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $80$hi = 0, $81$hi = 0, $78$hi = 0, $79$hi = 0, $84$hi = 0, $85$hi = 0, $30_1 = 0, $86$hi = 0, $87$hi = 0, $89_1 = 0, $89$hi = 0, $90$hi = 0, $91$hi = 0, $31_1 = 0, $96$hi = 0, $97$hi = 0, $99$hi = 0, $100$hi = 0, $101$hi = 0, $32_1 = 0, $102$hi = 0, $199 = 0, $234 = 0, $99_1 = 0, $275 = 0, $297 = 0;
  $3_1 = global$0 - 32 | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0) >>> 0 < 256 >>> 0 & 1 | 0)) {
     break label$1
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $3_1;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
       break label$3
      }
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
      $78$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $79$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $78$hi;
      i64toi32_i32$1 = $79$hi;
      i64toi32_i32$1 = $78$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = $79$hi;
      i64toi32_i32$3 = 1;
      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $80$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $81$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $80$hi;
      i64toi32_i32$0 = $81$hi;
      i64toi32_i32$0 = $80$hi;
      i64toi32_i32$0 = $81$hi;
      i64toi32_i32$0 = $80$hi;
      i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      i64toi32_i32$2 = $81$hi;
      i64toi32_i32$3 = 0;
      label$5 : {
       label$6 : {
        if (!(((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) & 1 | 0)) {
         break label$6
        }
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
        $84$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $85$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $84$hi;
        i64toi32_i32$0 = $85$hi;
        i64toi32_i32$0 = $84$hi;
        i64toi32_i32$3 = i64toi32_i32$1;
        i64toi32_i32$1 = $85$hi;
        i64toi32_i32$2 = 1;
        i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = 0;
         $30_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        } else {
         i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
         $30_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
        }
        $86$hi = i64toi32_i32$1;
        i64toi32_i32$1 = -915646571;
        $87$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $86$hi;
        i64toi32_i32$1 = $87$hi;
        i64toi32_i32$1 = $86$hi;
        i64toi32_i32$0 = $30_1;
        i64toi32_i32$3 = $87$hi;
        i64toi32_i32$2 = -679014590;
        i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
        $89_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
        $89$hi = i64toi32_i32$3;
        break label$5;
       }
       i64toi32_i32$1 = $3_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
       $90$hi = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       $91$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $90$hi;
       i64toi32_i32$0 = $91$hi;
       i64toi32_i32$0 = $90$hi;
       i64toi32_i32$1 = i64toi32_i32$3;
       i64toi32_i32$3 = $91$hi;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $31_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $31_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $89_1 = $31_1;
       $89$hi = i64toi32_i32$3;
      }
      i64toi32_i32$3 = $89$hi;
      i64toi32_i32$1 = $3_1;
      HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $89_1;
      HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$3;
      HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = (HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
    $199 = i64toi32_i32$3;
    i64toi32_i32$3 = (HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0) + ((HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAP32[i64toi32_i32$3 >> 2] = $199;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = (HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($3_1 + 24 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0) >>> 0 < 256 >>> 0 & 1 | 0)) {
     break label$7
    }
    i64toi32_i32$0 = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $234 = i64toi32_i32$1;
    i64toi32_i32$1 = $3_1;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $234;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$3;
    HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 1;
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
       break label$9
      }
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
      $96$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $97$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $96$hi;
      i64toi32_i32$1 = $97$hi;
      i64toi32_i32$1 = $96$hi;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$3 = $97$hi;
      i64toi32_i32$2 = 255;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      i64toi32_i32$1 = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + ((i64toi32_i32$0 & i64toi32_i32$2 | 0) << 3 | 0) | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $99_1 = i64toi32_i32$3;
      $99$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
      $100$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $101$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $100$hi;
      i64toi32_i32$3 = $101$hi;
      i64toi32_i32$3 = $100$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$0 = $101$hi;
      i64toi32_i32$2 = 8;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $32_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $32_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $102$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $99$hi;
      i64toi32_i32$0 = $102$hi;
      i64toi32_i32$0 = $99$hi;
      i64toi32_i32$3 = $99_1;
      i64toi32_i32$1 = $102$hi;
      i64toi32_i32$2 = $32_1;
      i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
      $275 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
      i64toi32_i32$3 = $3_1;
      HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $275;
      HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
      $297 = i64toi32_i32$1;
      i64toi32_i32$1 = ((HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0) + ((HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0) << 11 | 0) | 0) + ((HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0) << 3 | 0) | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $297;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$3;
      HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = (HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0) + 1 | 0;
      continue label$10;
     };
    }
    HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  return;
 }
 
 function $5($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $3_1 = 0, $5$hi = 0, $6$hi = 0, $45_1 = 0, $7$hi = 0, $8$hi = 0, $9$hi = 0, $10$hi = 0, $11$hi = 0, $12$hi = 0, $13$hi = 0, $46_1 = 0, $14$hi = 0, $17$hi = 0, $18$hi = 0, $47_1 = 0, $19$hi = 0, $20$hi = 0, $21$hi = 0, $22$hi = 0, $23$hi = 0, $24$hi = 0, $25$hi = 0, $48_1 = 0, $26$hi = 0, $28$hi = 0, $29$hi = 0, $49_1 = 0, $30$hi = 0, $31$hi = 0, $32$hi = 0, $50_1 = 0, $33$hi = 0, $51_1 = 0, $9_1 = 0, $10_1 = 0, $58_1 = 0, $67_1 = 0, $78_1 = 0, $21_1 = 0, $22_1 = 0, $85_1 = 0, $94_1 = 0, $30_1 = 0;
  $3_1 = global$0 - 16 | 0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $0_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 16711935;
  HEAP32[i64toi32_i32$1 >> 2] = 16711935;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$3 = 8;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $45_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $45_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  $8$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$2 = $8$hi;
  $51_1 = i64toi32_i32$0;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$1 = $45_1;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $9_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $10_1 = i64toi32_i32$0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$0 = $11$hi;
  $58_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$2 = $10_1;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$3 = $58_1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $13$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$1 = $13$hi;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $13$hi;
  i64toi32_i32$3 = 8;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $46_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $46_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $9$hi;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$2 = $9$hi;
  i64toi32_i32$1 = $9_1;
  i64toi32_i32$0 = $14$hi;
  i64toi32_i32$3 = $46_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $67_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $67_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 65535;
  HEAP32[i64toi32_i32$1 >> 2] = 65535;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
  $17$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $17$hi;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$1 = $17$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $18$hi;
  i64toi32_i32$3 = 16;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $47_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $47_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $19$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  $20$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $19$hi;
  i64toi32_i32$2 = $20$hi;
  $78_1 = i64toi32_i32$0;
  i64toi32_i32$2 = $19$hi;
  i64toi32_i32$1 = $47_1;
  i64toi32_i32$0 = $20$hi;
  i64toi32_i32$3 = $78_1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $21_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $22_1 = i64toi32_i32$0;
  $22$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $22$hi;
  i64toi32_i32$0 = $23$hi;
  $85_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $22$hi;
  i64toi32_i32$2 = $22_1;
  i64toi32_i32$1 = $23$hi;
  i64toi32_i32$3 = $85_1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $24$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $25$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $24$hi;
  i64toi32_i32$1 = $25$hi;
  i64toi32_i32$1 = $24$hi;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $25$hi;
  i64toi32_i32$3 = 16;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $48_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $48_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $26$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $21$hi;
  i64toi32_i32$2 = $26$hi;
  i64toi32_i32$2 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$0 = $26$hi;
  i64toi32_i32$3 = $48_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $94_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $94_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
  $28$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $29$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $28$hi;
  i64toi32_i32$1 = $29$hi;
  i64toi32_i32$1 = $28$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $29$hi;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $49_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $49_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $30_1 = $49_1;
  $30$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
  $31$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $32$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $31$hi;
  i64toi32_i32$2 = $32$hi;
  i64toi32_i32$2 = $31$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = $32$hi;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $50_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $50_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $33$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $30$hi;
  i64toi32_i32$0 = $33$hi;
  i64toi32_i32$0 = $30$hi;
  i64toi32_i32$2 = $30_1;
  i64toi32_i32$1 = $33$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function $6($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $27_1 = 0, $27$hi = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = 1;
  HEAP32[($5_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if (!(((HEAPU8[($5_1 + 8 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = $7(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $27_1 = i64toi32_i32$1;
    $27$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$2 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = $8(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $27_1 = i64toi32_i32$1;
   $27$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $27$hi;
  i64toi32_i32$1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $27_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $7($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $117$hi = 0, $118$hi = 0, $9_1 = 0, $120$hi = 0, $20_1 = 0, $121$hi = 0, $122$hi = 0, $123$hi = 0, $125$hi = 0, $126$hi = 0, $127$hi = 0, $99_1 = 0, $128$hi = 0, $130$hi = 0, $133$hi = 0, $134$hi = 0, $136$hi = 0, $137$hi = 0, $138$hi = 0, $100_1 = 0, $139$hi = 0, $140$hi = 0, $142$hi = 0, $143$hi = 0, $144$hi = 0, $145$hi = 0, $101_1 = 0, $146$hi = 0, $147$hi = 0, $149$hi = 0, $150$hi = 0, $151$hi = 0, $152$hi = 0, $102_1 = 0, $153$hi = 0, $154$hi = 0, $156$hi = 0, $157$hi = 0, $158$hi = 0, $159$hi = 0, $104_1 = 0, $160$hi = 0, $161$hi = 0, $163$hi = 0, $164$hi = 0, $165$hi = 0, $166$hi = 0, $105_1 = 0, $167$hi = 0, $168$hi = 0, $170$hi = 0, $171$hi = 0, $172$hi = 0, $173$hi = 0, $106_1 = 0, $174$hi = 0, $175$hi = 0, $177$hi = 0, $178$hi = 0, $179$hi = 0, $180$hi = 0, $107 = 0, $182$hi = 0, $184$hi = 0, $103_1 = 0, $185$hi = 0, $186$hi = 0, $187$hi = 0, $189$hi = 0, $190$hi = 0, $191$hi = 0, $108 = 0, $192$hi = 0, $194$hi = 0, $195$hi = 0, $217 = 0, $125 = 0, $281 = 0, $130 = 0, $307$hi = 0, $311 = 0, $136 = 0, $352 = 0, $143 = 0, $376 = 0, $150 = 0, $400 = 0, $157 = 0, $424 = 0, $164 = 0, $448 = 0, $171 = 0, $472 = 0, $178 = 0, $490 = 0, $493 = 0, $189 = 0, $553 = 0;
  $5_1 = global$0 - 32 | 0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$1 = $5_1;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $0_1;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
  $117$hi = i64toi32_i32$1;
  i64toi32_i32$1 = -1;
  $118$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $117$hi;
  i64toi32_i32$1 = $118$hi;
  i64toi32_i32$1 = $117$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $118$hi;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
  $217 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $5_1;
  HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $217;
  HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$0;
  label$1 : while (1) {
   $9_1 = 0;
   label$2 : {
    if (!(HEAP32[($5_1 + 16 | 0) >> 2] | 0)) {
     break label$2
    }
    $9_1 = ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) & 7 | 0 | 0) != (0 | 0);
   }
   label$3 : {
    if (!($9_1 & 1 | 0)) {
     break label$3
    }
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
    $120$hi = i64toi32_i32$2;
    $20_1 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = $20_1 + 1 | 0;
    i64toi32_i32$2 = 0;
    $121$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $120$hi;
    i64toi32_i32$2 = $121$hi;
    i64toi32_i32$2 = $120$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = $121$hi;
    i64toi32_i32$3 = (HEAPU8[$20_1 >> 0] | 0) & 255 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $122$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $123$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $122$hi;
    i64toi32_i32$0 = $123$hi;
    i64toi32_i32$0 = $122$hi;
    i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$1 = $123$hi;
    i64toi32_i32$3 = 255;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 2144 + ((i64toi32_i32$2 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $125 = i64toi32_i32$1;
    $125$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
    $126$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $127$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $126$hi;
    i64toi32_i32$1 = $127$hi;
    i64toi32_i32$1 = $126$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = $127$hi;
    i64toi32_i32$3 = 8;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $99_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $99_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $128$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $125$hi;
    i64toi32_i32$2 = $128$hi;
    i64toi32_i32$2 = $125$hi;
    i64toi32_i32$1 = $125;
    i64toi32_i32$0 = $128$hi;
    i64toi32_i32$3 = $99_1;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $281 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$1 = $5_1;
    HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $281;
    HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = (HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0) + -1 | 0;
    continue label$1;
   }
   break label$1;
  };
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 >= 8 >>> 0 & 1 | 0)) {
     break label$4
    }
    i64toi32_i32$2 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $130 = i64toi32_i32$0;
    $130$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
    $307$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $130$hi;
    i64toi32_i32$0 = $307$hi;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = $130$hi;
    i64toi32_i32$3 = $130;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $311 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = $5_1;
    HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $311;
    HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
    $133$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $134$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $133$hi;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$2 = $133$hi;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$1 = $134$hi;
    i64toi32_i32$3 = 255;
    i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    i64toi32_i32$2 = (2144 + 14336 | 0) + ((i64toi32_i32$0 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $136 = i64toi32_i32$1;
    $136$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
    $137$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $138$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $137$hi;
    i64toi32_i32$1 = $138$hi;
    i64toi32_i32$1 = $137$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $138$hi;
    i64toi32_i32$3 = 8;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $100_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $100_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $139$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $140$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $139$hi;
    i64toi32_i32$0 = $140$hi;
    i64toi32_i32$0 = $139$hi;
    i64toi32_i32$1 = $100_1;
    i64toi32_i32$2 = $140$hi;
    i64toi32_i32$3 = 255;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    i64toi32_i32$0 = (2144 + 12288 | 0) + ((i64toi32_i32$1 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $142$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $136$hi;
    i64toi32_i32$1 = $142$hi;
    $352 = i64toi32_i32$2;
    i64toi32_i32$1 = $136$hi;
    i64toi32_i32$0 = $136;
    i64toi32_i32$2 = $142$hi;
    i64toi32_i32$3 = $352;
    i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    $143 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    $143$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
    $144$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $145$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $144$hi;
    i64toi32_i32$0 = $145$hi;
    i64toi32_i32$0 = $144$hi;
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$2 = $145$hi;
    i64toi32_i32$3 = 16;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $101_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $101_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $146$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $147$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $146$hi;
    i64toi32_i32$2 = $147$hi;
    i64toi32_i32$2 = $146$hi;
    i64toi32_i32$0 = $101_1;
    i64toi32_i32$1 = $147$hi;
    i64toi32_i32$3 = 255;
    i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    i64toi32_i32$2 = (2144 + 10240 | 0) + ((i64toi32_i32$0 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $149$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $143$hi;
    i64toi32_i32$0 = $149$hi;
    $376 = i64toi32_i32$1;
    i64toi32_i32$0 = $143$hi;
    i64toi32_i32$2 = $143;
    i64toi32_i32$1 = $149$hi;
    i64toi32_i32$3 = $376;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $150 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    $150$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
    $151$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $152$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $151$hi;
    i64toi32_i32$2 = $152$hi;
    i64toi32_i32$2 = $151$hi;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$1 = $152$hi;
    i64toi32_i32$3 = 24;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $102_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $102_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $153$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $154$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $153$hi;
    i64toi32_i32$1 = $154$hi;
    i64toi32_i32$1 = $153$hi;
    i64toi32_i32$2 = $102_1;
    i64toi32_i32$0 = $154$hi;
    i64toi32_i32$3 = 255;
    i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    i64toi32_i32$1 = (2144 + 8192 | 0) + ((i64toi32_i32$2 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $156$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $150$hi;
    i64toi32_i32$2 = $156$hi;
    $400 = i64toi32_i32$0;
    i64toi32_i32$2 = $150$hi;
    i64toi32_i32$1 = $150;
    i64toi32_i32$0 = $156$hi;
    i64toi32_i32$3 = $400;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $157 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $157$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
    $158$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $159$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $158$hi;
    i64toi32_i32$1 = $159$hi;
    i64toi32_i32$1 = $158$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $159$hi;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $104_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $104_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $160$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $161$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $160$hi;
    i64toi32_i32$0 = $161$hi;
    i64toi32_i32$0 = $160$hi;
    i64toi32_i32$1 = $104_1;
    i64toi32_i32$2 = $161$hi;
    i64toi32_i32$3 = 255;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    i64toi32_i32$0 = (2144 + 6144 | 0) + ((i64toi32_i32$1 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $163$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $157$hi;
    i64toi32_i32$1 = $163$hi;
    $424 = i64toi32_i32$2;
    i64toi32_i32$1 = $157$hi;
    i64toi32_i32$0 = $157;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$3 = $424;
    i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    $164 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    $164$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
    $165$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $166$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $165$hi;
    i64toi32_i32$0 = $166$hi;
    i64toi32_i32$0 = $165$hi;
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$2 = $166$hi;
    i64toi32_i32$3 = 40;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $105_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $105_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $167$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $168$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $167$hi;
    i64toi32_i32$2 = $168$hi;
    i64toi32_i32$2 = $167$hi;
    i64toi32_i32$0 = $105_1;
    i64toi32_i32$1 = $168$hi;
    i64toi32_i32$3 = 255;
    i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    i64toi32_i32$2 = (2144 + 4096 | 0) + ((i64toi32_i32$0 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $170$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $164$hi;
    i64toi32_i32$0 = $170$hi;
    $448 = i64toi32_i32$1;
    i64toi32_i32$0 = $164$hi;
    i64toi32_i32$2 = $164;
    i64toi32_i32$1 = $170$hi;
    i64toi32_i32$3 = $448;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $171 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    $171$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
    $172$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $173$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $172$hi;
    i64toi32_i32$2 = $173$hi;
    i64toi32_i32$2 = $172$hi;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$1 = $173$hi;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $106_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $106_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $174$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $175$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $174$hi;
    i64toi32_i32$1 = $175$hi;
    i64toi32_i32$1 = $174$hi;
    i64toi32_i32$2 = $106_1;
    i64toi32_i32$0 = $175$hi;
    i64toi32_i32$3 = 255;
    i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    i64toi32_i32$1 = (2144 + 2048 | 0) + ((i64toi32_i32$2 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $177$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $171$hi;
    i64toi32_i32$2 = $177$hi;
    $472 = i64toi32_i32$0;
    i64toi32_i32$2 = $171$hi;
    i64toi32_i32$1 = $171;
    i64toi32_i32$0 = $177$hi;
    i64toi32_i32$3 = $472;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $178 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $178$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
    $179$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $180$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $179$hi;
    i64toi32_i32$1 = $180$hi;
    i64toi32_i32$1 = $179$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $180$hi;
    i64toi32_i32$3 = 56;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $107 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $107 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$1 = 2144 + ($107 << 3 | 0) | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $182$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $178$hi;
    i64toi32_i32$2 = $182$hi;
    $490 = i64toi32_i32$0;
    i64toi32_i32$2 = $178$hi;
    i64toi32_i32$1 = $178;
    i64toi32_i32$0 = $182$hi;
    i64toi32_i32$3 = $490;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $493 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$1 = $5_1;
    HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $493;
    HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = (HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0) + 8 | 0;
    HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = (HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0) - 8 | 0;
    continue label$5;
   };
  }
  label$6 : {
   label$7 : while (1) {
    if (!(HEAP32[($5_1 + 16 | 0) >> 2] | 0)) {
     break label$6
    }
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
    $184$hi = i64toi32_i32$1;
    $103_1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = $103_1 + 1 | 0;
    i64toi32_i32$1 = 0;
    $185$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $184$hi;
    i64toi32_i32$1 = $185$hi;
    i64toi32_i32$1 = $184$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $185$hi;
    i64toi32_i32$3 = (HEAPU8[$103_1 >> 0] | 0) & 255 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $186$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $187$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $186$hi;
    i64toi32_i32$0 = $187$hi;
    i64toi32_i32$0 = $186$hi;
    i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = $187$hi;
    i64toi32_i32$3 = 255;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 2144 + ((i64toi32_i32$1 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $189 = i64toi32_i32$2;
    $189$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
    $190$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $191$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $190$hi;
    i64toi32_i32$2 = $191$hi;
    i64toi32_i32$2 = $190$hi;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$1 = $191$hi;
    i64toi32_i32$3 = 8;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $108 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $108 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $192$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $189$hi;
    i64toi32_i32$1 = $192$hi;
    i64toi32_i32$1 = $189$hi;
    i64toi32_i32$2 = $189;
    i64toi32_i32$0 = $192$hi;
    i64toi32_i32$3 = $108;
    i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $553 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = $5_1;
    HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $553;
    HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = (HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0) + -1 | 0;
    continue label$7;
   };
  }
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
  $194$hi = i64toi32_i32$2;
  i64toi32_i32$2 = -1;
  $195$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $194$hi;
  i64toi32_i32$2 = $195$hi;
  i64toi32_i32$2 = $194$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = $195$hi;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $8($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $120$hi = 0, $121$hi = 0, $9_1 = 0, $123$hi = 0, $124$hi = 0, $99_1 = 0, $125$hi = 0, $20_1 = 0, $126$hi = 0, $128$hi = 0, $129$hi = 0, $130$hi = 0, $100_1 = 0, $131$hi = 0, $133$hi = 0, $136$hi = 0, $137$hi = 0, $139$hi = 0, $140$hi = 0, $141$hi = 0, $101_1 = 0, $142$hi = 0, $143$hi = 0, $145$hi = 0, $146$hi = 0, $147$hi = 0, $148$hi = 0, $102_1 = 0, $149$hi = 0, $150$hi = 0, $152$hi = 0, $153$hi = 0, $154$hi = 0, $155$hi = 0, $104_1 = 0, $156$hi = 0, $157$hi = 0, $159$hi = 0, $160$hi = 0, $161$hi = 0, $162$hi = 0, $105_1 = 0, $163$hi = 0, $164$hi = 0, $166$hi = 0, $167$hi = 0, $168$hi = 0, $169$hi = 0, $106_1 = 0, $170$hi = 0, $171$hi = 0, $173$hi = 0, $174$hi = 0, $175$hi = 0, $176$hi = 0, $107 = 0, $177$hi = 0, $178$hi = 0, $180$hi = 0, $181$hi = 0, $182$hi = 0, $183$hi = 0, $108 = 0, $185$hi = 0, $187$hi = 0, $188$hi = 0, $109 = 0, $189$hi = 0, $103_1 = 0, $190$hi = 0, $192$hi = 0, $193$hi = 0, $194$hi = 0, $110 = 0, $195$hi = 0, $198$hi = 0, $199$hi = 0, $224 = 0, $128 = 0, $288 = 0, $133 = 0, $314$hi = 0, $318 = 0, $139 = 0, $356 = 0, $146 = 0, $380 = 0, $153 = 0, $404 = 0, $160 = 0, $428 = 0, $167 = 0, $452 = 0, $174 = 0, $476 = 0, $181 = 0, $497 = 0, $500 = 0, $192 = 0, $560 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$1 = $5_1;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $0_1;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
  i64toi32_i32$1 = $5(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $120$hi = i64toi32_i32$0;
  i64toi32_i32$0 = -1;
  $121$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $120$hi;
  i64toi32_i32$0 = $121$hi;
  i64toi32_i32$0 = $120$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = $121$hi;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $224 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $5_1;
  HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $224;
  HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$1;
  label$1 : while (1) {
   $9_1 = 0;
   label$2 : {
    if (!(HEAP32[($5_1 + 16 | 0) >> 2] | 0)) {
     break label$2
    }
    $9_1 = ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) & 7 | 0 | 0) != (0 | 0);
   }
   label$3 : {
    if (!($9_1 & 1 | 0)) {
     break label$3
    }
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
    $123$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $124$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $123$hi;
    i64toi32_i32$2 = $124$hi;
    i64toi32_i32$2 = $123$hi;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$1 = $124$hi;
    i64toi32_i32$3 = 56;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $99_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $99_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $125$hi = i64toi32_i32$1;
    $20_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = $20_1 + 1 | 0;
    i64toi32_i32$1 = 0;
    $126$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $125$hi;
    i64toi32_i32$1 = $126$hi;
    i64toi32_i32$1 = $125$hi;
    i64toi32_i32$2 = $99_1;
    i64toi32_i32$0 = $126$hi;
    i64toi32_i32$3 = (HEAPU8[$20_1 >> 0] | 0) & 255 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    i64toi32_i32$1 = 18528 + ((i64toi32_i32$2 ^ i64toi32_i32$3 | 0) << 3 | 0) | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $128 = i64toi32_i32$0;
    $128$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
    $129$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $130$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $129$hi;
    i64toi32_i32$0 = $130$hi;
    i64toi32_i32$0 = $129$hi;
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$2 = $130$hi;
    i64toi32_i32$3 = 8;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $100_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $100_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $131$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $128$hi;
    i64toi32_i32$2 = $131$hi;
    i64toi32_i32$2 = $128$hi;
    i64toi32_i32$0 = $128;
    i64toi32_i32$1 = $131$hi;
    i64toi32_i32$3 = $100_1;
    i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $288 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$0 = $5_1;
    HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $288;
    HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = (HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0) + -1 | 0;
    continue label$1;
   }
   break label$1;
  };
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 >= 8 >>> 0 & 1 | 0)) {
     break label$4
    }
    i64toi32_i32$2 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $133 = i64toi32_i32$1;
    $133$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
    $314$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $133$hi;
    i64toi32_i32$1 = $314$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $133$hi;
    i64toi32_i32$3 = $133;
    i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $318 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = $5_1;
    HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $318;
    HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
    $136$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $137$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $136$hi;
    i64toi32_i32$2 = $137$hi;
    i64toi32_i32$2 = $136$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = $137$hi;
    i64toi32_i32$3 = 255;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    i64toi32_i32$2 = 18528 + ((i64toi32_i32$1 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $139 = i64toi32_i32$0;
    $139$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
    $140$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $141$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $140$hi;
    i64toi32_i32$0 = $141$hi;
    i64toi32_i32$0 = $140$hi;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = $141$hi;
    i64toi32_i32$3 = 8;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $101_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $101_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $142$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $143$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $142$hi;
    i64toi32_i32$1 = $143$hi;
    i64toi32_i32$1 = $142$hi;
    i64toi32_i32$0 = $101_1;
    i64toi32_i32$2 = $143$hi;
    i64toi32_i32$3 = 255;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = (18528 + 2048 | 0) + ((i64toi32_i32$0 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $145$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $139$hi;
    i64toi32_i32$0 = $145$hi;
    $356 = i64toi32_i32$2;
    i64toi32_i32$0 = $139$hi;
    i64toi32_i32$1 = $139;
    i64toi32_i32$2 = $145$hi;
    i64toi32_i32$3 = $356;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $146 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $146$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
    $147$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $148$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $147$hi;
    i64toi32_i32$1 = $148$hi;
    i64toi32_i32$1 = $147$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = $148$hi;
    i64toi32_i32$3 = 16;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $102_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $102_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $149$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $150$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $149$hi;
    i64toi32_i32$2 = $150$hi;
    i64toi32_i32$2 = $149$hi;
    i64toi32_i32$1 = $102_1;
    i64toi32_i32$0 = $150$hi;
    i64toi32_i32$3 = 255;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    i64toi32_i32$2 = (18528 + 4096 | 0) + ((i64toi32_i32$1 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $152$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $146$hi;
    i64toi32_i32$1 = $152$hi;
    $380 = i64toi32_i32$0;
    i64toi32_i32$1 = $146$hi;
    i64toi32_i32$2 = $146;
    i64toi32_i32$0 = $152$hi;
    i64toi32_i32$3 = $380;
    i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $153 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    $153$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
    $154$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $155$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $154$hi;
    i64toi32_i32$2 = $155$hi;
    i64toi32_i32$2 = $154$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = $155$hi;
    i64toi32_i32$3 = 24;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $104_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $104_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $156$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $157$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $156$hi;
    i64toi32_i32$0 = $157$hi;
    i64toi32_i32$0 = $156$hi;
    i64toi32_i32$2 = $104_1;
    i64toi32_i32$1 = $157$hi;
    i64toi32_i32$3 = 255;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = (18528 + 6144 | 0) + ((i64toi32_i32$2 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $159$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $153$hi;
    i64toi32_i32$2 = $159$hi;
    $404 = i64toi32_i32$1;
    i64toi32_i32$2 = $153$hi;
    i64toi32_i32$0 = $153;
    i64toi32_i32$1 = $159$hi;
    i64toi32_i32$3 = $404;
    i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $160 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    $160$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
    $161$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $162$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $161$hi;
    i64toi32_i32$0 = $162$hi;
    i64toi32_i32$0 = $161$hi;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = $162$hi;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $105_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $105_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $163$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $164$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $163$hi;
    i64toi32_i32$1 = $164$hi;
    i64toi32_i32$1 = $163$hi;
    i64toi32_i32$0 = $105_1;
    i64toi32_i32$2 = $164$hi;
    i64toi32_i32$3 = 255;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = (18528 + 8192 | 0) + ((i64toi32_i32$0 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $166$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $160$hi;
    i64toi32_i32$0 = $166$hi;
    $428 = i64toi32_i32$2;
    i64toi32_i32$0 = $160$hi;
    i64toi32_i32$1 = $160;
    i64toi32_i32$2 = $166$hi;
    i64toi32_i32$3 = $428;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $167 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $167$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
    $168$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $169$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $168$hi;
    i64toi32_i32$1 = $169$hi;
    i64toi32_i32$1 = $168$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = $169$hi;
    i64toi32_i32$3 = 40;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $106_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $106_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $170$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $171$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $170$hi;
    i64toi32_i32$2 = $171$hi;
    i64toi32_i32$2 = $170$hi;
    i64toi32_i32$1 = $106_1;
    i64toi32_i32$0 = $171$hi;
    i64toi32_i32$3 = 255;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    i64toi32_i32$2 = (18528 + 10240 | 0) + ((i64toi32_i32$1 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $173$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $167$hi;
    i64toi32_i32$1 = $173$hi;
    $452 = i64toi32_i32$0;
    i64toi32_i32$1 = $167$hi;
    i64toi32_i32$2 = $167;
    i64toi32_i32$0 = $173$hi;
    i64toi32_i32$3 = $452;
    i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $174 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    $174$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
    $175$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $176$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $175$hi;
    i64toi32_i32$2 = $176$hi;
    i64toi32_i32$2 = $175$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = $176$hi;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $107 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $107 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $177$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $178$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $177$hi;
    i64toi32_i32$0 = $178$hi;
    i64toi32_i32$0 = $177$hi;
    i64toi32_i32$2 = $107;
    i64toi32_i32$1 = $178$hi;
    i64toi32_i32$3 = 255;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = (18528 + 12288 | 0) + ((i64toi32_i32$2 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $180$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $174$hi;
    i64toi32_i32$2 = $180$hi;
    $476 = i64toi32_i32$1;
    i64toi32_i32$2 = $174$hi;
    i64toi32_i32$0 = $174;
    i64toi32_i32$1 = $180$hi;
    i64toi32_i32$3 = $476;
    i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $181 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    $181$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
    $182$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $183$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $182$hi;
    i64toi32_i32$0 = $183$hi;
    i64toi32_i32$0 = $182$hi;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = $183$hi;
    i64toi32_i32$3 = 56;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $108 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $108 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$0 = (18528 + 14336 | 0) + ($108 << 3 | 0) | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $185$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $181$hi;
    i64toi32_i32$2 = $185$hi;
    $497 = i64toi32_i32$1;
    i64toi32_i32$2 = $181$hi;
    i64toi32_i32$0 = $181;
    i64toi32_i32$1 = $185$hi;
    i64toi32_i32$3 = $497;
    i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $500 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$0 = $5_1;
    HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $500;
    HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = (HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0) + 8 | 0;
    HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = (HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0) - 8 | 0;
    continue label$5;
   };
  }
  label$6 : {
   label$7 : while (1) {
    if (!(HEAP32[($5_1 + 16 | 0) >> 2] | 0)) {
     break label$6
    }
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
    $187$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $188$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $187$hi;
    i64toi32_i32$0 = $188$hi;
    i64toi32_i32$0 = $187$hi;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = $188$hi;
    i64toi32_i32$3 = 56;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $109 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $109 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $189$hi = i64toi32_i32$1;
    $103_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = $103_1 + 1 | 0;
    i64toi32_i32$1 = 0;
    $190$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $189$hi;
    i64toi32_i32$1 = $190$hi;
    i64toi32_i32$1 = $189$hi;
    i64toi32_i32$0 = $109;
    i64toi32_i32$2 = $190$hi;
    i64toi32_i32$3 = (HEAPU8[$103_1 >> 0] | 0) & 255 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    i64toi32_i32$1 = 18528 + ((i64toi32_i32$0 ^ i64toi32_i32$3 | 0) << 3 | 0) | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $192 = i64toi32_i32$2;
    $192$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
    $193$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $194$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $193$hi;
    i64toi32_i32$2 = $194$hi;
    i64toi32_i32$2 = $193$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = $194$hi;
    i64toi32_i32$3 = 8;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $110 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $110 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $195$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $192$hi;
    i64toi32_i32$0 = $195$hi;
    i64toi32_i32$0 = $192$hi;
    i64toi32_i32$2 = $192;
    i64toi32_i32$1 = $195$hi;
    i64toi32_i32$3 = $110;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $560 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = $5_1;
    HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $560;
    HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = (HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0) + -1 | 0;
    continue label$7;
   };
  }
  i64toi32_i32$0 = $5_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
  i64toi32_i32$2 = $5(i64toi32_i32$1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $198$hi = i64toi32_i32$1;
  i64toi32_i32$1 = -1;
  $199$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $198$hi;
  i64toi32_i32$1 = $199$hi;
  i64toi32_i32$1 = $198$hi;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = $199$hi;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  global$0 = $5_1 + 32 | 0;
  i64toi32_i32$0 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function $9($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $12($5_1 | 0, 1062 | 0, $4_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $10($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, i64toi32_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $11($5_1 | 0, 1062 | 0, $4_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $11($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $43($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $12($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $69($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $13($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $6$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = $1_1;
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $14() {
  return 34912 | 0;
 }
 
 function $15($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $16($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $17($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $18($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $19() {
  $17(34916 | 0);
  return 34920 | 0;
 }
 
 function $20() {
  $18(34916 | 0);
 }
 
 function $21($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $22($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $23($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     if (!$2_1) {
      break label$3
     }
     $4_1 = $1_1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
       break label$2
      }
      $2_1 = $2_1 + -1 | 0;
      $3_1 = ($2_1 | 0) != (0 | 0);
      $0_1 = $0_1 + 1 | 0;
      if (!($0_1 & 3 | 0)) {
       break label$3
      }
      if ($2_1) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3_1) {
     break label$1
    }
    label$5 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
      break label$5
     }
     if ($2_1 >>> 0 < 4 >>> 0) {
      break label$5
     }
     $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
     label$6 : while (1) {
      $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$2
      }
      $0_1 = $0_1 + 4 | 0;
      $2_1 = $2_1 + -4 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
       continue label$6
      }
      break label$6;
     };
    }
    if (!$2_1) {
     break label$1
    }
   }
   $3_1 = $1_1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
      break label$8
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function $24($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $23($0_1 | 0, 0 | 0, $1_1 | 0) | 0;
  return ($2_1 ? $2_1 - $0_1 | 0 : $1_1) | 0;
 }
 
 function $25($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $10_1 = 0, $2$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3_1 = $10_1 & 2047 | 0;
   if (($3_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $3_1 = 0;
      break label$3;
     }
     $0_1 = +$25(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $3_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $3_1 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $26($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$0($0_1 | 0, $1_1 | 0, $2_1 | 0);
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ($0_1 & 3 | 0) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if ($2_1) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (!($2_1 & 3 | 0)) {
       break label$4
      }
      if ($2_1 >>> 0 < $3_1 >>> 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $27($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($21($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP32[($2_1 + 80 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
      break label$5
     }
     $3_1 = 0;
     break label$4;
    }
    $4_1 = $1_1;
    label$6 : while (1) {
     label$7 : {
      $3_1 = $4_1;
      if ($3_1) {
       break label$7
      }
      $3_1 = 0;
      break label$4;
     }
     $4_1 = $3_1 + -1 | 0;
     if ((HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $0_1 = $0_1 + $3_1 | 0;
    $1_1 = $1_1 - $3_1 | 0;
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
   }
   $26($5_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $3_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $28($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $6_1 = 0;
  $13($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($29(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $4_1 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $6_1 = $15($0_1 | 0) | 0;
   }
   $7_1 = HEAP32[$0_1 >> 2] | 0;
   label$4 : {
    if ((HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0_1 >> 2] = $7_1 & -33 | 0;
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       if (HEAP32[($0_1 + 48 | 0) >> 2] | 0) {
        break label$8
       }
       HEAP32[($0_1 + 48 | 0) >> 2] = 80;
       HEAP32[($0_1 + 28 | 0) >> 2] = 0;
       i64toi32_i32$0 = 0;
       HEAP32[($0_1 + 16 | 0) >> 2] = 0;
       HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
       $8_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
       HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
       break label$7;
      }
      $8_1 = 0;
      if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
       break label$6
      }
     }
     $2_1 = -1;
     if ($21($0_1 | 0) | 0) {
      break label$5
     }
    }
    $2_1 = $29($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   }
   $4_1 = $7_1 & 32 | 0;
   label$9 : {
    if (!$8_1) {
     break label$9
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $8_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    $2_1 = $3_1 ? $2_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $4_1 | 0;
   $4_1 = $3_1 & 32 | 0 ? -1 : $2_1;
   if (!$6_1) {
    break label$1
   }
   $16($0_1 | 0);
  }
  global$0 = $5_1 + 208 | 0;
  return $4_1 | 0;
 }
 
 function $29($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $15_1 = 0, $20_1 = 0, i64toi32_i32$1 = 0, $17_1 = 0, $18_1 = 0, $14_1 = 0, $13_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $11_1 = 0, $16_1 = 0, $19_1 = 0, $22_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $9_1 = 0, $24_1 = 0, $10_1 = 0, $25_1 = 0, $25$hi = 0, $21_1 = 0, $23_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $8_1 = 0, $272 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 55 | 0;
  $9_1 = $7_1 + 56 | 0;
  $10_1 = 0;
  $11_1 = 0;
  $12_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       $13_1 = $1_1;
       if (($12_1 | 0) > ($11_1 ^ 2147483647 | 0 | 0)) {
        break label$4
       }
       $11_1 = $12_1 + $11_1 | 0;
       $12_1 = $13_1;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            $14_1 = HEAPU8[$12_1 >> 0] | 0;
            if (!$14_1) {
             break label$10
            }
            label$11 : while (1) {
             label$12 : {
              label$13 : {
               label$14 : {
                $14_1 = $14_1 & 255 | 0;
                if ($14_1) {
                 break label$14
                }
                $1_1 = $12_1;
                break label$13;
               }
               if (($14_1 | 0) != (37 | 0)) {
                break label$12
               }
               $14_1 = $12_1;
               label$15 : while (1) {
                label$16 : {
                 if ((HEAPU8[($14_1 + 1 | 0) >> 0] | 0 | 0) == (37 | 0)) {
                  break label$16
                 }
                 $1_1 = $14_1;
                 break label$13;
                }
                $12_1 = $12_1 + 1 | 0;
                $15_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
                $1_1 = $14_1 + 2 | 0;
                $14_1 = $1_1;
                if (($15_1 | 0) == (37 | 0)) {
                 continue label$15
                }
                break label$15;
               };
              }
              $12_1 = $12_1 - $13_1 | 0;
              $14_1 = $11_1 ^ 2147483647 | 0;
              if (($12_1 | 0) > ($14_1 | 0)) {
               break label$4
              }
              label$17 : {
               if (!$0_1) {
                break label$17
               }
               $30($0_1 | 0, $13_1 | 0, $12_1 | 0);
              }
              if ($12_1) {
               continue label$5
              }
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              $12_1 = $1_1 + 1 | 0;
              $16_1 = -1;
              label$18 : {
               if (!($22(HEAP8[($1_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                break label$18
               }
               if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$18
               }
               $12_1 = $1_1 + 3 | 0;
               $16_1 = (HEAP8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0;
               $10_1 = 1;
              }
              HEAP32[($7_1 + 76 | 0) >> 2] = $12_1;
              $17_1 = 0;
              label$19 : {
               label$20 : {
                $18_1 = HEAP8[$12_1 >> 0] | 0;
                $1_1 = $18_1 + -32 | 0;
                if ($1_1 >>> 0 <= 31 >>> 0) {
                 break label$20
                }
                $15_1 = $12_1;
                break label$19;
               }
               $17_1 = 0;
               $15_1 = $12_1;
               $1_1 = 1 << $1_1 | 0;
               if (!($1_1 & 75913 | 0)) {
                break label$19
               }
               label$21 : while (1) {
                $15_1 = $12_1 + 1 | 0;
                HEAP32[($7_1 + 76 | 0) >> 2] = $15_1;
                $17_1 = $1_1 | $17_1 | 0;
                $18_1 = HEAP8[($12_1 + 1 | 0) >> 0] | 0;
                $1_1 = $18_1 + -32 | 0;
                if ($1_1 >>> 0 >= 32 >>> 0) {
                 break label$19
                }
                $12_1 = $15_1;
                $1_1 = 1 << $1_1 | 0;
                if ($1_1 & 75913 | 0) {
                 continue label$21
                }
                break label$21;
               };
              }
              label$22 : {
               label$23 : {
                if (($18_1 | 0) != (42 | 0)) {
                 break label$23
                }
                label$24 : {
                 label$25 : {
                  if (!($22(HEAP8[($15_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                   break label$25
                  }
                  if ((HEAPU8[($15_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                   break label$25
                  }
                  HEAP32[((((HEAP8[($15_1 + 1 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
                  $18_1 = $15_1 + 3 | 0;
                  $19_1 = HEAP32[((((HEAP8[($15_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
                  $10_1 = 1;
                  break label$24;
                 }
                 if ($10_1) {
                  break label$9
                 }
                 $18_1 = $15_1 + 1 | 0;
                 label$26 : {
                  if ($0_1) {
                   break label$26
                  }
                  HEAP32[($7_1 + 76 | 0) >> 2] = $18_1;
                  $10_1 = 0;
                  $19_1 = 0;
                  break label$22;
                 }
                 $12_1 = HEAP32[$2_1 >> 2] | 0;
                 HEAP32[$2_1 >> 2] = $12_1 + 4 | 0;
                 $19_1 = HEAP32[$12_1 >> 2] | 0;
                 $10_1 = 0;
                }
                HEAP32[($7_1 + 76 | 0) >> 2] = $18_1;
                if (($19_1 | 0) > (-1 | 0)) {
                 break label$22
                }
                $19_1 = 0 - $19_1 | 0;
                $17_1 = $17_1 | 8192 | 0;
                break label$22;
               }
               $19_1 = $31($7_1 + 76 | 0 | 0) | 0;
               if (($19_1 | 0) < (0 | 0)) {
                break label$4
               }
               $18_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              }
              $12_1 = 0;
              $20_1 = -1;
              label$27 : {
               label$28 : {
                if ((HEAPU8[$18_1 >> 0] | 0 | 0) == (46 | 0)) {
                 break label$28
                }
                $1_1 = $18_1;
                $21_1 = 0;
                break label$27;
               }
               label$29 : {
                if ((HEAPU8[($18_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
                 break label$29
                }
                label$30 : {
                 label$31 : {
                  if (!($22(HEAP8[($18_1 + 2 | 0) >> 0] | 0 | 0) | 0)) {
                   break label$31
                  }
                  if ((HEAPU8[($18_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                   break label$31
                  }
                  HEAP32[((((HEAP8[($18_1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
                  $1_1 = $18_1 + 4 | 0;
                  $20_1 = HEAP32[((((HEAP8[($18_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
                  break label$30;
                 }
                 if ($10_1) {
                  break label$9
                 }
                 $1_1 = $18_1 + 2 | 0;
                 label$32 : {
                  if ($0_1) {
                   break label$32
                  }
                  $20_1 = 0;
                  break label$30;
                 }
                 $15_1 = HEAP32[$2_1 >> 2] | 0;
                 HEAP32[$2_1 >> 2] = $15_1 + 4 | 0;
                 $20_1 = HEAP32[$15_1 >> 2] | 0;
                }
                HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                $21_1 = ($20_1 ^ -1 | 0) >>> 31 | 0;
                break label$27;
               }
               HEAP32[($7_1 + 76 | 0) >> 2] = $18_1 + 1 | 0;
               $21_1 = 1;
               $20_1 = $31($7_1 + 76 | 0 | 0) | 0;
               $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              }
              label$33 : while (1) {
               $15_1 = $12_1;
               $22_1 = 28;
               $18_1 = $1_1;
               $12_1 = HEAP8[$18_1 >> 0] | 0;
               if (($12_1 + -123 | 0) >>> 0 < -58 >>> 0) {
                break label$3
               }
               $1_1 = $18_1 + 1 | 0;
               $12_1 = HEAPU8[(($12_1 + Math_imul($15_1, 58) | 0) + 1039 | 0) >> 0] | 0;
               if (($12_1 + -1 | 0) >>> 0 < 8 >>> 0) {
                continue label$33
               }
               break label$33;
              };
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              label$34 : {
               label$35 : {
                label$36 : {
                 if (($12_1 | 0) == (27 | 0)) {
                  break label$36
                 }
                 if (!$12_1) {
                  break label$3
                 }
                 label$37 : {
                  if (($16_1 | 0) < (0 | 0)) {
                   break label$37
                  }
                  HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $12_1;
                  i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $272 = i64toi32_i32$0;
                  i64toi32_i32$0 = $7_1;
                  HEAP32[($7_1 + 64 | 0) >> 2] = $272;
                  HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
                  break label$35;
                 }
                 if (!$0_1) {
                  break label$6
                 }
                 $32($7_1 + 64 | 0 | 0, $12_1 | 0, $2_1 | 0, $6_1 | 0);
                 break label$34;
                }
                if (($16_1 | 0) > (-1 | 0)) {
                 break label$3
                }
               }
               $12_1 = 0;
               if (!$0_1) {
                continue label$5
               }
              }
              $23_1 = $17_1 & -65537 | 0;
              $17_1 = $17_1 & 8192 | 0 ? $23_1 : $17_1;
              $16_1 = 0;
              $24_1 = 1033;
              $22_1 = $9_1;
              label$38 : {
               label$39 : {
                label$40 : {
                 label$41 : {
                  label$42 : {
                   label$43 : {
                    label$44 : {
                     label$45 : {
                      label$46 : {
                       label$47 : {
                        label$48 : {
                         label$49 : {
                          label$50 : {
                           label$51 : {
                            label$52 : {
                             label$53 : {
                              $12_1 = HEAP8[$18_1 >> 0] | 0;
                              $12_1 = $15_1 ? (($12_1 & 15 | 0 | 0) == (3 | 0) ? $12_1 & -33 | 0 : $12_1) : $12_1;
                              switch ($12_1 + -88 | 0 | 0) {
                              case 11:
                               break label$38;
                              case 9:
                              case 13:
                              case 14:
                              case 15:
                               break label$39;
                              case 27:
                               break label$44;
                              case 12:
                              case 17:
                               break label$47;
                              case 23:
                               break label$48;
                              case 0:
                              case 32:
                               break label$49;
                              case 24:
                               break label$50;
                              case 22:
                               break label$51;
                              case 29:
                               break label$52;
                              case 1:
                              case 2:
                              case 3:
                              case 4:
                              case 5:
                              case 6:
                              case 7:
                              case 8:
                              case 10:
                              case 16:
                              case 18:
                              case 19:
                              case 20:
                              case 21:
                              case 25:
                              case 26:
                              case 28:
                              case 30:
                              case 31:
                               break label$7;
                              default:
                               break label$53;
                              };
                             }
                             $22_1 = $9_1;
                             label$54 : {
                              switch ($12_1 + -65 | 0 | 0) {
                              case 0:
                              case 4:
                              case 5:
                              case 6:
                               break label$39;
                              case 2:
                               break label$42;
                              case 1:
                              case 3:
                               break label$7;
                              default:
                               break label$54;
                              };
                             }
                             if (($12_1 | 0) == (83 | 0)) {
                              break label$43
                             }
                             break label$8;
                            }
                            $16_1 = 0;
                            $24_1 = 1033;
                            i64toi32_i32$2 = $7_1;
                            i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                            i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                            $25_1 = i64toi32_i32$1;
                            $25$hi = i64toi32_i32$0;
                            break label$46;
                           }
                           $12_1 = 0;
                           label$55 : {
                            switch ($15_1 & 255 | 0 | 0) {
                            case 0:
                             HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                             continue label$5;
                            case 1:
                             HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                             continue label$5;
                            case 2:
                             i64toi32_i32$1 = $11_1;
                             i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                             i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                             HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                             HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                             continue label$5;
                            case 3:
                             HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
                             continue label$5;
                            case 4:
                             HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
                             continue label$5;
                            case 6:
                             HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                             continue label$5;
                            case 7:
                             break label$55;
                            default:
                             continue label$5;
                            };
                           }
                           i64toi32_i32$1 = $11_1;
                           i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                           i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                           HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                           continue label$5;
                          }
                          $20_1 = $20_1 >>> 0 > 8 >>> 0 ? $20_1 : 8;
                          $17_1 = $17_1 | 8 | 0;
                          $12_1 = 120;
                         }
                         i64toi32_i32$2 = $7_1;
                         i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                         $13_1 = $33(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $12_1 & 32 | 0 | 0) | 0;
                         $16_1 = 0;
                         $24_1 = 1033;
                         i64toi32_i32$2 = $7_1;
                         i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                         if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                          break label$45
                         }
                         if (!($17_1 & 8 | 0)) {
                          break label$45
                         }
                         $24_1 = ($12_1 >>> 4 | 0) + 1033 | 0;
                         $16_1 = 2;
                         break label$45;
                        }
                        $16_1 = 0;
                        $24_1 = 1033;
                        i64toi32_i32$2 = $7_1;
                        i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                        i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                        $13_1 = $34(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0) | 0;
                        if (!($17_1 & 8 | 0)) {
                         break label$45
                        }
                        $12_1 = $9_1 - $13_1 | 0;
                        $20_1 = ($20_1 | 0) > ($12_1 | 0) ? $20_1 : $12_1 + 1 | 0;
                        break label$45;
                       }
                       label$62 : {
                        i64toi32_i32$2 = $7_1;
                        i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                        i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                        $25_1 = i64toi32_i32$1;
                        $25$hi = i64toi32_i32$0;
                        i64toi32_i32$2 = i64toi32_i32$1;
                        i64toi32_i32$1 = -1;
                        i64toi32_i32$3 = -1;
                        if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                         $33_1 = 1
                        } else {
                         if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                          if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                           $34_1 = 0
                          } else {
                           $34_1 = 1
                          }
                          $35_1 = $34_1;
                         } else {
                          $35_1 = 0
                         }
                         $33_1 = $35_1;
                        }
                        if ($33_1) {
                         break label$62
                        }
                        i64toi32_i32$2 = $25$hi;
                        i64toi32_i32$2 = 0;
                        i64toi32_i32$3 = 0;
                        i64toi32_i32$0 = $25$hi;
                        i64toi32_i32$1 = $25_1;
                        i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                        $25_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                        $25$hi = i64toi32_i32$5;
                        i64toi32_i32$3 = $7_1;
                        HEAP32[($7_1 + 64 | 0) >> 2] = $25_1;
                        HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
                        $16_1 = 1;
                        $24_1 = 1033;
                        break label$46;
                       }
                       label$63 : {
                        if (!($17_1 & 2048 | 0)) {
                         break label$63
                        }
                        $16_1 = 1;
                        $24_1 = 1034;
                        break label$46;
                       }
                       $16_1 = $17_1 & 1 | 0;
                       $24_1 = $16_1 ? 1035 : 1033;
                      }
                      i64toi32_i32$5 = $25$hi;
                      $13_1 = $35($25_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                     }
                     label$64 : {
                      if (!$21_1) {
                       break label$64
                      }
                      if (($20_1 | 0) < (0 | 0)) {
                       break label$4
                      }
                     }
                     $17_1 = $21_1 ? $17_1 & -65537 | 0 : $17_1;
                     label$65 : {
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      $25_1 = i64toi32_i32$5;
                      $25$hi = i64toi32_i32$3;
                      i64toi32_i32$2 = i64toi32_i32$5;
                      i64toi32_i32$5 = 0;
                      i64toi32_i32$1 = 0;
                      if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
                       break label$65
                      }
                      if ($20_1) {
                       break label$65
                      }
                      $13_1 = $9_1;
                      $22_1 = $13_1;
                      $20_1 = 0;
                      break label$7;
                     }
                     i64toi32_i32$2 = $25$hi;
                     $12_1 = ($9_1 - $13_1 | 0) + !($25_1 | i64toi32_i32$2 | 0) | 0;
                     $20_1 = ($20_1 | 0) > ($12_1 | 0) ? $20_1 : $12_1;
                     break label$8;
                    }
                    $12_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                    $13_1 = $12_1 ? $12_1 : 1085;
                    $12_1 = $24($13_1 | 0, ($20_1 >>> 0 < 2147483647 >>> 0 ? $20_1 : 2147483647) | 0) | 0;
                    $22_1 = $13_1 + $12_1 | 0;
                    label$66 : {
                     if (($20_1 | 0) <= (-1 | 0)) {
                      break label$66
                     }
                     $17_1 = $23_1;
                     $20_1 = $12_1;
                     break label$7;
                    }
                    $17_1 = $23_1;
                    $20_1 = $12_1;
                    if (HEAPU8[$22_1 >> 0] | 0) {
                     break label$4
                    }
                    break label$7;
                   }
                   label$67 : {
                    if (!$20_1) {
                     break label$67
                    }
                    $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                    break label$41;
                   }
                   $12_1 = 0;
                   $36($0_1 | 0, 32 | 0, $19_1 | 0, 0 | 0, $17_1 | 0);
                   break label$40;
                  }
                  HEAP32[($7_1 + 12 | 0) >> 2] = 0;
                  i64toi32_i32$1 = $7_1;
                  i64toi32_i32$2 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                  HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$2;
                  HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
                  $14_1 = $7_1 + 8 | 0;
                  $20_1 = -1;
                 }
                 $12_1 = 0;
                 label$68 : {
                  label$69 : while (1) {
                   $15_1 = HEAP32[$14_1 >> 2] | 0;
                   if (!$15_1) {
                    break label$68
                   }
                   label$70 : {
                    $15_1 = $72($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                    $13_1 = ($15_1 | 0) < (0 | 0);
                    if ($13_1) {
                     break label$70
                    }
                    if ($15_1 >>> 0 > ($20_1 - $12_1 | 0) >>> 0) {
                     break label$70
                    }
                    $14_1 = $14_1 + 4 | 0;
                    $12_1 = $15_1 + $12_1 | 0;
                    if ($20_1 >>> 0 > $12_1 >>> 0) {
                     continue label$69
                    }
                    break label$68;
                   }
                   break label$69;
                  };
                  if ($13_1) {
                   break label$2
                  }
                 }
                 $22_1 = 61;
                 if (($12_1 | 0) < (0 | 0)) {
                  break label$3
                 }
                 $36($0_1 | 0, 32 | 0, $19_1 | 0, $12_1 | 0, $17_1 | 0);
                 label$71 : {
                  if ($12_1) {
                   break label$71
                  }
                  $12_1 = 0;
                  break label$40;
                 }
                 $15_1 = 0;
                 $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 label$72 : while (1) {
                  $13_1 = HEAP32[$14_1 >> 2] | 0;
                  if (!$13_1) {
                   break label$40
                  }
                  $13_1 = $72($7_1 + 4 | 0 | 0, $13_1 | 0) | 0;
                  $15_1 = $13_1 + $15_1 | 0;
                  if ($15_1 >>> 0 > $12_1 >>> 0) {
                   break label$40
                  }
                  $30($0_1 | 0, $7_1 + 4 | 0 | 0, $13_1 | 0);
                  $14_1 = $14_1 + 4 | 0;
                  if ($15_1 >>> 0 < $12_1 >>> 0) {
                   continue label$72
                  }
                  break label$72;
                 };
                }
                $36($0_1 | 0, 32 | 0, $19_1 | 0, $12_1 | 0, $17_1 ^ 8192 | 0 | 0);
                $12_1 = ($19_1 | 0) > ($12_1 | 0) ? $19_1 : $12_1;
                continue label$5;
               }
               label$73 : {
                if (!$21_1) {
                 break label$73
                }
                if (($20_1 | 0) < (0 | 0)) {
                 break label$4
                }
               }
               $22_1 = 61;
               $12_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $19_1, $20_1, $17_1, $12_1) | 0;
               if (($12_1 | 0) >= (0 | 0)) {
                continue label$5
               }
               break label$3;
              }
              i64toi32_i32$1 = $7_1;
              i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
              HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$3;
              $20_1 = 1;
              $13_1 = $8_1;
              $22_1 = $9_1;
              $17_1 = $23_1;
              break label$7;
             }
             $14_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
             $12_1 = $12_1 + 1 | 0;
             continue label$11;
            };
           }
           if ($0_1) {
            break label$1
           }
           if (!$10_1) {
            break label$6
           }
           $12_1 = 1;
           label$74 : {
            label$75 : while (1) {
             $14_1 = HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0;
             if (!$14_1) {
              break label$74
             }
             $32($3_1 + ($12_1 << 3 | 0) | 0 | 0, $14_1 | 0, $2_1 | 0, $6_1 | 0);
             $11_1 = 1;
             $12_1 = $12_1 + 1 | 0;
             if (($12_1 | 0) != (10 | 0)) {
              continue label$75
             }
             break label$1;
            };
           }
           $11_1 = 1;
           if ($12_1 >>> 0 >= 10 >>> 0) {
            break label$1
           }
           label$76 : while (1) {
            if (HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0) {
             break label$9
            }
            $11_1 = 1;
            $12_1 = $12_1 + 1 | 0;
            if (($12_1 | 0) == (10 | 0)) {
             break label$1
            }
            continue label$76;
           };
          }
          $22_1 = 28;
          break label$3;
         }
         $22_1 = $9_1;
        }
        $18_1 = $22_1 - $13_1 | 0;
        $20_1 = ($20_1 | 0) > ($18_1 | 0) ? $20_1 : $18_1;
        if (($20_1 | 0) > ($16_1 ^ 2147483647 | 0 | 0)) {
         break label$4
        }
        $22_1 = 61;
        $15_1 = $16_1 + $20_1 | 0;
        $12_1 = ($19_1 | 0) > ($15_1 | 0) ? $19_1 : $15_1;
        if (($12_1 | 0) > ($14_1 | 0)) {
         break label$3
        }
        $36($0_1 | 0, 32 | 0, $12_1 | 0, $15_1 | 0, $17_1 | 0);
        $30($0_1 | 0, $24_1 | 0, $16_1 | 0);
        $36($0_1 | 0, 48 | 0, $12_1 | 0, $15_1 | 0, $17_1 ^ 65536 | 0 | 0);
        $36($0_1 | 0, 48 | 0, $20_1 | 0, $18_1 | 0, 0 | 0);
        $30($0_1 | 0, $13_1 | 0, $18_1 | 0);
        $36($0_1 | 0, 32 | 0, $12_1 | 0, $15_1 | 0, $17_1 ^ 8192 | 0 | 0);
        continue label$5;
       }
       break label$5;
      };
      $11_1 = 0;
      break label$1;
     }
     $22_1 = 61;
    }
    HEAP32[($14() | 0) >> 2] = $22_1;
   }
   $11_1 = -1;
  }
  global$0 = $7_1 + 80 | 0;
  return $11_1 | 0;
 }
 
 function $30($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $27($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $31($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ($22(HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0 | 0) | 0) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : while (1) {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   $3_1 = -1;
   label$3 : {
    if ($1_1 >>> 0 > 214748364 >>> 0) {
     break label$3
    }
    $3_1 = (HEAP8[$2_1 >> 0] | 0) + -48 | 0;
    $1_1 = Math_imul($1_1, 10);
    $3_1 = ($3_1 | 0) > ($1_1 ^ 2147483647 | 0 | 0) ? -1 : $3_1 + $1_1 | 0;
   }
   HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
   $1_1 = $3_1;
   if ($22(HEAP8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
    continue label$2
   }
   break label$2;
  };
  return $3_1 | 0;
 }
 
 function $32($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $21_1 = 0, $29_1 = 0, $37_1 = 0, $45_1 = 0, $55_1 = 0, $63_1 = 0, $71_1 = 0, $79_1 = 0, $87_1 = 0, $97_1 = 0, $105_1 = 0, $115 = 0, $125 = 0, $133 = 0, $141 = 0;
  label$1 : {
   switch ($1_1 + -9 | 0 | 0) {
   case 0:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    return;
   case 1:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $21_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $21_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 2:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $29_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $29_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 4:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $37_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $37_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 5:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $45_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $45_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 3:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $55_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $55_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 6:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $63_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $63_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 7:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
    i64toi32_i32$1 = 0;
    $71_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $71_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 8:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $79_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $79_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 9:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
    i64toi32_i32$1 = 0;
    $87_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $87_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 10:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $97_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $97_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 11:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $105_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $105_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 12:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $115 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $115;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 13:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $125 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $125;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 14:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $133 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $133;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 15:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $141 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $141;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 16:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
    return;
   case 17:
    FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
    break;
   default:
    break label$1;
   };
  }
 }
 
 function $33($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $10_1 = 0, $3_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 1568 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 15;
    $3_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $10_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $10_1;
    $0$hi = i64toi32_i32$0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $34($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $9_1 = 0, $2_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 7;
    $2_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 3;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $9_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $35($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$5 = 0, $2$hi = 0, $4_1 = 0, $16_1 = 0, $16$hi = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $2_1 = $0_1;
    $2$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $3_1 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $2$hi;
    $0_1 = $2_1;
    $0$hi = i64toi32_i32$2;
    if ($3_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $2$hi;
   $3_1 = $2_1;
   if (!$3_1) {
    break label$4
   }
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $4_1 = ($3_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $3_1 - Math_imul($4_1, 10) | 0 | 48 | 0;
    $5_1 = $3_1 >>> 0 > 9 >>> 0;
    $3_1 = $4_1;
    if ($5_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $36($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  label$1 : {
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   if ($4_1 & 73728 | 0) {
    break label$1
   }
   $3_1 = $2_1 - $3_1 | 0;
   $2_1 = $3_1 >>> 0 < 256 >>> 0;
   $13($5_1 | 0, $1_1 & 255 | 0 | 0, ($2_1 ? $3_1 : 256) | 0) | 0;
   label$2 : {
    if ($2_1) {
     break label$2
    }
    label$3 : while (1) {
     $30($0_1 | 0, $5_1 | 0, 256 | 0);
     $3_1 = $3_1 + -256 | 0;
     if ($3_1 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $30($0_1 | 0, $5_1 | 0, $3_1 | 0);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $37($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $28($0_1 | 0, $1_1 | 0, $2_1 | 0, 1 | 0, 2 | 0) | 0 | 0;
 }
 
 function $38($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $18_1 = 0, $21_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $15_1 = 0, i64toi32_i32$4 = 0, $22_1 = 0, $23_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $17_1 = 0, $19_1 = 0, $8_1 = 0, $26_1 = 0.0, $24_1 = 0, $13_1 = 0, $24$hi = 0, $14_1 = 0, $16_1 = 0, $9_1 = 0, $20_1 = 0, $7_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $25$hi = 0, $48_1 = 0, $25_1 = 0, $167 = 0, $169$hi = 0, $171$hi = 0, $173 = 0, $173$hi = 0, $175$hi = 0, $179 = 0, $179$hi = 0, $388 = 0.0, $852 = 0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $40(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $45_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $46_1 = 0
      } else {
       $46_1 = 1
      }
      $47_1 = $46_1;
     } else {
      $47_1 = 0
     }
     $45_1 = $47_1;
    }
    if ($45_1) {
     break label$2
    }
    $8_1 = 1;
    $9_1 = 1043;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $40(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 2048 | 0)) {
     break label$3
    }
    $8_1 = 1;
    $9_1 = 1046;
    break label$1;
   }
   $8_1 = $4_1 & 1 | 0;
   $9_1 = $8_1 ? 1049 : 1044;
   $7_1 = !$8_1;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $10_1 = $8_1 + 3 | 0;
    $36($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
    $30($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $11_1 = $5_1 & 32 | 0;
    $30($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 1067 : 1075) : $11_1 ? 1071 : 1079) | 0, 3 | 0);
    $36($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    $12_1 = ($10_1 | 0) > ($2_1 | 0) ? $10_1 : $2_1;
    break label$4;
   }
   $13_1 = $6_1 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1_1 = +$25(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$9
       }
       $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $10_1 + -1 | 0;
       $14_1 = $5_1 | 32 | 0;
       if (($14_1 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $14_1 = $5_1 | 32 | 0;
      if (($14_1 | 0) == (97 | 0)) {
       break label$6
      }
      $15_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $16_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $16_1 = $10_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $16_1;
     $15_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $17_1 = ($6_1 + 48 | 0) + (($16_1 | 0) < (0 | 0) ? 0 : 288) | 0;
    $11_1 = $17_1;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$12
       }
       $10_1 = ~~$1_1 >>> 0;
       break label$11;
      }
      $10_1 = 0;
     }
     HEAP32[$11_1 >> 2] = $10_1;
     $11_1 = $11_1 + 4 | 0;
     $1_1 = ($1_1 - +($10_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($16_1 | 0) >= (1 | 0)) {
       break label$14
      }
      $3_1 = $16_1;
      $10_1 = $11_1;
      $18_1 = $17_1;
      break label$13;
     }
     $18_1 = $17_1;
     $3_1 = $16_1;
     label$15 : while (1) {
      $3_1 = ($3_1 | 0) < (29 | 0) ? $3_1 : 29;
      label$16 : {
       $10_1 = $11_1 + -4 | 0;
       if ($10_1 >>> 0 < $18_1 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $25_1 = $3_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label$17 : while (1) {
        $167 = $10_1;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = HEAP32[$10_1 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $169$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $25$hi;
        i64toi32_i32$2 = $169$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$3 = $25_1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $171$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $24$hi;
        i64toi32_i32$2 = $24_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $173 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $173$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $171$hi;
        i64toi32_i32$1 = $48_1;
        i64toi32_i32$2 = $173$hi;
        i64toi32_i32$3 = $173;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $24_1 = i64toi32_i32$4;
        $24$hi = i64toi32_i32$5;
        $175$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $24_1 = i64toi32_i32$1;
        $24$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $179 = i64toi32_i32$1;
        $179$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $175$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $179$hi;
        i64toi32_i32$3 = $179;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$167 >> 2] = i64toi32_i32$2;
        $10_1 = $10_1 + -4 | 0;
        if ($10_1 >>> 0 >= $18_1 >>> 0) {
         continue label$17
        }
        break label$17;
       };
       i64toi32_i32$4 = $24$hi;
       $10_1 = $24_1;
       if (!$10_1) {
        break label$16
       }
       $18_1 = $18_1 + -4 | 0;
       HEAP32[$18_1 >> 2] = $10_1;
      }
      label$18 : {
       label$19 : while (1) {
        $10_1 = $11_1;
        if ($10_1 >>> 0 <= $18_1 >>> 0) {
         break label$18
        }
        $11_1 = $10_1 + -4 | 0;
        if (!(HEAP32[$11_1 >> 2] | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $11_1 = $10_1;
      if (($3_1 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    label$20 : {
     if (($3_1 | 0) > (-1 | 0)) {
      break label$20
     }
     $19_1 = ((($15_1 + 25 | 0) >>> 0) / (9 >>> 0) | 0) + 1 | 0;
     $20_1 = ($14_1 | 0) == (102 | 0);
     label$21 : while (1) {
      $11_1 = 0 - $3_1 | 0;
      $21_1 = ($11_1 | 0) < (9 | 0) ? $11_1 : 9;
      label$22 : {
       label$23 : {
        if ($18_1 >>> 0 < $10_1 >>> 0) {
         break label$23
        }
        $11_1 = HEAP32[$18_1 >> 2] | 0;
        break label$22;
       }
       $22_1 = 1e9 >>> $21_1 | 0;
       $23_1 = (-1 << $21_1 | 0) ^ -1 | 0;
       $3_1 = 0;
       $11_1 = $18_1;
       label$24 : while (1) {
        $12_1 = HEAP32[$11_1 >> 2] | 0;
        HEAP32[$11_1 >> 2] = ($12_1 >>> $21_1 | 0) + $3_1 | 0;
        $3_1 = Math_imul($12_1 & $23_1 | 0, $22_1);
        $11_1 = $11_1 + 4 | 0;
        if ($11_1 >>> 0 < $10_1 >>> 0) {
         continue label$24
        }
        break label$24;
       };
       $11_1 = HEAP32[$18_1 >> 2] | 0;
       if (!$3_1) {
        break label$22
       }
       HEAP32[$10_1 >> 2] = $3_1;
       $10_1 = $10_1 + 4 | 0;
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $21_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $18_1 = $18_1 + (!$11_1 << 2 | 0) | 0;
      $11_1 = $20_1 ? $17_1 : $18_1;
      $10_1 = (($10_1 - $11_1 | 0) >> 2 | 0 | 0) > ($19_1 | 0) ? $11_1 + ($19_1 << 2 | 0) | 0 : $10_1;
      if (($3_1 | 0) < (0 | 0)) {
       continue label$21
      }
      break label$21;
     };
    }
    $3_1 = 0;
    label$25 : {
     if ($18_1 >>> 0 >= $10_1 >>> 0) {
      break label$25
     }
     $3_1 = Math_imul(($17_1 - $18_1 | 0) >> 2 | 0, 9);
     $11_1 = 10;
     $12_1 = HEAP32[$18_1 >> 2] | 0;
     if ($12_1 >>> 0 < 10 >>> 0) {
      break label$25
     }
     label$26 : while (1) {
      $3_1 = $3_1 + 1 | 0;
      $11_1 = Math_imul($11_1, 10);
      if ($12_1 >>> 0 >= $11_1 >>> 0) {
       continue label$26
      }
      break label$26;
     };
    }
    label$27 : {
     $11_1 = ($15_1 - (($14_1 | 0) == (102 | 0) ? 0 : $3_1) | 0) - (($15_1 | 0) != (0 | 0) & ($14_1 | 0) == (103 | 0) | 0) | 0;
     if (($11_1 | 0) >= (Math_imul(($10_1 - $17_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$27
     }
     $12_1 = $11_1 + 9216 | 0;
     $22_1 = ($12_1 | 0) / (9 | 0) | 0;
     $21_1 = (($22_1 << 2 | 0) + (($6_1 + 48 | 0) + (($16_1 | 0) < (0 | 0) ? 4 : 292) | 0) | 0) + -4096 | 0;
     $11_1 = 10;
     label$28 : {
      $12_1 = $12_1 - Math_imul($22_1, 9) | 0;
      if (($12_1 | 0) > (7 | 0)) {
       break label$28
      }
      label$29 : while (1) {
       $11_1 = Math_imul($11_1, 10);
       $12_1 = $12_1 + 1 | 0;
       if (($12_1 | 0) != (8 | 0)) {
        continue label$29
       }
       break label$29;
      };
     }
     $23_1 = $21_1 + 4 | 0;
     label$30 : {
      label$31 : {
       $12_1 = HEAP32[$21_1 >> 2] | 0;
       $19_1 = ($12_1 >>> 0) / ($11_1 >>> 0) | 0;
       $22_1 = $12_1 - Math_imul($19_1, $11_1) | 0;
       if ($22_1) {
        break label$31
       }
       if (($23_1 | 0) == ($10_1 | 0)) {
        break label$30
       }
      }
      label$32 : {
       label$33 : {
        if ($19_1 & 1 | 0) {
         break label$33
        }
        $1_1 = 9007199254740992.0;
        if (($11_1 | 0) != (1e9 | 0)) {
         break label$32
        }
        if ($21_1 >>> 0 <= $18_1 >>> 0) {
         break label$32
        }
        if (!((HEAPU8[($21_1 + -4 | 0) >> 0] | 0) & 1 | 0)) {
         break label$32
        }
       }
       $1_1 = 9007199254740994.0;
      }
      $388 = ($23_1 | 0) == ($10_1 | 0) ? 1.0 : 1.5;
      $23_1 = $11_1 >>> 1 | 0;
      $26_1 = $22_1 >>> 0 < $23_1 >>> 0 ? .5 : ($22_1 | 0) == ($23_1 | 0) ? $388 : 1.5;
      label$34 : {
       if ($7_1) {
        break label$34
       }
       if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$34
       }
       $26_1 = -$26_1;
       $1_1 = -$1_1;
      }
      $12_1 = $12_1 - $22_1 | 0;
      HEAP32[$21_1 >> 2] = $12_1;
      if ($1_1 + $26_1 == $1_1) {
       break label$30
      }
      $11_1 = $12_1 + $11_1 | 0;
      HEAP32[$21_1 >> 2] = $11_1;
      label$35 : {
       if ($11_1 >>> 0 < 1e9 >>> 0) {
        break label$35
       }
       label$36 : while (1) {
        HEAP32[$21_1 >> 2] = 0;
        label$37 : {
         $21_1 = $21_1 + -4 | 0;
         if ($21_1 >>> 0 >= $18_1 >>> 0) {
          break label$37
         }
         $18_1 = $18_1 + -4 | 0;
         HEAP32[$18_1 >> 2] = 0;
        }
        $11_1 = (HEAP32[$21_1 >> 2] | 0) + 1 | 0;
        HEAP32[$21_1 >> 2] = $11_1;
        if ($11_1 >>> 0 > 999999999 >>> 0) {
         continue label$36
        }
        break label$36;
       };
      }
      $3_1 = Math_imul(($17_1 - $18_1 | 0) >> 2 | 0, 9);
      $11_1 = 10;
      $12_1 = HEAP32[$18_1 >> 2] | 0;
      if ($12_1 >>> 0 < 10 >>> 0) {
       break label$30
      }
      label$38 : while (1) {
       $3_1 = $3_1 + 1 | 0;
       $11_1 = Math_imul($11_1, 10);
       if ($12_1 >>> 0 >= $11_1 >>> 0) {
        continue label$38
       }
       break label$38;
      };
     }
     $11_1 = $21_1 + 4 | 0;
     $10_1 = $10_1 >>> 0 > $11_1 >>> 0 ? $11_1 : $10_1;
    }
    label$39 : {
     label$40 : while (1) {
      $11_1 = $10_1;
      $12_1 = $10_1 >>> 0 <= $18_1 >>> 0;
      if ($12_1) {
       break label$39
      }
      $10_1 = $11_1 + -4 | 0;
      if (!(HEAP32[$10_1 >> 2] | 0)) {
       continue label$40
      }
      break label$40;
     };
    }
    label$41 : {
     label$42 : {
      if (($14_1 | 0) == (103 | 0)) {
       break label$42
      }
      $21_1 = $4_1 & 8 | 0;
      break label$41;
     }
     $10_1 = $15_1 ? $15_1 : 1;
     $21_1 = ($10_1 | 0) > ($3_1 | 0) & ($3_1 | 0) > (-5 | 0) | 0;
     $15_1 = ($21_1 ? $3_1 ^ -1 | 0 : -1) + $10_1 | 0;
     $5_1 = ($21_1 ? -1 : -2) + $5_1 | 0;
     $21_1 = $4_1 & 8 | 0;
     if ($21_1) {
      break label$41
     }
     $10_1 = -9;
     label$43 : {
      if ($12_1) {
       break label$43
      }
      $21_1 = HEAP32[($11_1 + -4 | 0) >> 2] | 0;
      if (!$21_1) {
       break label$43
      }
      $12_1 = 10;
      $10_1 = 0;
      if (($21_1 >>> 0) % (10 >>> 0) | 0) {
       break label$43
      }
      label$44 : while (1) {
       $22_1 = $10_1;
       $10_1 = $10_1 + 1 | 0;
       $12_1 = Math_imul($12_1, 10);
       if (!(($21_1 >>> 0) % ($12_1 >>> 0) | 0)) {
        continue label$44
       }
       break label$44;
      };
      $10_1 = $22_1 ^ -1 | 0;
     }
     $12_1 = Math_imul(($11_1 - $17_1 | 0) >> 2 | 0, 9);
     label$45 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break label$45
      }
      $21_1 = 0;
      $10_1 = ($12_1 + $10_1 | 0) + -9 | 0;
      $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
      $15_1 = ($15_1 | 0) < ($10_1 | 0) ? $15_1 : $10_1;
      break label$41;
     }
     $21_1 = 0;
     $10_1 = (($3_1 + $12_1 | 0) + $10_1 | 0) + -9 | 0;
     $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
     $15_1 = ($15_1 | 0) < ($10_1 | 0) ? $15_1 : $10_1;
    }
    $12_1 = -1;
    $22_1 = $15_1 | $21_1 | 0;
    if (($15_1 | 0) > (($22_1 ? 2147483645 : 2147483646) | 0)) {
     break label$4
    }
    $23_1 = ($15_1 + (($22_1 | 0) != (0 | 0)) | 0) + 1 | 0;
    label$46 : {
     label$47 : {
      $20_1 = $5_1 & -33 | 0;
      if (($20_1 | 0) != (70 | 0)) {
       break label$47
      }
      if (($3_1 | 0) > ($23_1 ^ 2147483647 | 0 | 0)) {
       break label$4
      }
      $10_1 = ($3_1 | 0) > (0 | 0) ? $3_1 : 0;
      break label$46;
     }
     label$48 : {
      $10_1 = $3_1 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $10_1 = $35(($3_1 ^ $10_1 | 0) - $10_1 | 0 | 0, i64toi32_i32$4 | 0, $13_1 | 0) | 0;
      if (($13_1 - $10_1 | 0 | 0) > (1 | 0)) {
       break label$48
      }
      label$49 : while (1) {
       $10_1 = $10_1 + -1 | 0;
       HEAP8[$10_1 >> 0] = 48;
       if (($13_1 - $10_1 | 0 | 0) < (2 | 0)) {
        continue label$49
       }
       break label$49;
      };
     }
     $19_1 = $10_1 + -2 | 0;
     HEAP8[$19_1 >> 0] = $5_1;
     $12_1 = -1;
     HEAP8[($10_1 + -1 | 0) >> 0] = ($3_1 | 0) < (0 | 0) ? 45 : 43;
     $10_1 = $13_1 - $19_1 | 0;
     if (($10_1 | 0) > ($23_1 ^ 2147483647 | 0 | 0)) {
      break label$4
     }
    }
    $12_1 = -1;
    $10_1 = $10_1 + $23_1 | 0;
    if (($10_1 | 0) > ($8_1 ^ 2147483647 | 0 | 0)) {
     break label$4
    }
    $23_1 = $10_1 + $8_1 | 0;
    $36($0_1 | 0, 32 | 0, $2_1 | 0, $23_1 | 0, $4_1 | 0);
    $30($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $36($0_1 | 0, 48 | 0, $2_1 | 0, $23_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$50 : {
     label$51 : {
      label$52 : {
       label$53 : {
        if (($20_1 | 0) != (70 | 0)) {
         break label$53
        }
        $21_1 = $6_1 + 16 | 0 | 8 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $12_1 = $18_1 >>> 0 > $17_1 >>> 0 ? $17_1 : $18_1;
        $18_1 = $12_1;
        label$54 : while (1) {
         i64toi32_i32$5 = $18_1;
         i64toi32_i32$4 = HEAP32[$18_1 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $10_1 = $35(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
         label$55 : {
          label$56 : {
           if (($18_1 | 0) == ($12_1 | 0)) {
            break label$56
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$55
           }
           label$57 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$57
            }
            break label$55;
           };
          }
          if (($10_1 | 0) != ($3_1 | 0)) {
           break label$55
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $10_1 = $21_1;
         }
         $30($0_1 | 0, $10_1 | 0, $3_1 - $10_1 | 0 | 0);
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 <= $17_1 >>> 0) {
          continue label$54
         }
         break label$54;
        };
        label$58 : {
         if (!$22_1) {
          break label$58
         }
         $30($0_1 | 0, 1083 | 0, 1 | 0);
        }
        if ($18_1 >>> 0 >= $11_1 >>> 0) {
         break label$52
        }
        if (($15_1 | 0) < (1 | 0)) {
         break label$52
        }
        label$59 : while (1) {
         label$60 : {
          i64toi32_i32$5 = $18_1;
          i64toi32_i32$0 = HEAP32[$18_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $10_1 = $35(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $3_1 | 0) | 0;
          if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$60
          }
          label$61 : while (1) {
           $10_1 = $10_1 + -1 | 0;
           HEAP8[$10_1 >> 0] = 48;
           if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$61
           }
           break label$61;
          };
         }
         $30($0_1 | 0, $10_1 | 0, (($15_1 | 0) < (9 | 0) ? $15_1 : 9) | 0);
         $10_1 = $15_1 + -9 | 0;
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 >= $11_1 >>> 0) {
          break label$51
         }
         $12_1 = ($15_1 | 0) > (9 | 0);
         $15_1 = $10_1;
         if ($12_1) {
          continue label$59
         }
         break label$51;
        };
       }
       label$62 : {
        if (($15_1 | 0) < (0 | 0)) {
         break label$62
        }
        $22_1 = $11_1 >>> 0 > $18_1 >>> 0 ? $11_1 : $18_1 + 4 | 0;
        $17_1 = $6_1 + 16 | 0 | 8 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $11_1 = $18_1;
        label$63 : while (1) {
         label$64 : {
          i64toi32_i32$5 = $11_1;
          i64toi32_i32$4 = HEAP32[$11_1 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $10_1 = $35(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
          if (($10_1 | 0) != ($3_1 | 0)) {
           break label$64
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $10_1 = $17_1;
         }
         label$65 : {
          label$66 : {
           if (($11_1 | 0) == ($18_1 | 0)) {
            break label$66
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$65
           }
           label$67 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$67
            }
            break label$65;
           };
          }
          $30($0_1 | 0, $10_1 | 0, 1 | 0);
          $10_1 = $10_1 + 1 | 0;
          if (!($15_1 | $21_1 | 0)) {
           break label$65
          }
          $30($0_1 | 0, 1083 | 0, 1 | 0);
         }
         $12_1 = $3_1 - $10_1 | 0;
         $30($0_1 | 0, $10_1 | 0, (($15_1 | 0) < ($12_1 | 0) ? $15_1 : $12_1) | 0);
         $15_1 = $15_1 - $12_1 | 0;
         $11_1 = $11_1 + 4 | 0;
         if ($11_1 >>> 0 >= $22_1 >>> 0) {
          break label$62
         }
         if (($15_1 | 0) > (-1 | 0)) {
          continue label$63
         }
         break label$63;
        };
       }
       $36($0_1 | 0, 48 | 0, $15_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $30($0_1 | 0, $19_1 | 0, $13_1 - $19_1 | 0 | 0);
       break label$50;
      }
      $10_1 = $15_1;
     }
     $36($0_1 | 0, 48 | 0, $10_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $36($0_1 | 0, 32 | 0, $2_1 | 0, $23_1 | 0, $4_1 ^ 8192 | 0 | 0);
    $12_1 = ($23_1 | 0) > ($2_1 | 0) ? $23_1 : $2_1;
    break label$4;
   }
   $23_1 = $9_1 + ((($5_1 << 26 | 0) >> 31 | 0) & 9 | 0) | 0;
   label$68 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$68
    }
    $10_1 = 12 - $3_1 | 0;
    $26_1 = 16.0;
    label$69 : while (1) {
     $26_1 = $26_1 * 16.0;
     $10_1 = $10_1 + -1 | 0;
     if ($10_1) {
      continue label$69
     }
     break label$69;
    };
    label$70 : {
     if ((HEAPU8[$23_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$70
     }
     $1_1 = -($26_1 + (-$1_1 - $26_1));
     break label$68;
    }
    $1_1 = $1_1 + $26_1 - $26_1;
   }
   label$71 : {
    $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $852 = $10_1;
    $10_1 = $10_1 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $10_1 = $35(($852 ^ $10_1 | 0) - $10_1 | 0 | 0, i64toi32_i32$0 | 0, $13_1 | 0) | 0;
    if (($10_1 | 0) != ($13_1 | 0)) {
     break label$71
    }
    HEAP8[($6_1 + 15 | 0) >> 0] = 48;
    $10_1 = $6_1 + 15 | 0;
   }
   $21_1 = $8_1 | 2 | 0;
   $18_1 = $5_1 & 32 | 0;
   $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   $22_1 = $10_1 + -2 | 0;
   HEAP8[$22_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($10_1 + -1 | 0) >> 0] = ($11_1 | 0) < (0 | 0) ? 45 : 43;
   $12_1 = $4_1 & 8 | 0;
   $11_1 = $6_1 + 16 | 0;
   label$72 : while (1) {
    $10_1 = $11_1;
    label$73 : {
     label$74 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$74
      }
      $11_1 = ~~$1_1;
      break label$73;
     }
     $11_1 = -2147483648;
    }
    HEAP8[$10_1 >> 0] = HEAPU8[($11_1 + 1568 | 0) >> 0] | 0 | $18_1 | 0;
    $1_1 = ($1_1 - +($11_1 | 0)) * 16.0;
    label$75 : {
     $11_1 = $10_1 + 1 | 0;
     if (($11_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$75
     }
     label$76 : {
      if ($12_1) {
       break label$76
      }
      if (($3_1 | 0) > (0 | 0)) {
       break label$76
      }
      if ($1_1 == 0.0) {
       break label$75
      }
     }
     HEAP8[($10_1 + 1 | 0) >> 0] = 46;
     $11_1 = $10_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$72
    }
    break label$72;
   };
   $12_1 = -1;
   $19_1 = $13_1 - $22_1 | 0;
   $10_1 = $21_1 + $19_1 | 0;
   if ((2147483645 - $10_1 | 0 | 0) < ($3_1 | 0)) {
    break label$4
   }
   label$77 : {
    label$78 : {
     if (!$3_1) {
      break label$78
     }
     $18_1 = $11_1 - ($6_1 + 16 | 0) | 0;
     if (($18_1 + -2 | 0 | 0) >= ($3_1 | 0)) {
      break label$78
     }
     $11_1 = $3_1 + 2 | 0;
     break label$77;
    }
    $18_1 = $11_1 - ($6_1 + 16 | 0) | 0;
    $11_1 = $18_1;
   }
   $10_1 = $10_1 + $11_1 | 0;
   $36($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
   $30($0_1 | 0, $23_1 | 0, $21_1 | 0);
   $36($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $30($0_1 | 0, $6_1 + 16 | 0 | 0, $18_1 | 0);
   $36($0_1 | 0, 48 | 0, $11_1 - $18_1 | 0 | 0, 0 | 0, 0 | 0);
   $30($0_1 | 0, $22_1 | 0, $19_1 | 0);
   $36($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
   $12_1 = ($10_1 | 0) > ($2_1 | 0) ? $10_1 : $2_1;
  }
  global$0 = $6_1 + 560 | 0;
  return $12_1 | 0;
 }
 
 function $39($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $15_1 = 0, $15$hi = 0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 7 | 0) & -8 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $15$hi;
  HEAPF64[$0_1 >> 3] = +$95($12_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$1 | 0);
 }
 
 function $40($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $41($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $5_1 = -1;
  HEAP32[($4_1 + 148 | 0) >> 2] = $1_1 ? $1_1 + -1 | 0 : 0;
  $0_1 = $1_1 ? $0_1 : $4_1 + 158 | 0;
  HEAP32[($4_1 + 144 | 0) >> 2] = $0_1;
  $4_1 = $13($4_1 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = -1;
  HEAP32[($4_1 + 36 | 0) >> 2] = 3;
  HEAP32[($4_1 + 80 | 0) >> 2] = -1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $4_1 + 159 | 0;
  HEAP32[($4_1 + 84 | 0) >> 2] = $4_1 + 144 | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) > (-1 | 0)) {
     break label$2
    }
    HEAP32[($14() | 0) >> 2] = 61;
    break label$1;
   }
   HEAP8[$0_1 >> 0] = 0;
   $5_1 = $37($4_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  }
  global$0 = $4_1 + 160 | 0;
  return $5_1 | 0;
 }
 
 function $42($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
   $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   $6_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - $5_1 | 0;
   $6_1 = $4_1 >>> 0 < $6_1 >>> 0 ? $4_1 : $6_1;
   if (!$6_1) {
    break label$1
   }
   $26(HEAP32[$3_1 >> 2] | 0 | 0, $5_1 | 0, $6_1 | 0) | 0;
   HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + $6_1 | 0;
   $4_1 = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $6_1 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
  }
  $6_1 = HEAP32[$3_1 >> 2] | 0;
  label$2 : {
   $4_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
   if (!$4_1) {
    break label$2
   }
   $26($6_1 | 0, $1_1 | 0, $4_1 | 0) | 0;
   $6_1 = (HEAP32[$3_1 >> 2] | 0) + $4_1 | 0;
   HEAP32[$3_1 >> 2] = $6_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $4_1 | 0;
  }
  HEAP8[$6_1 >> 0] = 0;
  $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
  return $2_1 | 0;
 }
 
 function $43($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $41($0_1 | 0, 2147483647 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $44($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $45($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $46($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  label$1 : {
   if ($44($0_1 | 0) | 0) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $47($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $21$hi = 0, i64toi32_i32$3 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = (HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0) - $2_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $13_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $13_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   if (!($1_1 | $1$hi | 0)) {
    break label$1
   }
   i64toi32_i32$1 = $3_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $21$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $21$hi;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
    $11_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
      $12_1 = 0
     } else {
      $12_1 = 1
     }
     $14_1 = $12_1;
    } else {
     $14_1 = 0
    }
    $11_1 = $14_1;
   }
   if ($11_1) {
    break label$1
   }
   i64toi32_i32$2 = $1$hi;
   $3_1 = $2_1 + $1_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
 }
 
 function $48($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $1_1 = 0, $4$hi = 0, $5$hi = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $7_1 = 0, $7$hi = 0, $15_1 = 0, $15$hi = 0, $35_1 = 0, $40_1 = 0, $40$hi = 0, $59_1 = 0, $59$hi = 0, $67_1 = 0, $74_1 = 0, $74$hi = 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  $1_1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2_1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
  i64toi32_i32$0 = $1_1 - $2_1 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $15_1 = i64toi32_i32$0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$0 = $15$hi;
  i64toi32_i32$3 = $15_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $4_1 = i64toi32_i32$4;
  $4$hi = i64toi32_i32$5;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$5;
     $5$hi = i64toi32_i32$2;
     if (!(i64toi32_i32$5 | i64toi32_i32$2 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$5 = $5$hi;
     i64toi32_i32$3 = $5_1;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
      $26_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        $27_1 = 0
       } else {
        $27_1 = 1
       }
       $28_1 = $27_1;
      } else {
       $28_1 = 0
      }
      $26_1 = $28_1;
     }
     if ($26_1) {
      break label$2
     }
    }
    $2_1 = $46($0_1 | 0) | 0;
    if (($2_1 | 0) > (-1 | 0)) {
     break label$1
    }
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = -1;
   HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] = $1_1;
   $35_1 = i64toi32_i32$2;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = $2_1 - $1_1 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
   $40_1 = i64toi32_i32$2;
   $40$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$2 = $40$hi;
   i64toi32_i32$5 = $40_1;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$3 = $35_1;
   HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] = i64toi32_i32$4;
   return -1 | 0;
  }
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = 1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $4_1 = i64toi32_i32$2;
  $4$hi = i64toi32_i32$0;
  $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  label$4 : {
   i64toi32_i32$4 = $0_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
    break label$4
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$2 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$3;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$5 = $3_1 - $1_1 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
   $59_1 = i64toi32_i32$5;
   $59$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$5 = $59$hi;
   i64toi32_i32$0 = $59_1;
   if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
    $29_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      $30_1 = 0
     } else {
      $30_1 = 1
     }
     $31_1 = $30_1;
    } else {
     $31_1 = 0
    }
    $29_1 = $31_1;
   }
   if ($29_1) {
    break label$4
   }
   i64toi32_i32$4 = $5$hi;
   $3_1 = $1_1 + $5_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
  $67_1 = $0_1;
  i64toi32_i32$4 = $4$hi;
  $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  i64toi32_i32$2 = $3_1 - $1_1 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
  $74_1 = i64toi32_i32$2;
  $74$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $74$hi;
  i64toi32_i32$5 = $74_1;
  i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  i64toi32_i32$0 = $67_1;
  HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] = i64toi32_i32$3;
  label$5 : {
   if ($1_1 >>> 0 > $3_1 >>> 0) {
    break label$5
   }
   HEAP8[($1_1 + -1 | 0) >> 0] = $2_1;
  }
  return $2_1 | 0;
 }
 
 function $49($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     if ($1_1 >>> 0 >= 2047 >>> 0) {
      break label$3
     }
     $1_1 = $1_1 + -1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   label$4 : {
    if ($1_1 >>> 0 <= -1992 >>> 0) {
     break label$4
    }
    $1_1 = $1_1 + 969 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   $1_1 = (($1_1 | 0) > (-2960 | 0) ? $1_1 : -2960) + 1938 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $50($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11_1 = $22_1 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11_1 | ($23_1 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $51($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $20_1 = 0, $70_1 = 0, $71_1 = 0, $71$hi = 0, $72_1 = 0, $72$hi = 0, $76$hi = 0, $80_1 = 0, $83_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) < (16384 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    $92($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$3 : {
     if ($3_1 >>> 0 >= 32767 >>> 0) {
      break label$3
     }
     $3_1 = $3_1 + -16383 | 0;
     break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    $92($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = (($3_1 | 0) < (49149 | 0) ? $3_1 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   if (($3_1 | 0) > (-16383 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 7471104;
   $92($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4_1 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$4 : {
    if ($3_1 >>> 0 <= -32652 >>> 0) {
     break label$4
    }
    $3_1 = $3_1 + 16269 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 7471104;
   $92($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3_1 = (($3_1 | 0) > (-48920 | 0) ? $3_1 : -48920) + 32538 | 0;
   i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $70_1 = $4_1;
  i64toi32_i32$0 = $1$hi;
  $71_1 = $1_1;
  $71$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $72_1 = $2_1;
  $72$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $76$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$2 = $72$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $76$hi;
  $92($70_1 | 0, $71_1 | 0, i64toi32_i32$1 | 0, $72_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $83_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 80 | 0;
 }
 
 function $52($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2$hi = 0, $2_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $2_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $2$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $13_1 & 32767 | 0;
    if (($3_1 | 0) == (32767 | 0)) {
     break label$2
    }
    $4_1 = 4;
    if ($3_1) {
     break label$1
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $4_1 | 0;
 }
 
 function $53($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $10_1 = 0, $9$hi = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, i64toi32_i32$6 = 0, $11$hi = 0, $64_1 = 0, $7_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $70_1 = 0, $11_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $52_1 = 0, $52$hi = 0, $55$hi = 0, $57_1 = 0, $57$hi = 0, $59_1 = 0, $59$hi = 0, $60_1 = 0, $60$hi = 0, $67$hi = 0, $69_1 = 0, $69$hi = 0, $131$hi = 0, $134 = 0, $135$hi = 0, $156 = 0, $156$hi = 0, $158$hi = 0, $161 = 0, $161$hi = 0, $163$hi = 0, $175$hi = 0, $178 = 0, $179$hi = 0, $208 = 0, $208$hi = 0, $210$hi = 0, $219 = 0, $220 = 0, $220$hi = 0, $222 = 0, $222$hi = 0, $228$hi = 0, $229 = 0, $229$hi = 0, $236 = 0, $236$hi = 0, $241$hi = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!($82($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     $6_1 = $52($3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $64_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $64_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $64_1;
     $8_1 = $7_1 & 32767 | 0;
     if (($8_1 | 0) == (32767 | 0)) {
      break label$3
     }
     if ($6_1) {
      break label$2
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $92($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    $84($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    $52_1 = $1_1;
    $52$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $65_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $65_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $55$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $57_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $57$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $55$hi;
    i64toi32_i32$1 = $65_1;
    i64toi32_i32$3 = $57$hi;
    i64toi32_i32$0 = $57_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $9_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$3;
    $59_1 = $9_1;
    $59$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $60_1 = $3_1;
    $60$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $66_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $66_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $66_1 & 32767 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $67_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $67_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $67$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $69_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $69$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $67$hi;
    i64toi32_i32$2 = $67_1;
    i64toi32_i32$1 = $69$hi;
    i64toi32_i32$0 = $69_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $52$hi;
    i64toi32_i32$2 = $59$hi;
    i64toi32_i32$3 = $60$hi;
    i64toi32_i32$0 = $10$hi;
    if (($82($52_1 | 0, i64toi32_i32$1 | 0, $59_1 | 0, i64toi32_i32$2 | 0, $60_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $10$hi;
     if (!($82($1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$1 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    $92($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $5_1 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   label$6 : {
    label$7 : {
     if (!$8_1) {
      break label$7
     }
     i64toi32_i32$0 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$0;
     break label$6;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1081540608;
    $92($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$1;
    $9$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $68_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $68_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $68_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
   }
   label$8 : {
    if ($6_1) {
     break label$8
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1081540608;
    $92($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $70_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $70_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $70_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $9_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$0;
   label$9 : {
    if (($8_1 | 0) <= ($6_1 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$1 = $9_1;
       i64toi32_i32$2 = $11$hi;
       i64toi32_i32$3 = $11_1;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
       $131$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $134 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$0 = 0;
       $135$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $131$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $135$hi;
       i64toi32_i32$1 = $134;
       i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
       $10_1 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $71_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
          $72_1 = 0
         } else {
          $72_1 = 1
         }
         $73_1 = $72_1;
        } else {
         $73_1 = 0
        }
        $71_1 = $73_1;
       }
       if ($71_1) {
        break label$12
       }
       label$13 : {
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        $92($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$1 = $5_1 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$0;
        break label$1;
       }
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$1 = $10_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $74_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $74_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $156 = $74_1;
       $156$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $75_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $75_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
       }
       $158$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $156$hi;
       i64toi32_i32$3 = $156;
       i64toi32_i32$0 = $158$hi;
       i64toi32_i32$2 = $75_1;
       i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
       $9$hi = i64toi32_i32$0;
       break label$11;
      }
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $76_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $76_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $161 = $76_1;
      $161$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $77_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $77_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $163$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $161$hi;
      i64toi32_i32$3 = $161;
      i64toi32_i32$0 = $163$hi;
      i64toi32_i32$2 = $77_1;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $9$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $78_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $78_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4_1 = $78_1;
     $4$hi = i64toi32_i32$3;
     $8_1 = $8_1 + -1 | 0;
     if (($8_1 | 0) > ($6_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $8_1 = $6_1;
   }
   label$14 : {
    label$15 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $175$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $178 = $4$hi >>> 0 < i64toi32_i32$0 >>> 0 | (($4$hi | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $179$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $175$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $179$hi;
     i64toi32_i32$0 = $178;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
      $79_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        $80_1 = 0
       } else {
        $80_1 = 1
       }
       $81_1 = $80_1;
      } else {
       $81_1 = 0
      }
      $79_1 = $81_1;
     }
     if ($79_1) {
      break label$15
     }
     i64toi32_i32$3 = $9$hi;
     $10_1 = $9_1;
     $10$hi = i64toi32_i32$3;
     break label$14;
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$14
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    $92($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = $5_1 + 56 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$16 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$16
    }
    label$17 : while (1) {
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $82_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $82_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3_1 = $82_1;
     $3$hi = i64toi32_i32$3;
     $8_1 = $8_1 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $83_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $83_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $4_1 = $83_1;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $208 = $3_1;
     $208$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $84_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $84_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $210$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $208$hi;
     i64toi32_i32$1 = $208;
     i64toi32_i32$3 = $210$hi;
     i64toi32_i32$2 = $84_1;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $10_1;
     i64toi32_i32$1 = 65536;
     i64toi32_i32$2 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      continue label$17
     }
     break label$17;
    };
   }
   $6_1 = $7_1 & 32768 | 0;
   label$18 : {
    if (($8_1 | 0) > (0 | 0)) {
     break label$18
    }
    $219 = $5_1 + 64 | 0;
    i64toi32_i32$0 = $4$hi;
    $220 = $4_1;
    $220$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $222 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $222$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $8_1 + 120 | 0 | $6_1 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $85_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $85_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $228$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $222$hi;
    i64toi32_i32$3 = $222;
    i64toi32_i32$0 = $228$hi;
    i64toi32_i32$1 = $85_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $229 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $229$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $220$hi;
    i64toi32_i32$3 = $229$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1065811968;
    $92($219 | 0, $220 | 0, i64toi32_i32$0 | 0, $229 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 72 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$1;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$0 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $236 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $236$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = $8_1 | $6_1 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $86_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $86_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $241$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $236$hi;
   i64toi32_i32$2 = $236;
   i64toi32_i32$1 = $241$hi;
   i64toi32_i32$0 = $86_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $2$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 128 | 0;
 }
 
 function $54($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $55($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $10_1 = 0, $10$hi = 0, $4_1 = 0, $8_1 = 0, $11_1 = 0, $11$hi = 0, $6_1 = 0, $7_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $12_1 = 0, $12$hi = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  i64toi32_i32$0 = 0;
  $10_1 = 0;
  $10$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 > 2 >>> 0) {
     break label$2
    }
    $5_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 << 2 | 0;
    $6_1 = HEAP32[($2_1 + 1644 | 0) >> 2] | 0;
    $7_1 = HEAP32[($2_1 + 1632 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$4;
      }
      $2_1 = $48($1_1 | 0) | 0;
     }
     if ($45($2_1 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    $8_1 = 1;
    label$6 : {
     label$7 : {
      switch ($2_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $8_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
     label$8 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$8
      }
      HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$6;
     }
     $2_1 = $48($1_1 | 0) | 0;
    }
    $9_1 = 0;
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 1024 | 0) >> 0] | 0 | 0)) {
         break label$11
        }
        label$13 : {
         if ($9_1 >>> 0 > 6 >>> 0) {
          break label$13
         }
         label$14 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$14
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$13;
         }
         $2_1 = $48($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (8 | 0)) {
         continue label$12
        }
        break label$10;
       };
      }
      label$15 : {
       if (($9_1 | 0) == (3 | 0)) {
        break label$15
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
       if (!$3_1) {
        break label$9
       }
       if ($9_1 >>> 0 < 4 >>> 0) {
        break label$9
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
      }
      label$16 : {
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
       $10_1 = i64toi32_i32$0;
       $10$hi = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $20_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $21_1 = 0
         } else {
          $21_1 = 1
         }
         $22_1 = $21_1;
        } else {
         $22_1 = 0
        }
        $20_1 = $22_1;
       }
       if ($20_1) {
        break label$16
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      if (!$3_1) {
       break label$10
      }
      if ($9_1 >>> 0 < 4 >>> 0) {
       break label$10
      }
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $23_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $24_1 = 0
        } else {
         $24_1 = 1
        }
        $25_1 = $24_1;
       } else {
        $25_1 = 0
       }
       $23_1 = $25_1;
      }
      $1_1 = $23_1;
      label$17 : while (1) {
       label$18 : {
        if ($1_1) {
         break label$18
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       $9_1 = $9_1 + -1 | 0;
       if ($9_1 >>> 0 > 3 >>> 0) {
        continue label$17
       }
       break label$17;
      };
     }
     $86($4_1 | 0, Math_fround(Math_fround(Math_fround($8_1 | 0) * Math_fround(infinity))));
     i64toi32_i32$0 = $4_1 + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$2;
     $10$hi = i64toi32_i32$3;
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       if ($9_1) {
        break label$21
       }
       $9_1 = 0;
       label$22 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 1067 | 0) >> 0] | 0 | 0)) {
         break label$21
        }
        label$23 : {
         if ($9_1 >>> 0 > 1 >>> 0) {
          break label$23
         }
         label$24 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$24
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$23;
         }
         $2_1 = $48($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (3 | 0)) {
         continue label$22
        }
        break label$20;
       };
      }
      label$25 : {
       switch ($9_1 | 0) {
       case 0:
        label$27 : {
         if (($2_1 | 0) != (48 | 0)) {
          break label$27
         }
         label$28 : {
          label$29 : {
           $9_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if (($9_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$29
           }
           HEAP32[$5_1 >> 2] = $9_1 + 1 | 0;
           $9_1 = HEAPU8[$9_1 >> 0] | 0;
           break label$28;
          }
          $9_1 = $48($1_1 | 0) | 0;
         }
         label$30 : {
          if (($9_1 & -33 | 0 | 0) != (88 | 0)) {
           break label$30
          }
          $56($4_1 + 16 | 0 | 0, $1_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
          i64toi32_i32$0 = $4_1 + 24 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
          $11_1 = i64toi32_i32$3;
          $11$hi = i64toi32_i32$2;
          i64toi32_i32$0 = $4_1;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
          $10_1 = i64toi32_i32$2;
          $10$hi = i64toi32_i32$3;
          break label$1;
         }
         i64toi32_i32$0 = $1_1;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
         i64toi32_i32$0 = i64toi32_i32$3;
         i64toi32_i32$3 = 0;
         i64toi32_i32$1 = 0;
         if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
          $26_1 = 1
         } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
           if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
            $27_1 = 0
           } else {
            $27_1 = 1
           }
           $28_1 = $27_1;
          } else {
           $28_1 = 0
          }
          $26_1 = $28_1;
         }
         if ($26_1) {
          break label$27
         }
         HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
        }
        $57($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
        i64toi32_i32$1 = $4_1 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$2;
        $10$hi = i64toi32_i32$0;
        break label$1;
       case 3:
        break label$20;
       default:
        break label$25;
       };
      }
      i64toi32_i32$0 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$0;
      label$31 : {
       i64toi32_i32$1 = $1_1;
       i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
        $29_1 = 1
       } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $30_1 = 0
         } else {
          $30_1 = 1
         }
         $31_1 = $30_1;
        } else {
         $31_1 = 0
        }
        $29_1 = $31_1;
       }
       if ($29_1) {
        break label$31
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      HEAP32[($14() | 0) >> 2] = 28;
      break label$19;
     }
     label$32 : {
      label$33 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$33
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$32;
      }
      $2_1 = $48($1_1 | 0) | 0;
     }
     label$34 : {
      label$35 : {
       if (($2_1 | 0) != (40 | 0)) {
        break label$35
       }
       $9_1 = 1;
       break label$34;
      }
      i64toi32_i32$1 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$1 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $32_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $33_1 = 0
        } else {
         $33_1 = 1
        }
        $34_1 = $33_1;
       } else {
        $34_1 = 0
       }
       $32_1 = $34_1;
      }
      if ($32_1) {
       break label$1
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      break label$1;
     }
     label$36 : while (1) {
      label$37 : {
       label$38 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$38
        }
        HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$37;
       }
       $2_1 = $48($1_1 | 0) | 0;
      }
      $8_1 = $2_1 + -65 | 0;
      label$39 : {
       label$40 : {
        if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
         break label$40
        }
        if ($8_1 >>> 0 < 26 >>> 0) {
         break label$40
        }
        $8_1 = $2_1 + -97 | 0;
        if (($2_1 | 0) == (95 | 0)) {
         break label$40
        }
        if ($8_1 >>> 0 >= 26 >>> 0) {
         break label$39
        }
       }
       $9_1 = $9_1 + 1 | 0;
       continue label$36;
      }
      break label$36;
     };
     i64toi32_i32$3 = 2147450880;
     $11_1 = 0;
     $11$hi = i64toi32_i32$3;
     if (($2_1 | 0) == (41 | 0)) {
      break label$1
     }
     label$41 : {
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$3 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
      $12_1 = i64toi32_i32$3;
      $12$hi = i64toi32_i32$2;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
       $35_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
         $36_1 = 0
        } else {
         $36_1 = 1
        }
        $37_1 = $36_1;
       } else {
        $37_1 = 0
       }
       $35_1 = $37_1;
      }
      if ($35_1) {
       break label$41
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
     }
     label$42 : {
      label$43 : {
       if (!$3_1) {
        break label$43
       }
       if ($9_1) {
        break label$42
       }
       i64toi32_i32$0 = 0;
       $10_1 = 0;
       $10$hi = i64toi32_i32$0;
       break label$1;
      }
      HEAP32[($14() | 0) >> 2] = 28;
      i64toi32_i32$0 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$0;
      break label$19;
     }
     label$44 : while (1) {
      $9_1 = $9_1 + -1 | 0;
      label$45 : {
       i64toi32_i32$0 = $12$hi;
       i64toi32_i32$1 = $12_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$2 | 0)) {
        $38_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $39_1 = 0
         } else {
          $39_1 = 1
         }
         $40_1 = $39_1;
        } else {
         $40_1 = 0
        }
        $38_1 = $40_1;
       }
       if ($38_1) {
        break label$45
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      i64toi32_i32$1 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$1;
      if ($9_1) {
       continue label$44
      }
      break label$1;
     };
    }
    i64toi32_i32$1 = $10$hi;
    $47($1_1 | 0, $10_1 | 0, i64toi32_i32$1 | 0);
   }
   i64toi32_i32$1 = 0;
   $11_1 = 0;
   $11$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $56($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $7_1 = 0, $16$hi = 0, $19$hi = 0, $16_1 = 0, $19_1 = 0, $15$hi = 0, $17$hi = 0, $14$hi = 0, $15_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $10_1 = 0, $18_1 = 0, $8_1 = 0, $9_1 = 0, $20$hi = 0, $20_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $106_1 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $125 = 0, $125$hi = 0, $129 = 0, $129$hi = 0, $140 = 0, $140$hi = 0, $144 = 0, $144$hi = 0, $162 = 0, $162$hi = 0, $166 = 0, $166$hi = 0, $266$hi = 0, $273$hi = 0, $282 = 0, $282$hi = 0, $286 = 0, $286$hi = 0, $290 = 0, $290$hi = 0, $294 = 0, $294$hi = 0, $304 = 0, $304$hi = 0, $321 = 0, $321$hi = 0, $325 = 0, $325$hi = 0, $330 = 0, $330$hi = 0, $332 = 0, $332$hi = 0, $350$hi = 0, $358 = 0, $359 = 0, $362$hi = 0, $386 = 0, $386$hi = 0, $390 = 0, $390$hi = 0, $426 = 0, $426$hi = 0, $430 = 0, $430$hi = 0, $434 = 0, $434$hi = 0, $438 = 0, $438$hi = 0, $447 = 0, $447$hi = 0, $450 = 0, $450$hi = 0, $454 = 0, $454$hi = 0, $458 = 0, $458$hi = 0, $460 = 0, $460$hi = 0, $464 = 0, $464$hi = 0, $468 = 0, $468$hi = 0, $472 = 0, $472$hi = 0, $504 = 0, $504$hi = 0, $508 = 0, $508$hi = 0, $512 = 0, $512$hi = 0, $516 = 0, $516$hi = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$1;
   }
   $7_1 = $48($1_1 | 0) | 0;
  }
  $8_1 = 0;
  i64toi32_i32$0 = 0;
  $14_1 = 0;
  $14$hi = i64toi32_i32$0;
  $9_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($7_1 | 0) == (48 | 0)) {
        break label$7
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$3
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$8
       }
       $9_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$6;
      }
      $9_1 = 1;
      $7_1 = $48($1_1 | 0) | 0;
      continue label$6;
     };
    }
    $7_1 = $48($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $14_1 = 0;
   $14$hi = i64toi32_i32$0;
   if (($7_1 | 0) != (48 | 0)) {
    break label$3
   }
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$11
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      break label$10;
     }
     $7_1 = $48($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $14_1 = i64toi32_i32$4;
    $14$hi = i64toi32_i32$5;
    if (($7_1 | 0) == (48 | 0)) {
     continue label$9
    }
    break label$9;
   };
   $8_1 = 1;
   $9_1 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $15_1 = 0;
  $15$hi = i64toi32_i32$5;
  $10_1 = 0;
  i64toi32_i32$5 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $17_1 = 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$5;
  $11_1 = 0;
  i64toi32_i32$5 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$5;
  label$12 : {
   label$13 : while (1) {
    $12_1 = $7_1 | 32 | 0;
    label$14 : {
     label$15 : {
      $13_1 = $7_1 + -48 | 0;
      if ($13_1 >>> 0 < 10 >>> 0) {
       break label$15
      }
      label$16 : {
       if (($12_1 + -97 | 0) >>> 0 < 6 >>> 0) {
        break label$16
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$12
       }
      }
      if (($7_1 | 0) != (46 | 0)) {
       break label$15
      }
      if ($8_1) {
       break label$12
      }
      $8_1 = 1;
      i64toi32_i32$5 = $19$hi;
      $14_1 = $19_1;
      $14$hi = i64toi32_i32$5;
      break label$14;
     }
     $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
     label$17 : {
      label$18 : {
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$0 = $19_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 7;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
        $106_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $107 = 0
         } else {
          $107 = 1
         }
         $108 = $107;
        } else {
         $108 = 0
        }
        $106_1 = $108;
       }
       if ($106_1) {
        break label$18
       }
       $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
       break label$17;
      }
      label$19 : {
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$3 = $19_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 28;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$19
       }
       $87($6_1 + 48 | 0 | 0, $7_1 | 0);
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 1073414144;
       $92($6_1 + 32 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
       $125 = i64toi32_i32$5;
       $125$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $129 = i64toi32_i32$2;
       $129$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $125$hi;
       i64toi32_i32$2 = $129$hi;
       i64toi32_i32$0 = $18$hi;
       i64toi32_i32$3 = $15$hi;
       $92($6_1 + 16 | 0 | 0, $125 | 0, i64toi32_i32$5 | 0, $129 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$3 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
       $140 = i64toi32_i32$3;
       $140$hi = i64toi32_i32$0;
       i64toi32_i32$2 = ($6_1 + 16 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $144 = i64toi32_i32$0;
       $144$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$3 = $140$hi;
       i64toi32_i32$0 = $144$hi;
       i64toi32_i32$2 = $16$hi;
       i64toi32_i32$5 = $17$hi;
       $80($6_1 | 0, $140 | 0, i64toi32_i32$3 | 0, $144 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1 + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$5;
       $17$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$2;
       $16$hi = i64toi32_i32$5;
       break label$17;
      }
      if (!$7_1) {
       break label$17
      }
      if ($11_1) {
       break label$17
      }
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1073610752;
      $92($6_1 + 80 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
      $162 = i64toi32_i32$3;
      $162$hi = i64toi32_i32$0;
      i64toi32_i32$2 = ($6_1 + 80 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $166 = i64toi32_i32$0;
      $166$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = $162$hi;
      i64toi32_i32$0 = $166$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$5 = $17$hi;
      $80($6_1 + 64 | 0 | 0, $162 | 0, i64toi32_i32$3 | 0, $166 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = ($6_1 + 64 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      $11_1 = 1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$0 = $19_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     $9_1 = 1;
    }
    label$20 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
      break label$20
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
     $7_1 = HEAPU8[$7_1 >> 0] | 0;
     continue label$13;
    }
    $7_1 = $48($1_1 | 0) | 0;
    continue label$13;
   };
  }
  label$21 : {
   label$22 : {
    if ($9_1) {
     break label$22
    }
    label$23 : {
     label$24 : {
      label$25 : {
       i64toi32_i32$5 = $1_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
        $109 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
         if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $110 = 0
         } else {
          $110 = 1
         }
         $111 = $110;
        } else {
         $111 = 0
        }
        $109 = $111;
       }
       if ($109) {
        break label$25
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -1 | 0;
       if (!$5_1) {
        break label$24
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -2 | 0;
       if (!$8_1) {
        break label$23
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -3 | 0;
       break label$23;
      }
      if ($5_1) {
       break label$23
      }
     }
     i64toi32_i32$5 = 0;
     $47($1_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
    }
    $85($6_1 + 96 | 0 | 0, +(+($4_1 | 0) * 0.0));
    i64toi32_i32$3 = $6_1 + 104 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$5;
    break label$21;
   }
   label$26 : {
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$3 = $19_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 7;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $112 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0) {
       $113 = 0
      } else {
       $113 = 1
      }
      $114 = $113;
     } else {
      $114 = 0
     }
     $112 = $114;
    }
    if ($112) {
     break label$26
    }
    i64toi32_i32$3 = $19$hi;
    $15_1 = $19_1;
    $15$hi = i64toi32_i32$3;
    label$27 : while (1) {
     $10_1 = $10_1 << 4 | 0;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$4 = $15_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $15_1 = i64toi32_i32$2;
     $15$hi = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 8;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0) {
      continue label$27
     }
     break label$27;
    };
   }
   label$28 : {
    label$29 : {
     label$30 : {
      label$31 : {
       if (($7_1 & -33 | 0 | 0) != (80 | 0)) {
        break label$31
       }
       i64toi32_i32$3 = $58($1_1 | 0, $5_1 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $15_1 = i64toi32_i32$3;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$3 = -2147483648;
       i64toi32_i32$4 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$28
       }
       label$32 : {
        if (!$5_1) {
         break label$32
        }
        i64toi32_i32$4 = $1_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
         $115 = 1
        } else {
         if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$3 >>> 0) {
           $116 = 0
          } else {
           $116 = 1
          }
          $117 = $116;
         } else {
          $117 = 0
         }
         $115 = $117;
        }
        if ($115) {
         break label$30
        }
        break label$29;
       }
       i64toi32_i32$4 = 0;
       $16_1 = 0;
       $16$hi = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       $47($1_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$4 = 0;
       $19_1 = 0;
       $19$hi = i64toi32_i32$4;
       break label$21;
      }
      i64toi32_i32$4 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
       $118 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $119 = 0
        } else {
         $119 = 1
        }
        $120 = $119;
       } else {
        $120 = 0
       }
       $118 = $120;
      }
      if ($118) {
       break label$28
      }
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$3 = 0;
    $15_1 = 0;
    $15$hi = i64toi32_i32$3;
   }
   label$33 : {
    if ($10_1) {
     break label$33
    }
    $85($6_1 + 112 | 0 | 0, +(+($4_1 | 0) * 0.0));
    i64toi32_i32$0 = $6_1 + 120 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$3;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$3;
    break label$21;
   }
   label$34 : {
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$5 = $8_1;
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$4 = i64toi32_i32$5 ? $14_1 : $19_1;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$1;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 2;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     $121 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
     $121 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
    }
    $266$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$4 = $266$hi;
    i64toi32_i32$0 = $121;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$3 = $15_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -32;
    i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $273$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$4 = $273$hi;
    i64toi32_i32$3 = 0 - $3_1 | 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $122 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
       $123 = 0
      } else {
       $123 = 1
      }
      $124 = $123;
     } else {
      $124 = 0
     }
     $122 = $124;
    }
    if ($122) {
     break label$34
    }
    HEAP32[($14() | 0) >> 2] = 68;
    $87($6_1 + 160 | 0 | 0, $4_1 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
    $282 = i64toi32_i32$2;
    $282$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 160 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $286 = i64toi32_i32$1;
    $286$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $282$hi;
    i64toi32_i32$1 = $286$hi;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = 2147418111;
    $92($6_1 + 144 | 0 | 0, $282 | 0, i64toi32_i32$2 | 0, $286 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
    $290 = i64toi32_i32$4;
    $290$hi = i64toi32_i32$3;
    i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $294 = i64toi32_i32$3;
    $294$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $290$hi;
    i64toi32_i32$3 = $294$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    $92($6_1 + 128 | 0 | 0, $290 | 0, i64toi32_i32$4 | 0, $294 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = ($6_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 132 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$2;
    break label$21;
   }
   label$35 : {
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$1 = $3_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $304 = i64toi32_i32$1;
    $304$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$3 = $19_1;
    i64toi32_i32$1 = $304$hi;
    i64toi32_i32$4 = $304;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
     $126 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$4 >>> 0) {
       $127 = 0
      } else {
       $127 = 1
      }
      $128 = $127;
     } else {
      $128 = 0
     }
     $126 = $128;
    }
    if ($126) {
     break label$35
    }
    label$36 : {
     if (($10_1 | 0) <= (-1 | 0)) {
      break label$36
     }
     label$37 : while (1) {
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = -1073807360;
      $80($6_1 + 416 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 1073610752;
      $7_1 = $83($16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$4 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
      $321 = i64toi32_i32$3;
      $321$hi = i64toi32_i32$2;
      $1_1 = ($7_1 | 0) < (0 | 0);
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$3 = $321$hi;
      i64toi32_i32$1 = i64toi32_i32$0 ? $16_1 : $321;
      i64toi32_i32$4 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$3;
      $325 = i64toi32_i32$1;
      $325$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$0 = ($6_1 + 416 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $330 = i64toi32_i32$4;
      $330$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$4 = $330$hi;
      i64toi32_i32$2 = i64toi32_i32$3 ? $17_1 : $330;
      i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$4;
      $332 = i64toi32_i32$2;
      $332$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$3 = $325$hi;
      i64toi32_i32$1 = $332$hi;
      $80($6_1 + 400 | 0 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$2 | 0, $325 | 0, i64toi32_i32$3 | 0, $332 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$2 = $19_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($6_1 + 400 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$5;
      $10_1 = $10_1 << 1 | 0 | ($7_1 | 0) > (-1 | 0) | 0;
      if (($10_1 | 0) > (-1 | 0)) {
       continue label$37
      }
      break label$37;
     };
    }
    label$38 : {
     label$39 : {
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $350$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$1 = $19_1;
      i64toi32_i32$2 = $350$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
      i64toi32_i32$4 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $14_1 = i64toi32_i32$2;
      $14$hi = i64toi32_i32$3;
      $7_1 = i64toi32_i32$2;
      $358 = (i64toi32_i32$2 | 0) > (0 | 0) ? i64toi32_i32$2 : 0;
      $359 = $2_1;
      i64toi32_i32$3 = 0;
      $362$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$5 = $362$hi;
      i64toi32_i32$0 = $2_1;
      if ((i64toi32_i32$3 | 0) < (i64toi32_i32$5 | 0)) {
       $130 = 1
      } else {
       if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $131 = 0
        } else {
         $131 = 1
        }
        $132 = $131;
       } else {
        $132 = 0
       }
       $130 = $132;
      }
      $7_1 = $130 ? $358 : $359;
      if (($7_1 | 0) < (113 | 0)) {
       break label$39
      }
      $87($6_1 + 384 | 0 | 0, $4_1 | 0);
      i64toi32_i32$0 = $6_1 + 392 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $14_1 = i64toi32_i32$4;
      $14$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 384 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 388 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $20_1 = 0;
      $20$hi = i64toi32_i32$4;
      break label$38;
     }
     $85($6_1 + 352 | 0 | 0, +(+$49(+(1.0), 144 - $7_1 | 0 | 0)));
     $87($6_1 + 336 | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 352 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 356 | 0) >> 2] | 0;
     $386 = i64toi32_i32$4;
     $386$hi = i64toi32_i32$3;
     i64toi32_i32$0 = (i64toi32_i32$0 + 352 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $390 = i64toi32_i32$3;
     $390$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 336 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 340 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$3;
     i64toi32_i32$0 = (i64toi32_i32$0 + 336 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $14_1 = i64toi32_i32$3;
     $14$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $386$hi;
     i64toi32_i32$3 = $390$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$5 = $14$hi;
     $50($6_1 + 368 | 0 | 0, $386 | 0, i64toi32_i32$4 | 0, $390 | 0, i64toi32_i32$3 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$3 = ($6_1 + 368 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$3 = $6_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 368 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 372 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$0;
     $15$hi = i64toi32_i32$5;
    }
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$5 = $17$hi;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 0;
    $7_1 = (($7_1 | 0) < (32 | 0) & ($82($16_1 | 0, i64toi32_i32$5 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0 | 0) != (0 | 0) | 0) & !($10_1 & 1 | 0) | 0;
    $88($6_1 + 320 | 0 | 0, $10_1 + $7_1 | 0 | 0);
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 320 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 324 | 0) >> 2] | 0;
    $426 = i64toi32_i32$4;
    $426$hi = i64toi32_i32$3;
    i64toi32_i32$0 = (i64toi32_i32$0 + 320 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $430 = i64toi32_i32$3;
    $430$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$0 = $426$hi;
    i64toi32_i32$5 = $430$hi;
    $92($6_1 + 304 | 0 | 0, $18_1 | 0, i64toi32_i32$4 | 0, $14_1 | 0, i64toi32_i32$3 | 0, $426 | 0, i64toi32_i32$0 | 0, $430 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 304 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 308 | 0) >> 2] | 0;
    $434 = i64toi32_i32$5;
    $434$hi = i64toi32_i32$0;
    i64toi32_i32$3 = (i64toi32_i32$3 + 304 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $438 = i64toi32_i32$0;
    $438$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = $434$hi;
    i64toi32_i32$0 = $438$hi;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$4 = $20$hi;
    $80($6_1 + 272 | 0 | 0, $434 | 0, i64toi32_i32$5 | 0, $438 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$4 = $16$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $16_1;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$4 : i64toi32_i32$3;
    $447 = i64toi32_i32$5;
    $447$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = $17$hi;
    i64toi32_i32$4 = i64toi32_i32$3 ? 0 : $17_1;
    i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$0 : i64toi32_i32$5;
    $450 = i64toi32_i32$4;
    $450$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$3 = $447$hi;
    i64toi32_i32$0 = $450$hi;
    $92($6_1 + 288 | 0 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $14_1 | 0, i64toi32_i32$4 | 0, $447 | 0, i64toi32_i32$3 | 0, $450 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 288 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 292 | 0) >> 2] | 0;
    $454 = i64toi32_i32$0;
    $454$hi = i64toi32_i32$3;
    i64toi32_i32$4 = (i64toi32_i32$4 + 288 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $458 = i64toi32_i32$3;
    $458$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 272 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 276 | 0) >> 2] | 0;
    $460 = i64toi32_i32$0;
    $460$hi = i64toi32_i32$3;
    i64toi32_i32$4 = (i64toi32_i32$4 + 272 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $464 = i64toi32_i32$3;
    $464$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $454$hi;
    i64toi32_i32$3 = $458$hi;
    i64toi32_i32$4 = $460$hi;
    i64toi32_i32$1 = $464$hi;
    $80($6_1 + 256 | 0 | 0, $454 | 0, i64toi32_i32$0 | 0, $458 | 0, i64toi32_i32$3 | 0, $460 | 0, i64toi32_i32$4 | 0, $464 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 256 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 260 | 0) >> 2] | 0;
    $468 = i64toi32_i32$1;
    $468$hi = i64toi32_i32$4;
    i64toi32_i32$3 = (i64toi32_i32$3 + 256 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $472 = i64toi32_i32$4;
    $472$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$1 = $468$hi;
    i64toi32_i32$4 = $472$hi;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$0 = $20$hi;
    $94($6_1 + 240 | 0 | 0, $468 | 0, i64toi32_i32$1 | 0, $472 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$0 | 0);
    label$40 : {
     i64toi32_i32$4 = $6_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 240 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 244 | 0) >> 2] | 0;
     $16_1 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$4 = (i64toi32_i32$4 + 240 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$3 = $17$hi;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 0;
     if ($82($16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0) {
      break label$40
     }
     HEAP32[($14() | 0) >> 2] = 68;
    }
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$4 = $17$hi;
    $51($6_1 + 224 | 0 | 0, $16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0);
    i64toi32_i32$3 = ($6_1 + 224 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 224 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 228 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$4;
    break label$21;
   }
   HEAP32[($14() | 0) >> 2] = 68;
   $87($6_1 + 208 | 0 | 0, $4_1 | 0);
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 208 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 212 | 0) >> 2] | 0;
   $504 = i64toi32_i32$4;
   $504$hi = i64toi32_i32$1;
   i64toi32_i32$3 = (i64toi32_i32$3 + 208 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $508 = i64toi32_i32$1;
   $508$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $504$hi;
   i64toi32_i32$1 = $508$hi;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 65536;
   $92($6_1 + 192 | 0 | 0, $504 | 0, i64toi32_i32$4 | 0, $508 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
   $512 = i64toi32_i32$0;
   $512$hi = i64toi32_i32$3;
   i64toi32_i32$1 = (i64toi32_i32$1 + 192 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $516 = i64toi32_i32$3;
   $516$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $512$hi;
   i64toi32_i32$3 = $516$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 65536;
   $92($6_1 + 176 | 0 | 0, $512 | 0, i64toi32_i32$0 | 0, $516 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$3 = ($6_1 + 176 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$4;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 176 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 180 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$1;
   $16$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $16$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $19$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$4;
  global$0 = $6_1 + 432 | 0;
 }
 
 function $57($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $18$hi = 0, $18_1 = 0, $14_1 = 0, $19$hi = 0, $13_1 = 0, i64toi32_i32$0 = 0, $19_1 = 0, $8_1 = 0, $11_1 = 0, $15_1 = 0, $21$hi = 0, $16_1 = 0, $20$hi = 0, $21_1 = 0, $20_1 = 0, $12_1 = 0, $9_1 = 0, $17_1 = 0, $22$hi = 0, $23$hi = 0, $22_1 = 0, $23_1 = 0, $10_1 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $24_1 = 0.0, $126 = 0, $234 = 0, $234$hi = 0, $238 = 0, $238$hi = 0, $240 = 0, $240$hi = 0, $244 = 0, $244$hi = 0, $254$hi = 0, $263 = 0, $263$hi = 0, $267 = 0, $267$hi = 0, $271 = 0, $271$hi = 0, $275 = 0, $275$hi = 0, $285 = 0, $285$hi = 0, $294 = 0, $294$hi = 0, $298 = 0, $298$hi = 0, $302 = 0, $302$hi = 0, $306 = 0, $306$hi = 0, $355 = 0, $355$hi = 0, $359 = 0, $359$hi = 0, $361 = 0, $361$hi = 0, $365 = 0, $365$hi = 0, $384 = 0, $384$hi = 0, $388 = 0, $388$hi = 0, $390 = 0, $390$hi = 0, $394 = 0, $394$hi = 0, $405 = 0, $405$hi = 0, $409 = 0, $409$hi = 0, $411 = 0, $411$hi = 0, $415 = 0, $415$hi = 0, $443 = 0, $443$hi = 0, $447 = 0, $447$hi = 0, $449 = 0, $449$hi = 0, $453 = 0, $453$hi = 0, $463 = 0, $463$hi = 0, $467 = 0, $467$hi = 0, $469 = 0, $469$hi = 0, $473 = 0, $473$hi = 0, $512 = 0, $588$hi = 0, $590$hi = 0, $598 = 0, $598$hi = 0, $644 = 0, $646 = 0, $740 = 0, $740$hi = 0, $744 = 0, $744$hi = 0, $746 = 0, $746$hi = 0, $750 = 0, $750$hi = 0, $769 = 0, $769$hi = 0, $773 = 0, $773$hi = 0, $815 = 0, $876 = 0, $876$hi = 0, $880 = 0, $880$hi = 0, $899 = 0, $899$hi = 0, $903 = 0, $903$hi = 0, $921 = 0, $921$hi = 0, $925 = 0, $925$hi = 0, $962 = 0, $962$hi = 0, $966 = 0, $966$hi = 0, $985 = 0, $985$hi = 0, $989 = 0, $989$hi = 0, $1012 = 0, $1012$hi = 0, $1016 = 0, $1016$hi = 0, $1032 = 0, $1032$hi = 0, $1036 = 0, $1036$hi = 0, $1050 = 0, $1050$hi = 0, $1054 = 0, $1054$hi = 0, $1075 = 0, $1075$hi = 0, $1079 = 0, $1079$hi = 0, $1102 = 0, $1102$hi = 0, $1106 = 0, $1106$hi = 0, $1112 = 0, $1112$hi = 0, $1119 = 0, $1119$hi = 0;
  $7_1 = global$0 - 8976 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  $9_1 = 0 - $4_1 | 0;
  $10_1 = $9_1 - $3_1 | 0;
  i64toi32_i32$0 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$0;
  $11_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (($2_1 | 0) == (48 | 0)) {
        break label$5
       }
       if (($2_1 | 0) != (46 | 0)) {
        break label$1
       }
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$3
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$2;
      }
      label$6 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       $11_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       continue label$4;
      }
      $11_1 = 1;
      $2_1 = $48($1_1 | 0) | 0;
      continue label$4;
     };
    }
    $2_1 = $48($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $18_1 = 0;
   $18$hi = i64toi32_i32$0;
   if (($2_1 | 0) != (48 | 0)) {
    break label$1
   }
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$9
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$8;
     }
     $2_1 = $48($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$2 = $18_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    if (($2_1 | 0) == (48 | 0)) {
     continue label$7
    }
    break label$7;
   };
   $11_1 = 1;
   $8_1 = 1;
  }
  $12_1 = 0;
  HEAP32[($7_1 + 784 | 0) >> 2] = 0;
  $13_1 = $2_1 + -48 | 0;
  label$10 : {
   label$11 : {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         label$17 : {
          $14_1 = ($2_1 | 0) == (46 | 0);
          if ($14_1) {
           break label$17
          }
          i64toi32_i32$5 = 0;
          $19_1 = 0;
          $19$hi = i64toi32_i32$5;
          if ($13_1 >>> 0 <= 9 >>> 0) {
           break label$17
          }
          $15_1 = 0;
          $16_1 = 0;
          break label$16;
         }
         i64toi32_i32$5 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$5;
         $16_1 = 0;
         $15_1 = 0;
         $12_1 = 0;
         label$18 : while (1) {
          label$19 : {
           label$20 : {
            if (!($14_1 & 1 | 0)) {
             break label$20
            }
            label$21 : {
             if ($8_1) {
              break label$21
             }
             i64toi32_i32$5 = $19$hi;
             $18_1 = $19_1;
             $18$hi = i64toi32_i32$5;
             $8_1 = 1;
             break label$19;
            }
            $14_1 = !$11_1;
            break label$15;
           }
           i64toi32_i32$5 = $19$hi;
           i64toi32_i32$0 = $19_1;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 1;
           i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
           i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
           }
           $19_1 = i64toi32_i32$1;
           $19$hi = i64toi32_i32$4;
           label$22 : {
            if (($15_1 | 0) > (2044 | 0)) {
             break label$22
            }
            $11_1 = ($2_1 | 0) == (48 | 0);
            i64toi32_i32$4 = $19$hi;
            $17_1 = $19_1;
            $14_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
            label$23 : {
             if (!$16_1) {
              break label$23
             }
             $13_1 = ($2_1 + Math_imul(HEAP32[$14_1 >> 2] | 0, 10) | 0) + -48 | 0;
            }
            $12_1 = $11_1 ? $12_1 : $17_1;
            HEAP32[$14_1 >> 2] = $13_1;
            $11_1 = 1;
            $2_1 = $16_1 + 1 | 0;
            $126 = $2_1;
            $2_1 = ($2_1 | 0) == (9 | 0);
            $16_1 = $2_1 ? 0 : $126;
            $15_1 = $15_1 + $2_1 | 0;
            break label$19;
           }
           if (($2_1 | 0) == (48 | 0)) {
            break label$19
           }
           HEAP32[($7_1 + 8960 | 0) >> 2] = HEAP32[($7_1 + 8960 | 0) >> 2] | 0 | 1 | 0;
           $12_1 = 18396;
          }
          label$24 : {
           label$25 : {
            $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
            if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
             break label$25
            }
            HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
            $2_1 = HEAPU8[$2_1 >> 0] | 0;
            break label$24;
           }
           $2_1 = $48($1_1 | 0) | 0;
          }
          $13_1 = $2_1 + -48 | 0;
          $14_1 = ($2_1 | 0) == (46 | 0);
          if ($14_1) {
           continue label$18
          }
          if ($13_1 >>> 0 < 10 >>> 0) {
           continue label$18
          }
          break label$18;
         };
        }
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$2 = $8_1;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$3 = i64toi32_i32$2 ? $18_1 : $19_1;
        i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
        $18_1 = i64toi32_i32$3;
        $18$hi = i64toi32_i32$5;
        label$26 : {
         if (!$11_1) {
          break label$26
         }
         if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
          break label$26
         }
         label$27 : {
          i64toi32_i32$5 = $58($1_1 | 0, $6_1 | 0) | 0;
          i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
          $20_1 = i64toi32_i32$5;
          $20$hi = i64toi32_i32$3;
          i64toi32_i32$2 = i64toi32_i32$5;
          i64toi32_i32$5 = -2147483648;
          i64toi32_i32$4 = 0;
          if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
           break label$27
          }
          if (!$6_1) {
           break label$12
          }
          i64toi32_i32$2 = 0;
          $20_1 = 0;
          $20$hi = i64toi32_i32$2;
          i64toi32_i32$4 = $1_1;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
          i64toi32_i32$4 = i64toi32_i32$2;
          i64toi32_i32$2 = 0;
          i64toi32_i32$5 = 0;
          if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
           $169 = 1
          } else {
           if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
            if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$5 >>> 0) {
             $170 = 0
            } else {
             $170 = 1
            }
            $171 = $170;
           } else {
            $171 = 0
           }
           $169 = $171;
          }
          if ($169) {
           break label$27
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         if (!$11_1) {
          break label$13
         }
         i64toi32_i32$4 = $20$hi;
         i64toi32_i32$4 = $18$hi;
         i64toi32_i32$4 = $20$hi;
         i64toi32_i32$5 = $20_1;
         i64toi32_i32$3 = $18$hi;
         i64toi32_i32$2 = $18_1;
         i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
         i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
         }
         $18_1 = i64toi32_i32$0;
         $18$hi = i64toi32_i32$1;
         break label$11;
        }
        $14_1 = !$11_1;
        if (($2_1 | 0) < (0 | 0)) {
         break label$14
        }
       }
       i64toi32_i32$4 = $1_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
        $172 = 1
       } else {
        if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $173 = 0
         } else {
          $173 = 1
         }
         $174 = $173;
        } else {
         $174 = 0
        }
        $172 = $174;
       }
       if ($172) {
        break label$14
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      if (!$14_1) {
       break label$11
      }
     }
     HEAP32[($14() | 0) >> 2] = 28;
    }
    i64toi32_i32$4 = 0;
    $19_1 = 0;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $47($1_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = 0;
    $18_1 = 0;
    $18$hi = i64toi32_i32$4;
    break label$10;
   }
   label$28 : {
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    if ($1_1) {
     break label$28
    }
    $85($7_1 | 0, +(+($5_1 | 0) * 0.0));
    i64toi32_i32$2 = $7_1 + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    break label$10;
   }
   label$29 : {
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 9;
    if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
     $175 = 1
    } else {
     if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $176 = 0
      } else {
       $176 = 1
      }
      $177 = $176;
     } else {
      $177 = 0
     }
     $175 = $177;
    }
    if ($175) {
     break label$29
    }
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$1 = $18_1;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$5 = $19_1;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | 0) {
     break label$29
    }
    label$30 : {
     if (($3_1 | 0) > (30 | 0)) {
      break label$30
     }
     if ($1_1 >>> $3_1 | 0) {
      break label$29
     }
    }
    $87($7_1 + 48 | 0 | 0, $5_1 | 0);
    $88($7_1 + 32 | 0 | 0, $1_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 52 | 0) >> 2] | 0;
    $234 = i64toi32_i32$1;
    $234$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $238 = i64toi32_i32$2;
    $238$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
    $240 = i64toi32_i32$1;
    $240$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $244 = i64toi32_i32$2;
    $244$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $234$hi;
    i64toi32_i32$2 = $238$hi;
    i64toi32_i32$5 = $240$hi;
    i64toi32_i32$4 = $244$hi;
    $92($7_1 + 16 | 0 | 0, $234 | 0, i64toi32_i32$1 | 0, $238 | 0, i64toi32_i32$2 | 0, $240 | 0, i64toi32_i32$5 | 0, $244 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$2 = ($7_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    break label$10;
   }
   label$31 : {
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = 0;
    $254$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$2 = $18_1;
    i64toi32_i32$5 = $254$hi;
    i64toi32_i32$1 = $9_1 >>> 1 | 0;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
     $178 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
       $179 = 0
      } else {
       $179 = 1
      }
      $180 = $179;
     } else {
      $180 = 0
     }
     $178 = $180;
    }
    if ($178) {
     break label$31
    }
    HEAP32[($14() | 0) >> 2] = 68;
    $87($7_1 + 96 | 0 | 0, $5_1 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$2 = HEAP32[($7_1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 100 | 0) >> 2] | 0;
    $263 = i64toi32_i32$2;
    $263$hi = i64toi32_i32$4;
    i64toi32_i32$1 = ($7_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $267 = i64toi32_i32$4;
    $267$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $263$hi;
    i64toi32_i32$4 = $267$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$5 = 2147418111;
    $92($7_1 + 80 | 0 | 0, $263 | 0, i64toi32_i32$2 | 0, $267 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
    $271 = i64toi32_i32$5;
    $271$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 80 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $275 = i64toi32_i32$1;
    $275$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $271$hi;
    i64toi32_i32$1 = $275$hi;
    i64toi32_i32$4 = -1;
    i64toi32_i32$2 = 2147418111;
    $92($7_1 + 64 | 0 | 0, $271 | 0, i64toi32_i32$5 | 0, $275 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$1 = ($7_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$2;
    $18$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$2;
    break label$10;
   }
   label$32 : {
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$4 = $4_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
    $285 = i64toi32_i32$4;
    $285$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$1 = $18_1;
    i64toi32_i32$4 = $285$hi;
    i64toi32_i32$5 = $285;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$4 | 0)) {
     $181 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       $182 = 0
      } else {
       $182 = 1
      }
      $183 = $182;
     } else {
      $183 = 0
     }
     $181 = $183;
    }
    if ($181) {
     break label$32
    }
    HEAP32[($14() | 0) >> 2] = 68;
    $87($7_1 + 144 | 0 | 0, $5_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 148 | 0) >> 2] | 0;
    $294 = i64toi32_i32$1;
    $294$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $298 = i64toi32_i32$2;
    $298$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $294$hi;
    i64toi32_i32$2 = $298$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 65536;
    $92($7_1 + 128 | 0 | 0, $294 | 0, i64toi32_i32$1 | 0, $298 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
    $302 = i64toi32_i32$4;
    $302$hi = i64toi32_i32$5;
    i64toi32_i32$2 = ($7_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $306 = i64toi32_i32$5;
    $306$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $302$hi;
    i64toi32_i32$5 = $306$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 65536;
    $92($7_1 + 112 | 0 | 0, $302 | 0, i64toi32_i32$4 | 0, $306 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$5 = ($7_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$2;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    break label$10;
   }
   label$33 : {
    if (!$16_1) {
     break label$33
    }
    label$34 : {
     if (($16_1 | 0) > (8 | 0)) {
      break label$34
     }
     $2_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     label$35 : while (1) {
      $1_1 = Math_imul($1_1, 10);
      $16_1 = $16_1 + 1 | 0;
      if (($16_1 | 0) != (9 | 0)) {
       continue label$35
      }
      break label$35;
     };
     HEAP32[$2_1 >> 2] = $1_1;
    }
    $15_1 = $15_1 + 1 | 0;
   }
   i64toi32_i32$1 = $18$hi;
   $8_1 = $18_1;
   label$36 : {
    if (($12_1 | 0) >= (9 | 0)) {
     break label$36
    }
    if (($12_1 | 0) > ($8_1 | 0)) {
     break label$36
    }
    if (($8_1 | 0) > (17 | 0)) {
     break label$36
    }
    label$37 : {
     if (($8_1 | 0) != (9 | 0)) {
      break label$37
     }
     $87($7_1 + 192 | 0 | 0, $5_1 | 0);
     $88($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 192 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 196 | 0) >> 2] | 0;
     $355 = i64toi32_i32$1;
     $355$hi = i64toi32_i32$2;
     i64toi32_i32$5 = (i64toi32_i32$5 + 192 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $359 = i64toi32_i32$2;
     $359$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
     $361 = i64toi32_i32$1;
     $361$hi = i64toi32_i32$2;
     i64toi32_i32$5 = (i64toi32_i32$5 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $365 = i64toi32_i32$2;
     $365$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $355$hi;
     i64toi32_i32$2 = $359$hi;
     i64toi32_i32$5 = $361$hi;
     i64toi32_i32$4 = $365$hi;
     $92($7_1 + 160 | 0 | 0, $355 | 0, i64toi32_i32$1 | 0, $359 | 0, i64toi32_i32$2 | 0, $361 | 0, i64toi32_i32$5 | 0, $365 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$2 = ($7_1 + 160 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 160 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 164 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$5;
     $19$hi = i64toi32_i32$4;
     break label$10;
    }
    label$38 : {
     if (($8_1 | 0) > (8 | 0)) {
      break label$38
     }
     $87($7_1 + 272 | 0 | 0, $5_1 | 0);
     $88($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 272 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 276 | 0) >> 2] | 0;
     $384 = i64toi32_i32$4;
     $384$hi = i64toi32_i32$5;
     i64toi32_i32$2 = ($7_1 + 272 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $388 = i64toi32_i32$5;
     $388$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
     $390 = i64toi32_i32$4;
     $390$hi = i64toi32_i32$5;
     i64toi32_i32$2 = ($7_1 + 256 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $394 = i64toi32_i32$5;
     $394$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $384$hi;
     i64toi32_i32$5 = $388$hi;
     i64toi32_i32$2 = $390$hi;
     i64toi32_i32$1 = $394$hi;
     $92($7_1 + 240 | 0 | 0, $384 | 0, i64toi32_i32$4 | 0, $388 | 0, i64toi32_i32$5 | 0, $390 | 0, i64toi32_i32$2 | 0, $394 | 0, i64toi32_i32$1 | 0);
     $87($7_1 + 224 | 0 | 0, HEAP32[(((8 - $8_1 | 0) << 2 | 0) + 1600 | 0) >> 2] | 0 | 0);
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
     $405 = i64toi32_i32$1;
     $405$hi = i64toi32_i32$2;
     i64toi32_i32$5 = (i64toi32_i32$5 + 240 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $409 = i64toi32_i32$2;
     $409$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 224 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 228 | 0) >> 2] | 0;
     $411 = i64toi32_i32$1;
     $411$hi = i64toi32_i32$2;
     i64toi32_i32$5 = (i64toi32_i32$5 + 224 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $415 = i64toi32_i32$2;
     $415$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $405$hi;
     i64toi32_i32$2 = $409$hi;
     i64toi32_i32$5 = $411$hi;
     i64toi32_i32$4 = $415$hi;
     $84($7_1 + 208 | 0 | 0, $405 | 0, i64toi32_i32$1 | 0, $409 | 0, i64toi32_i32$2 | 0, $411 | 0, i64toi32_i32$5 | 0, $415 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$2 = ($7_1 + 208 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 208 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 212 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$5;
     $19$hi = i64toi32_i32$4;
     break label$10;
    }
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    label$39 : {
     $2_1 = ($3_1 + Math_imul($8_1, -3) | 0) + 27 | 0;
     if (($2_1 | 0) > (30 | 0)) {
      break label$39
     }
     if ($1_1 >>> $2_1 | 0) {
      break label$36
     }
    }
    $87($7_1 + 352 | 0 | 0, $5_1 | 0);
    $88($7_1 + 336 | 0 | 0, $1_1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 352 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 356 | 0) >> 2] | 0;
    $443 = i64toi32_i32$4;
    $443$hi = i64toi32_i32$5;
    i64toi32_i32$2 = ($7_1 + 352 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $447 = i64toi32_i32$5;
    $447$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 336 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 340 | 0) >> 2] | 0;
    $449 = i64toi32_i32$4;
    $449$hi = i64toi32_i32$5;
    i64toi32_i32$2 = ($7_1 + 336 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $453 = i64toi32_i32$5;
    $453$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $443$hi;
    i64toi32_i32$5 = $447$hi;
    i64toi32_i32$2 = $449$hi;
    i64toi32_i32$1 = $453$hi;
    $92($7_1 + 320 | 0 | 0, $443 | 0, i64toi32_i32$4 | 0, $447 | 0, i64toi32_i32$5 | 0, $449 | 0, i64toi32_i32$2 | 0, $453 | 0, i64toi32_i32$1 | 0);
    $87($7_1 + 304 | 0 | 0, HEAP32[(($8_1 << 2 | 0) + 1560 | 0) >> 2] | 0 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 324 | 0) >> 2] | 0;
    $463 = i64toi32_i32$1;
    $463$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $467 = i64toi32_i32$2;
    $467$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 304 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 308 | 0) >> 2] | 0;
    $469 = i64toi32_i32$1;
    $469$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 304 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $473 = i64toi32_i32$2;
    $473$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $463$hi;
    i64toi32_i32$2 = $467$hi;
    i64toi32_i32$5 = $469$hi;
    i64toi32_i32$4 = $473$hi;
    $92($7_1 + 288 | 0 | 0, $463 | 0, i64toi32_i32$1 | 0, $467 | 0, i64toi32_i32$2 | 0, $469 | 0, i64toi32_i32$5 | 0, $473 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$2 = ($7_1 + 288 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 288 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 292 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    break label$10;
   }
   label$40 : while (1) {
    $2_1 = $15_1;
    $15_1 = $2_1 + -1 | 0;
    if (!(HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0)) {
     continue label$40
    }
    break label$40;
   };
   $16_1 = 0;
   label$41 : {
    label$42 : {
     $1_1 = ($8_1 | 0) % (9 | 0) | 0;
     if ($1_1) {
      break label$42
     }
     $14_1 = 0;
     break label$41;
    }
    $14_1 = 0;
    $6_1 = ($8_1 | 0) < (0 | 0) ? $1_1 + 9 | 0 : $1_1;
    label$43 : {
     label$44 : {
      if ($2_1) {
       break label$44
      }
      $2_1 = 0;
      break label$43;
     }
     $11_1 = HEAP32[(((8 - $6_1 | 0) << 2 | 0) + 1600 | 0) >> 2] | 0;
     $17_1 = (1e9 | 0) / ($11_1 | 0) | 0;
     $13_1 = 0;
     $1_1 = 0;
     $14_1 = 0;
     label$45 : while (1) {
      $15_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
      $512 = $15_1;
      $15_1 = HEAP32[$15_1 >> 2] | 0;
      $12_1 = ($15_1 >>> 0) / ($11_1 >>> 0) | 0;
      $13_1 = $12_1 + $13_1 | 0;
      HEAP32[$512 >> 2] = $13_1;
      $13_1 = ($1_1 | 0) == ($14_1 | 0) & !$13_1 | 0;
      $14_1 = $13_1 ? ($14_1 + 1 | 0) & 2047 | 0 : $14_1;
      $8_1 = $13_1 ? $8_1 + -9 | 0 : $8_1;
      $13_1 = Math_imul($17_1, $15_1 - Math_imul($12_1, $11_1) | 0);
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != ($2_1 | 0)) {
       continue label$45
      }
      break label$45;
     };
     if (!$13_1) {
      break label$43
     }
     HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $13_1;
     $2_1 = $2_1 + 1 | 0;
    }
    $8_1 = ($8_1 - $6_1 | 0) + 9 | 0;
   }
   label$46 : while (1) {
    $12_1 = ($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0;
    label$47 : {
     label$48 : while (1) {
      label$49 : {
       if (($8_1 | 0) < (36 | 0)) {
        break label$49
       }
       if (($8_1 | 0) != (36 | 0)) {
        break label$47
       }
       if ((HEAP32[$12_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$47
       }
      }
      $11_1 = $2_1 + 2047 | 0;
      $13_1 = 0;
      label$50 : while (1) {
       label$51 : {
        label$52 : {
         $1_1 = $11_1 & 2047 | 0;
         $11_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
         i64toi32_i32$2 = $11_1;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$5 = 0;
         i64toi32_i32$2 = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         i64toi32_i32$1 = 29;
         i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $184 = 0;
         } else {
          i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
          $184 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $588$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $590$hi = i64toi32_i32$4;
         i64toi32_i32$4 = $588$hi;
         i64toi32_i32$5 = $184;
         i64toi32_i32$2 = $590$hi;
         i64toi32_i32$1 = $13_1;
         i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
         i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $18_1 = i64toi32_i32$3;
         $18$hi = i64toi32_i32$0;
         i64toi32_i32$4 = i64toi32_i32$3;
         i64toi32_i32$5 = 0;
         i64toi32_i32$1 = 1000000001;
         if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0) {
          break label$52
         }
         $13_1 = 0;
         break label$51;
        }
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($18_1 | 0, i64toi32_i32$4 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $19_1 = i64toi32_i32$0;
        $19$hi = i64toi32_i32$4;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$4 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $598 = i64toi32_i32$0;
        $598$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$1 = $18_1;
        i64toi32_i32$0 = $598$hi;
        i64toi32_i32$5 = $598;
        i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
        i64toi32_i32$3 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
        $18_1 = i64toi32_i32$2;
        $18$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $19$hi;
        $13_1 = $19_1;
       }
       i64toi32_i32$3 = $18$hi;
       $15_1 = $18_1;
       HEAP32[$11_1 >> 2] = $18_1;
       $2_1 = ($1_1 | 0) != (($2_1 + -1 | 0) & 2047 | 0 | 0) ? $2_1 : ($1_1 | 0) == ($14_1 | 0) ? $2_1 : $18_1 ? $2_1 : $1_1;
       $11_1 = $1_1 + -1 | 0;
       if (($1_1 | 0) != ($14_1 | 0)) {
        continue label$50
       }
       break label$50;
      };
      $16_1 = $16_1 + -29 | 0;
      if (!$13_1) {
       continue label$48
      }
      break label$48;
     };
     label$53 : {
      $14_1 = ($14_1 + -1 | 0) & 2047 | 0;
      if (($14_1 | 0) != ($2_1 | 0)) {
       break label$53
      }
      $1_1 = ($7_1 + 784 | 0) + ((($2_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      $644 = $1_1;
      $646 = HEAP32[$1_1 >> 2] | 0;
      $1_1 = ($2_1 + -1 | 0) & 2047 | 0;
      HEAP32[$644 >> 2] = $646 | (HEAP32[(($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0) | 0;
      $2_1 = $1_1;
     }
     $8_1 = $8_1 + 9 | 0;
     HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $13_1;
     continue label$46;
    }
    break label$46;
   };
   label$54 : {
    label$55 : while (1) {
     $9_1 = ($2_1 + 1 | 0) & 2047 | 0;
     $6_1 = ($7_1 + 784 | 0) + ((($2_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$56 : while (1) {
      $15_1 = ($8_1 | 0) > (45 | 0) ? 9 : 1;
      label$57 : {
       label$58 : while (1) {
        $11_1 = $14_1;
        $1_1 = 0;
        label$59 : {
         label$60 : {
          label$61 : while (1) {
           $14_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($14_1 | 0) == ($2_1 | 0)) {
            break label$60
           }
           $14_1 = HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] | 0;
           $13_1 = HEAP32[(($1_1 << 2 | 0) + 1584 | 0) >> 2] | 0;
           if ($14_1 >>> 0 < $13_1 >>> 0) {
            break label$60
           }
           if ($14_1 >>> 0 > $13_1 >>> 0) {
            break label$59
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != (4 | 0)) {
            continue label$61
           }
           break label$61;
          };
         }
         if (($8_1 | 0) != (36 | 0)) {
          break label$59
         }
         i64toi32_i32$3 = 0;
         $18_1 = 0;
         $18$hi = i64toi32_i32$3;
         $1_1 = 0;
         i64toi32_i32$3 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$3;
         label$62 : while (1) {
          label$63 : {
           $14_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($14_1 | 0) != ($2_1 | 0)) {
            break label$63
           }
           $2_1 = ($2_1 + 1 | 0) & 2047 | 0;
           HEAP32[((($2_1 << 2 | 0) + ($7_1 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          $88($7_1 + 768 | 0 | 0, HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$3 = $18$hi;
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$3 = $18$hi;
          i64toi32_i32$1 = $19$hi;
          i64toi32_i32$4 = 0;
          i64toi32_i32$5 = 1075633366;
          $92($7_1 + 752 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0, 1342177280 | 0, i64toi32_i32$5 | 0);
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[($7_1 + 752 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[($7_1 + 756 | 0) >> 2] | 0;
          $740 = i64toi32_i32$5;
          $740$hi = i64toi32_i32$4;
          i64toi32_i32$1 = ($7_1 + 752 | 0) + 8 | 0;
          i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $744 = i64toi32_i32$4;
          $744$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[($7_1 + 768 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[($7_1 + 772 | 0) >> 2] | 0;
          $746 = i64toi32_i32$5;
          $746$hi = i64toi32_i32$4;
          i64toi32_i32$1 = ($7_1 + 768 | 0) + 8 | 0;
          i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $750 = i64toi32_i32$4;
          $750$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $740$hi;
          i64toi32_i32$4 = $744$hi;
          i64toi32_i32$1 = $746$hi;
          i64toi32_i32$3 = $750$hi;
          $80($7_1 + 736 | 0 | 0, $740 | 0, i64toi32_i32$5 | 0, $744 | 0, i64toi32_i32$4 | 0, $746 | 0, i64toi32_i32$1 | 0, $750 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$4 = ($7_1 + 736 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
          $19_1 = i64toi32_i32$3;
          $19$hi = i64toi32_i32$1;
          i64toi32_i32$4 = $7_1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 736 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 740 | 0) >> 2] | 0;
          $18_1 = i64toi32_i32$1;
          $18$hi = i64toi32_i32$3;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (4 | 0)) {
           continue label$62
          }
          break label$62;
         };
         $87($7_1 + 720 | 0 | 0, $5_1 | 0);
         i64toi32_i32$3 = $18$hi;
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$4 = $7_1;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 720 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 724 | 0) >> 2] | 0;
         $769 = i64toi32_i32$3;
         $769$hi = i64toi32_i32$1;
         i64toi32_i32$4 = (i64toi32_i32$4 + 720 | 0) + 8 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
         $773 = i64toi32_i32$1;
         $773$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $18$hi;
         i64toi32_i32$1 = $19$hi;
         i64toi32_i32$4 = $769$hi;
         i64toi32_i32$5 = $773$hi;
         $92($7_1 + 704 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $769 | 0, i64toi32_i32$4 | 0, $773 | 0, i64toi32_i32$5 | 0);
         i64toi32_i32$1 = ($7_1 + 704 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $19_1 = i64toi32_i32$5;
         $19$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $18_1 = 0;
         $18$hi = i64toi32_i32$4;
         i64toi32_i32$1 = $7_1;
         i64toi32_i32$4 = HEAP32[($7_1 + 704 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7_1 + 708 | 0) >> 2] | 0;
         $20_1 = i64toi32_i32$4;
         $20$hi = i64toi32_i32$5;
         $13_1 = $16_1 + 113 | 0;
         $1_1 = $13_1 - $4_1 | 0;
         $15_1 = ($1_1 | 0) < ($3_1 | 0);
         $14_1 = $15_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
         if (($14_1 | 0) <= (112 | 0)) {
          break label$57
         }
         i64toi32_i32$5 = 0;
         $21_1 = 0;
         $21$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $23_1 = 0;
         $23$hi = i64toi32_i32$5;
         break label$54;
        }
        $16_1 = $15_1 + $16_1 | 0;
        $14_1 = $2_1;
        if (($11_1 | 0) == ($2_1 | 0)) {
         continue label$58
        }
        break label$58;
       };
       $12_1 = 1e9 >>> $15_1 | 0;
       $17_1 = (-1 << $15_1 | 0) ^ -1 | 0;
       $1_1 = 0;
       $14_1 = $11_1;
       label$64 : while (1) {
        $13_1 = ($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0;
        $815 = $13_1;
        $13_1 = HEAP32[$13_1 >> 2] | 0;
        $1_1 = ($13_1 >>> $15_1 | 0) + $1_1 | 0;
        HEAP32[$815 >> 2] = $1_1;
        $1_1 = ($11_1 | 0) == ($14_1 | 0) & !$1_1 | 0;
        $14_1 = $1_1 ? ($14_1 + 1 | 0) & 2047 | 0 : $14_1;
        $8_1 = $1_1 ? $8_1 + -9 | 0 : $8_1;
        $1_1 = Math_imul($13_1 & $17_1 | 0, $12_1);
        $11_1 = ($11_1 + 1 | 0) & 2047 | 0;
        if (($11_1 | 0) != ($2_1 | 0)) {
         continue label$64
        }
        break label$64;
       };
       if (!$1_1) {
        continue label$56
       }
       label$65 : {
        if (($9_1 | 0) == ($14_1 | 0)) {
         break label$65
        }
        HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $1_1;
        $2_1 = $9_1;
        continue label$55;
       }
       HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] | 0 | 1 | 0;
       continue label$56;
      }
      break label$56;
     };
     break label$55;
    };
    $85($7_1 + 656 | 0 | 0, +(+$49(+(1.0), 225 - $14_1 | 0 | 0)));
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 656 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 660 | 0) >> 2] | 0;
    $876 = i64toi32_i32$5;
    $876$hi = i64toi32_i32$4;
    i64toi32_i32$1 = ($7_1 + 656 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $880 = i64toi32_i32$4;
    $880$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$5 = $876$hi;
    i64toi32_i32$4 = $880$hi;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$3 = $19$hi;
    $50($7_1 + 688 | 0 | 0, $876 | 0, i64toi32_i32$5 | 0, $880 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = ($7_1 + 688 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$3;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 688 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 692 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$3;
    $85(i64toi32_i32$4 + 640 | 0 | 0, +(+$49(+(1.0), 113 - $14_1 | 0 | 0)));
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 640 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 644 | 0) >> 2] | 0;
    $899 = i64toi32_i32$3;
    $899$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 640 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $903 = i64toi32_i32$1;
    $903$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$4 = $899$hi;
    i64toi32_i32$5 = $903$hi;
    $53($7_1 + 672 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $899 | 0, i64toi32_i32$4 | 0, $903 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 672 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 676 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$5;
    $18$hi = i64toi32_i32$4;
    i64toi32_i32$1 = ($7_1 + 672 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$5;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$3 = $21$hi;
    $94($7_1 + 624 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 624 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 628 | 0) >> 2] | 0;
    $921 = i64toi32_i32$3;
    $921$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 624 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $925 = i64toi32_i32$1;
    $925$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$1 = $23$hi;
    i64toi32_i32$4 = $921$hi;
    i64toi32_i32$5 = $925$hi;
    $80($7_1 + 608 | 0 | 0, $22_1 | 0, i64toi32_i32$3 | 0, $23_1 | 0, i64toi32_i32$1 | 0, $921 | 0, i64toi32_i32$4 | 0, $925 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$1 = ($7_1 + 608 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 608 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 612 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$5;
   }
   label$66 : {
    $8_1 = ($11_1 + 4 | 0) & 2047 | 0;
    if (($8_1 | 0) == ($2_1 | 0)) {
     break label$66
    }
    label$67 : {
     label$68 : {
      $8_1 = HEAP32[(($7_1 + 784 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
      if ($8_1 >>> 0 > 499999999 >>> 0) {
       break label$68
      }
      label$69 : {
       if ($8_1) {
        break label$69
       }
       if ((($11_1 + 5 | 0) & 2047 | 0 | 0) == ($2_1 | 0)) {
        break label$67
       }
      }
      $85($7_1 + 496 | 0 | 0, +(+($5_1 | 0) * .25));
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 496 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($7_1 + 500 | 0) >> 2] | 0;
      $962 = i64toi32_i32$5;
      $962$hi = i64toi32_i32$4;
      i64toi32_i32$1 = ($7_1 + 496 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $966 = i64toi32_i32$4;
      $966$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $962$hi;
      i64toi32_i32$3 = $966$hi;
      $80($7_1 + 480 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $962 | 0, i64toi32_i32$1 | 0, $966 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$4 = ($7_1 + 480 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$3;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 480 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 484 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$3;
      break label$67;
     }
     label$70 : {
      if (($8_1 | 0) == (5e8 | 0)) {
       break label$70
      }
      $85($7_1 + 592 | 0 | 0, +(+($5_1 | 0) * .75));
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 592 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 596 | 0) >> 2] | 0;
      $985 = i64toi32_i32$3;
      $985$hi = i64toi32_i32$1;
      i64toi32_i32$4 = (i64toi32_i32$4 + 592 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $989 = i64toi32_i32$1;
      $989$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$4 = $985$hi;
      i64toi32_i32$5 = $989$hi;
      $80($7_1 + 576 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $985 | 0, i64toi32_i32$4 | 0, $989 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = ($7_1 + 576 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 576 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7_1 + 580 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$4;
      $18$hi = i64toi32_i32$5;
      break label$67;
     }
     $24_1 = +($5_1 | 0);
     label$71 : {
      if ((($11_1 + 5 | 0) & 2047 | 0 | 0) != ($2_1 | 0)) {
       break label$71
      }
      $85($7_1 + 528 | 0 | 0, +($24_1 * .5));
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 528 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($7_1 + 532 | 0) >> 2] | 0;
      $1012 = i64toi32_i32$5;
      $1012$hi = i64toi32_i32$4;
      i64toi32_i32$1 = ($7_1 + 528 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $1016 = i64toi32_i32$4;
      $1016$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $1012$hi;
      i64toi32_i32$3 = $1016$hi;
      $80($7_1 + 512 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $1012 | 0, i64toi32_i32$1 | 0, $1016 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$4 = ($7_1 + 512 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$3;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 512 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 516 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$3;
      break label$67;
     }
     $85($7_1 + 560 | 0 | 0, +($24_1 * .75));
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 560 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 564 | 0) >> 2] | 0;
     $1032 = i64toi32_i32$3;
     $1032$hi = i64toi32_i32$1;
     i64toi32_i32$4 = (i64toi32_i32$4 + 560 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $1036 = i64toi32_i32$1;
     $1036$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$4 = $1032$hi;
     i64toi32_i32$5 = $1036$hi;
     $80($7_1 + 544 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $1032 | 0, i64toi32_i32$4 | 0, $1036 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$1 = ($7_1 + 544 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 544 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 548 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$5;
    }
    if (($14_1 | 0) > (111 | 0)) {
     break label$66
    }
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1073676288;
    $53($7_1 + 464 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 464 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 468 | 0) >> 2] | 0;
    $1050 = i64toi32_i32$3;
    $1050$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 464 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $1054 = i64toi32_i32$1;
    $1054$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1050$hi;
    i64toi32_i32$1 = $1054$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    if ($82($1050 | 0, i64toi32_i32$3 | 0, $1054 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0) {
     break label$66
    }
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1073676288;
    $80($7_1 + 448 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = ($7_1 + 448 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$3;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 448 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 452 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$3 = $18$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$4 = $18$hi;
   i64toi32_i32$5 = $21$hi;
   $80($7_1 + 432 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $18_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 432 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[($7_1 + 436 | 0) >> 2] | 0;
   $1075 = i64toi32_i32$5;
   $1075$hi = i64toi32_i32$4;
   i64toi32_i32$1 = ($7_1 + 432 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $1079 = i64toi32_i32$4;
   $1079$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $22$hi;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$5 = $1075$hi;
   i64toi32_i32$4 = $1079$hi;
   i64toi32_i32$1 = $22$hi;
   i64toi32_i32$3 = $23$hi;
   $94($7_1 + 416 | 0 | 0, $1075 | 0, i64toi32_i32$5 | 0, $1079 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$4 = ($7_1 + 416 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$3;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$1;
   $20$hi = i64toi32_i32$3;
   label$72 : {
    if (($13_1 & 2147483647 | 0 | 0) <= ($10_1 + -2 | 0 | 0)) {
     break label$72
    }
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $19$hi;
    $54($7_1 + 400 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1073610752;
    $92($7_1 + 384 | 0 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
    $1102 = i64toi32_i32$5;
    $1102$hi = i64toi32_i32$4;
    i64toi32_i32$3 = ($7_1 + 400 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $1106 = i64toi32_i32$4;
    $1106$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1102$hi;
    i64toi32_i32$4 = $1106$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 1081081856;
    $2_1 = $83($1102 | 0, i64toi32_i32$5 | 0, $1106 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$4 = ($7_1 + 384 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $1112 = i64toi32_i32$1;
    $1112$hi = i64toi32_i32$3;
    $13_1 = ($2_1 | 0) < (0 | 0);
    i64toi32_i32$0 = $13_1;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$1 = $1112$hi;
    i64toi32_i32$5 = i64toi32_i32$0 ? $19_1 : $1112;
    i64toi32_i32$4 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$1;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
    $1119 = i64toi32_i32$4;
    $1119$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $13_1;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$4 = $1119$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $20_1 : $1119;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    $20_1 = i64toi32_i32$3;
    $20$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 0;
    $11_1 = $82($18_1 | 0, $18$hi | 0, $21_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
    label$73 : {
     $16_1 = $16_1 + (($2_1 | 0) > (-1 | 0)) | 0;
     if (($16_1 + 110 | 0 | 0) > ($10_1 | 0)) {
      break label$73
     }
     if (!(($13_1 ? $15_1 : $15_1 & ($14_1 | 0) != ($1_1 | 0) | 0) & ($11_1 | 0) != (0 | 0) | 0)) {
      break label$72
     }
    }
    HEAP32[($14() | 0) >> 2] = 68;
   }
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$5 = $19$hi;
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   $51($7_1 + 368 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $16_1 | 0);
   i64toi32_i32$3 = ($7_1 + 368 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $18_1 = i64toi32_i32$1;
   $18$hi = i64toi32_i32$5;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 368 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 372 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $18_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $19$hi;
  HEAP32[i64toi32_i32$5 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $7_1 + 8976 | 0;
 }
 
 function $58($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $6$hi = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $89$hi = 0, $91_1 = 0, $91$hi = 0, $140$hi = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $3_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$1;
   }
   $3_1 = $48($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      switch ($3_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       label$8 : {
        label$9 : {
         $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$9
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
         $2_1 = HEAPU8[$2_1 >> 0] | 0;
         break label$8;
        }
        $2_1 = $48($0_1 | 0) | 0;
       }
       $4_1 = ($3_1 | 0) == (45 | 0);
       $5_1 = $2_1 + -58 | 0;
       if (!$1_1) {
        break label$5
       }
       if ($5_1 >>> 0 > -11 >>> 0) {
        break label$5
       }
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $18_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $19_1 = 0
         } else {
          $19_1 = 1
         }
         $20_1 = $19_1;
        } else {
         $20_1 = 0
        }
        $18_1 = $20_1;
       }
       if ($18_1) {
        break label$4
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       break label$4;
      default:
       break label$6;
      };
     }
     $5_1 = $3_1 + -58 | 0;
     $4_1 = 0;
     $2_1 = $3_1;
    }
    if ($5_1 >>> 0 < -10 >>> 0) {
     break label$4
    }
    i64toi32_i32$2 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$2;
    label$10 : {
     $5_1 = $2_1 + -48 | 0;
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$10
     }
     $3_1 = 0;
     label$11 : while (1) {
      $3_1 = $2_1 + Math_imul($3_1, 10) | 0;
      label$12 : {
       label$13 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$13
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$12;
       }
       $2_1 = $48($0_1 | 0) | 0;
      }
      $3_1 = $3_1 + -48 | 0;
      label$14 : {
       $5_1 = $2_1 + -48 | 0;
       if ($5_1 >>> 0 > 9 >>> 0) {
        break label$14
       }
       if (($3_1 | 0) < (214748364 | 0)) {
        continue label$11
       }
      }
      break label$11;
     };
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
     $6_1 = i64toi32_i32$1;
     $6$hi = i64toi32_i32$2;
    }
    label$15 : {
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$15
     }
     label$16 : while (1) {
      i64toi32_i32$2 = 0;
      $89$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $91_1 = i64toi32_i32$1;
      $91$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $89$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$1 = $91$hi;
      i64toi32_i32$0 = $91_1;
      i64toi32_i32$4 = $2_1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6_1 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      label$17 : {
       label$18 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$18
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$17;
       }
       $2_1 = $48($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -48;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      $5_1 = $2_1 + -48 | 0;
      if ($5_1 >>> 0 > 9 >>> 0) {
       break label$15
      }
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$2 = 21474836;
      i64toi32_i32$0 = 2061584302;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
       $21_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $22_1 = 0
        } else {
         $22_1 = 1
        }
        $23_1 = $22_1;
       } else {
        $23_1 = 0
       }
       $21_1 = $23_1;
      }
      if ($21_1) {
       continue label$16
      }
      break label$16;
     };
    }
    label$19 : {
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       label$22 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$22
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$21;
       }
       $2_1 = $48($0_1 | 0) | 0;
      }
      if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$20
      }
      break label$20;
     };
    }
    label$23 : {
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$5 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
      $24_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
        $25_1 = 0
       } else {
        $25_1 = 1
       }
       $26_1 = $25_1;
      } else {
       $26_1 = 0
      }
      $24_1 = $26_1;
     }
     if ($24_1) {
      break label$23
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    i64toi32_i32$1 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    $140$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = $140$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$5;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
    $6_1 = i64toi32_i32$5;
    $6$hi = i64toi32_i32$0;
    break label$3;
   }
   i64toi32_i32$0 = -2147483648;
   $6_1 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$4 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
    $27_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0) {
      $28_1 = 0
     } else {
      $28_1 = 1
     }
     $29_1 = $28_1;
    } else {
     $29_1 = 0
    }
    $27_1 = $29_1;
   }
   if ($27_1) {
    break label$3
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$4 = -2147483648;
   i64toi32_i32$5 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
   return i64toi32_i32$5 | 0;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$4 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$4 | 0;
 }
 
 function $59($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $5_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $9$hi = 0, $9_1 = 0, $7_1 = 0, $10$hi = 0, $11$hi = 0, $10_1 = 0, $11_1 = 0, $12$hi = 0, $6_1 = 0, $12_1 = 0, $4_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $8_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $193 = 0, $193$hi = 0, $250 = 0, $250$hi = 0, $417$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 > 36 >>> 0) {
      break label$3
     }
     if (($1_1 | 0) != (1 | 0)) {
      break label$2
     }
    }
    HEAP32[($14() | 0) >> 2] = 28;
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    break label$1;
   }
   label$4 : while (1) {
    label$5 : {
     label$6 : {
      $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$6
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
      $5_1 = HEAPU8[$5_1 >> 0] | 0;
      break label$5;
     }
     $5_1 = $48($0_1 | 0) | 0;
    }
    if ($45($5_1 | 0) | 0) {
     continue label$4
    }
    break label$4;
   };
   $6_1 = 0;
   label$7 : {
    label$8 : {
     switch ($5_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$8;
     default:
      break label$7;
     };
    }
    $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
    label$9 : {
     $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
      break label$9
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
     $5_1 = HEAPU8[$5_1 >> 0] | 0;
     break label$7;
    }
    $5_1 = $48($0_1 | 0) | 0;
   }
   label$10 : {
    label$11 : {
     label$12 : {
      label$13 : {
       label$14 : {
        if (($1_1 | 0) != (0 | 0) & ($1_1 | 0) != (16 | 0) | 0) {
         break label$14
        }
        if (($5_1 | 0) != (48 | 0)) {
         break label$14
        }
        label$15 : {
         label$16 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$16
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$15;
         }
         $5_1 = $48($0_1 | 0) | 0;
        }
        label$17 : {
         if (($5_1 & -33 | 0 | 0) != (88 | 0)) {
          break label$17
         }
         label$18 : {
          label$19 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$19
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$18;
          }
          $5_1 = $48($0_1 | 0) | 0;
         }
         $1_1 = 16;
         if ((HEAPU8[($5_1 + 1665 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
          break label$12
         }
         i64toi32_i32$0 = 0;
         $3_1 = 0;
         $3$hi = i64toi32_i32$0;
         label$20 : {
          label$21 : {
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 0;
           if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
            $29_1 = 1
           } else {
            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
             if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
              $30_1 = 0
             } else {
              $30_1 = 1
             }
             $31_1 = $30_1;
            } else {
             $31_1 = 0
            }
            $29_1 = $31_1;
           }
           if ($29_1) {
            break label$21
           }
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
           if (!$2_1) {
            break label$20
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -2 | 0;
           break label$1;
          }
          if ($2_1) {
           break label$1
          }
         }
         i64toi32_i32$2 = 0;
         $3_1 = 0;
         $3$hi = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         $47($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
         break label$1;
        }
        if ($1_1) {
         break label$13
        }
        $1_1 = 8;
        break label$12;
       }
       $1_1 = $1_1 ? $1_1 : 10;
       if ($1_1 >>> 0 > (HEAPU8[($5_1 + 1665 | 0) >> 0] | 0) >>> 0) {
        break label$13
       }
       i64toi32_i32$2 = 0;
       $3_1 = 0;
       $3$hi = i64toi32_i32$2;
       label$22 : {
        i64toi32_i32$3 = $0_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $32_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
           $33_1 = 0
          } else {
           $33_1 = 1
          }
          $34_1 = $33_1;
         } else {
          $34_1 = 0
         }
         $32_1 = $34_1;
        }
        if ($32_1) {
         break label$22
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       i64toi32_i32$3 = 0;
       $47($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
       HEAP32[($14() | 0) >> 2] = 28;
       break label$1;
      }
      if (($1_1 | 0) != (10 | 0)) {
       break label$12
      }
      i64toi32_i32$3 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$3;
      label$23 : {
       $2_1 = $5_1 + -48 | 0;
       if ($2_1 >>> 0 > 9 >>> 0) {
        break label$23
       }
       $1_1 = 0;
       label$24 : while (1) {
        $1_1 = Math_imul($1_1, 10);
        label$25 : {
         label$26 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$26
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$25;
         }
         $5_1 = $48($0_1 | 0) | 0;
        }
        $1_1 = $1_1 + $2_1 | 0;
        label$27 : {
         $2_1 = $5_1 + -48 | 0;
         if ($2_1 >>> 0 > 9 >>> 0) {
          break label$27
         }
         if ($1_1 >>> 0 < 429496729 >>> 0) {
          continue label$24
         }
        }
        break label$24;
       };
       i64toi32_i32$3 = 0;
       $9_1 = $1_1;
       $9$hi = i64toi32_i32$3;
      }
      label$28 : {
       if ($2_1 >>> 0 > 9 >>> 0) {
        break label$28
       }
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$1 = 0;
       i64toi32_i32$1 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $10_1 = i64toi32_i32$1;
       $10$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       $11_1 = $2_1;
       $11$hi = i64toi32_i32$3;
       label$29 : while (1) {
        label$30 : {
         label$31 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$31
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$30;
         }
         $5_1 = $48($0_1 | 0) | 0;
        }
        i64toi32_i32$3 = $10$hi;
        i64toi32_i32$3 = $11$hi;
        i64toi32_i32$3 = $10$hi;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = $11$hi;
        i64toi32_i32$2 = $11_1;
        i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $9_1 = i64toi32_i32$4;
        $9$hi = i64toi32_i32$5;
        $2_1 = $5_1 + -48 | 0;
        if ($2_1 >>> 0 > 9 >>> 0) {
         break label$28
        }
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$3 = $9_1;
        i64toi32_i32$0 = 429496729;
        i64toi32_i32$2 = -1717986918;
        if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
         break label$28
        }
        i64toi32_i32$3 = $9$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        $10_1 = i64toi32_i32$5;
        $10$hi = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        $11_1 = $2_1;
        $11$hi = i64toi32_i32$3;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$5 = -1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
        $193 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
        $193$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$3 = $10_1;
        i64toi32_i32$2 = $193$hi;
        i64toi32_i32$0 = $193;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
         continue label$29
        }
        break label$29;
       };
       $1_1 = 10;
       break label$11;
      }
      $1_1 = 10;
      if ($2_1 >>> 0 <= 9 >>> 0) {
       break label$11
      }
      break label$10;
     }
     label$32 : {
      if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
       break label$32
      }
      i64toi32_i32$3 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$3;
      label$33 : {
       $7_1 = HEAPU8[($5_1 + 1665 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $7_1 >>> 0) {
        break label$33
       }
       $2_1 = 0;
       label$34 : while (1) {
        $2_1 = Math_imul($2_1, $1_1);
        label$35 : {
         label$36 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$36
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$35;
         }
         $5_1 = $48($0_1 | 0) | 0;
        }
        $2_1 = $7_1 + $2_1 | 0;
        label$37 : {
         $7_1 = HEAPU8[($5_1 + 1665 | 0) >> 0] | 0;
         if ($1_1 >>> 0 <= $7_1 >>> 0) {
          break label$37
         }
         if ($2_1 >>> 0 < 119304647 >>> 0) {
          continue label$34
         }
        }
        break label$34;
       };
       i64toi32_i32$3 = 0;
       $9_1 = $2_1;
       $9$hi = i64toi32_i32$3;
      }
      if ($1_1 >>> 0 <= $7_1 >>> 0) {
       break label$11
      }
      i64toi32_i32$3 = 0;
      $10_1 = $1_1;
      $10$hi = i64toi32_i32$3;
      label$38 : while (1) {
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $11_1 = i64toi32_i32$5;
       $11$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = $7_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 255;
       i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
       $12_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
       $12$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $12_1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$2 = -1;
       i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
       $250 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
       $250$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$5 = $11_1;
       i64toi32_i32$3 = $250$hi;
       i64toi32_i32$2 = $250;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$11
       }
       label$39 : {
        label$40 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$40
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$39;
        }
        $5_1 = $48($0_1 | 0) | 0;
       }
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$5 = $12$hi;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$2 = $11_1;
       i64toi32_i32$0 = $12$hi;
       i64toi32_i32$3 = $12_1;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $9_1 = i64toi32_i32$1;
       $9$hi = i64toi32_i32$4;
       $7_1 = HEAPU8[($5_1 + 1665 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $7_1 >>> 0) {
        break label$11
       }
       i64toi32_i32$4 = $10$hi;
       i64toi32_i32$4 = $9$hi;
       i64toi32_i32$4 = $10$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = $9$hi;
       i64toi32_i32$3 = 0;
       $93($4_1 | 0, $10_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, $9_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 0;
       if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$11
       }
       continue label$38;
      };
     }
     $8_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 1921 | 0) >> 0] | 0;
     i64toi32_i32$2 = 0;
     $9_1 = 0;
     $9$hi = i64toi32_i32$2;
     label$41 : {
      $2_1 = HEAPU8[($5_1 + 1665 | 0) >> 0] | 0;
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$41
      }
      $7_1 = 0;
      label$42 : while (1) {
       $7_1 = $7_1 << $8_1 | 0;
       label$43 : {
        label$44 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$44
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$43;
        }
        $5_1 = $48($0_1 | 0) | 0;
       }
       $7_1 = $2_1 | $7_1 | 0;
       label$45 : {
        $2_1 = HEAPU8[($5_1 + 1665 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break label$45
        }
        if ($7_1 >>> 0 < 134217728 >>> 0) {
         continue label$42
        }
       }
       break label$42;
      };
      i64toi32_i32$2 = 0;
      $9_1 = $7_1;
      $9$hi = i64toi32_i32$2;
     }
     if ($1_1 >>> 0 <= $2_1 >>> 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $11_1 = $8_1;
     $11$hi = i64toi32_i32$2;
     i64toi32_i32$2 = -1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $35_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $35_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $12_1 = $35_1;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$4 = $9$hi;
     i64toi32_i32$3 = $9_1;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$11
     }
     label$46 : while (1) {
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$3 = $9_1;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$4 = $11_1;
      i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $36_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $36_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $9_1 = $36_1;
      $9$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 255;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $10_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
      $10$hi = i64toi32_i32$3;
      label$47 : {
       label$48 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$48
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $5_1 = HEAPU8[$5_1 >> 0] | 0;
        break label$47;
       }
       $5_1 = $48($0_1 | 0) | 0;
      }
      i64toi32_i32$3 = $9$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$3 = $9$hi;
      i64toi32_i32$5 = $9_1;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$4 = $10_1;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $9_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $9$hi = i64toi32_i32$2;
      $2_1 = HEAPU8[($5_1 + 1665 | 0) >> 0] | 0;
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$11
      }
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$3 = $9_1;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$4 = $12_1;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
       continue label$46
      }
      break label$46;
     };
    }
    if ($1_1 >>> 0 <= (HEAPU8[($5_1 + 1665 | 0) >> 0] | 0) >>> 0) {
     break label$10
    }
    label$49 : while (1) {
     label$50 : {
      label$51 : {
       $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$51
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
       $5_1 = HEAPU8[$5_1 >> 0] | 0;
       break label$50;
      }
      $5_1 = $48($0_1 | 0) | 0;
     }
     if ($1_1 >>> 0 > (HEAPU8[($5_1 + 1665 | 0) >> 0] | 0) >>> 0) {
      continue label$49
     }
     break label$49;
    };
    HEAP32[($14() | 0) >> 2] = 68;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$4 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $6_1 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0) ? $6_1 : 0;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$2 = i64toi32_i32$3;
    $9_1 = i64toi32_i32$4;
    $9$hi = i64toi32_i32$3;
   }
   label$52 : {
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
     $37_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$5 >>> 0) {
       $38_1 = 0
      } else {
       $38_1 = 1
      }
      $39_1 = $38_1;
     } else {
      $39_1 = 0
     }
     $37_1 = $39_1;
    }
    if ($37_1) {
     break label$52
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   label$53 : {
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$5 = $9_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$53
    }
    label$54 : {
     i64toi32_i32$5 = $3$hi;
     if ($3_1 & 1 | 0) {
      break label$54
     }
     if ($6_1) {
      break label$54
     }
     HEAP32[($14() | 0) >> 2] = 68;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$5 = $9_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3_1;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
     break label$53
    }
    HEAP32[($14() | 0) >> 2] = 68;
    break label$1;
   }
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
   $417$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $417$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$0 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function $60() {
  return 42 | 0;
 }
 
 function $61() {
  return $60() | 0 | 0;
 }
 
 function $62() {
  return 34984 | 0;
 }
 
 function $63() {
  HEAP32[(0 + 35072 | 0) >> 2] = 34960;
  HEAP32[(0 + 35e3 | 0) >> 2] = $61() | 0;
 }
 
 function $64($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $8_1 = 0, $4_1 = 0, $7_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = $3_1 ? $3_1 : 35096;
  $3_1 = HEAP32[$5_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1_1) {
       break label$4
      }
      if ($3_1) {
       break label$3
      }
      $6_1 = 0;
      break label$1;
     }
     $6_1 = -2;
     if (!$2_1) {
      break label$1
     }
     $7_1 = $0_1 ? $0_1 : $4_1 + 12 | 0;
     label$5 : {
      label$6 : {
       if (!$3_1) {
        break label$6
       }
       $0_1 = $2_1;
       break label$5;
      }
      label$7 : {
       $3_1 = HEAPU8[$1_1 >> 0] | 0;
       $0_1 = ($3_1 << 24 | 0) >> 24 | 0;
       if (($0_1 | 0) < (0 | 0)) {
        break label$7
       }
       HEAP32[$7_1 >> 2] = $3_1;
       $6_1 = ($0_1 | 0) != (0 | 0);
       break label$1;
      }
      $3_1 = $62() | 0;
      $0_1 = HEAP8[$1_1 >> 0] | 0;
      label$8 : {
       if (HEAP32[(HEAP32[($3_1 + 88 | 0) >> 2] | 0) >> 2] | 0) {
        break label$8
       }
       HEAP32[$7_1 >> 2] = $0_1 & 57343 | 0;
       $6_1 = 1;
       break label$1;
      }
      $3_1 = ($0_1 & 255 | 0) + -194 | 0;
      if ($3_1 >>> 0 > 50 >>> 0) {
       break label$3
      }
      $3_1 = HEAP32[(($3_1 << 2 | 0) + 1936 | 0) >> 2] | 0;
      $0_1 = $2_1 + -1 | 0;
      if (!$0_1) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
     }
     $8_1 = HEAPU8[$1_1 >> 0] | 0;
     $9_1 = $8_1 >>> 3 | 0;
     if (($9_1 + -16 | 0 | (($3_1 >> 26 | 0) + $9_1 | 0) | 0) >>> 0 > 7 >>> 0) {
      break label$3
     }
     label$9 : while (1) {
      $0_1 = $0_1 + -1 | 0;
      label$10 : {
       $3_1 = ($8_1 & 255 | 0) + -128 | 0 | ($3_1 << 6 | 0) | 0;
       if (($3_1 | 0) < (0 | 0)) {
        break label$10
       }
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$7_1 >> 2] = $3_1;
       $6_1 = $2_1 - $0_1 | 0;
       break label$1;
      }
      if (!$0_1) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
      $8_1 = HEAPU8[$1_1 >> 0] | 0;
      if (($8_1 & 192 | 0 | 0) == (128 | 0)) {
       continue label$9
      }
      break label$9;
     };
    }
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[($14() | 0) >> 2] = 25;
    $6_1 = -1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $65($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return !(HEAP32[$0_1 >> 2] | 0) | 0;
 }
 
 function $66($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $11_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $6_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $15_1 = 0, $3_1 = 0, $9_1 = 0, $14_1 = 0, $12_1 = 0, $5_1 = 0, $18$hi = 0, $13_1 = 0, $19$hi = 0, $16_1 = 0, $18_1 = 0, $10_1 = 0, $19_1 = 0, $20$hi = 0, $7_1 = 0, $17_1 = 0, $20_1 = 0, i64toi32_i32$6 = 0, $4_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $8_1 = 0, $76$hi = 0, $78$hi = 0, $83_1 = 0, $83$hi = 0, $143$hi = 0, $145$hi = 0, $151 = 0, $151$hi = 0, $209 = 0, $219 = 0, $281$hi = 0, $283$hi = 0, $288 = 0, $288$hi = 0, $328 = 0, $328$hi = 0, $334 = 0, $334$hi = 0, $335$hi = 0, $434 = 0, $434$hi = 0, $440 = 0, $440$hi = 0, $441$hi = 0, $655 = 0, $655$hi = 0, $660 = 0, $660$hi = 0, $686$hi = 0, $688$hi = 0, $694 = 0, $694$hi = 0;
  $3_1 = global$0 - 304 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4_1 = $15($0_1 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
       break label$5
      }
      $44($0_1 | 0) | 0;
      if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
       break label$5
      }
      $5_1 = 0;
      break label$4;
     }
     label$6 : {
      $6_1 = HEAPU8[$1_1 >> 0] | 0;
      if ($6_1) {
       break label$6
      }
      $7_1 = 0;
      break label$2;
     }
     $8_1 = $3_1 + 16 | 0;
     i64toi32_i32$0 = 0;
     $18_1 = 0;
     $18$hi = i64toi32_i32$0;
     $7_1 = 0;
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : while (1) {
           label$13 : {
            label$14 : {
             if (!($45($6_1 & 255 | 0 | 0) | 0)) {
              break label$14
             }
             label$15 : while (1) {
              $6_1 = $1_1;
              $1_1 = $6_1 + 1 | 0;
              if ($45(HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
               continue label$15
              }
              break label$15;
             };
             i64toi32_i32$0 = 0;
             $47($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
             label$16 : while (1) {
              label$17 : {
               label$18 : {
                $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                 break label$18
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                $1_1 = HEAPU8[$1_1 >> 0] | 0;
                break label$17;
               }
               $1_1 = $48($0_1 | 0) | 0;
              }
              if ($45($1_1 | 0) | 0) {
               continue label$16
              }
              break label$16;
             };
             $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             label$19 : {
              i64toi32_i32$2 = $0_1;
              i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 0;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
               $63_1 = 1
              } else {
               if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
                 $64_1 = 0
                } else {
                 $64_1 = 1
                }
                $65_1 = $64_1;
               } else {
                $65_1 = 0
               }
               $63_1 = $65_1;
              }
              if ($63_1) {
               break label$19
              }
              $1_1 = $1_1 + -1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
             }
             i64toi32_i32$3 = $0_1;
             i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
             $76$hi = i64toi32_i32$1;
             i64toi32_i32$1 = $18$hi;
             i64toi32_i32$1 = $76$hi;
             i64toi32_i32$3 = i64toi32_i32$2;
             i64toi32_i32$2 = $18$hi;
             i64toi32_i32$0 = $18_1;
             i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
             i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
             if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $78$hi = i64toi32_i32$5;
             i64toi32_i32$3 = $1_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
             $83_1 = i64toi32_i32$3;
             $83$hi = i64toi32_i32$5;
             i64toi32_i32$5 = $78$hi;
             i64toi32_i32$1 = i64toi32_i32$4;
             i64toi32_i32$3 = $83$hi;
             i64toi32_i32$0 = $83_1;
             i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
             i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
             }
             $18_1 = i64toi32_i32$2;
             $18$hi = i64toi32_i32$4;
             break label$13;
            }
            label$20 : {
             label$21 : {
              label$22 : {
               label$23 : {
                if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (37 | 0)) {
                 break label$23
                }
                $6_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                if (($6_1 | 0) == (42 | 0)) {
                 break label$22
                }
                if (($6_1 | 0) != (37 | 0)) {
                 break label$21
                }
               }
               i64toi32_i32$4 = 0;
               $47($0_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
               label$24 : {
                label$25 : {
                 if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (37 | 0)) {
                  break label$25
                 }
                 label$26 : while (1) {
                  label$27 : {
                   label$28 : {
                    $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                    if (($6_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                     break label$28
                    }
                    HEAP32[($0_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
                    $6_1 = HEAPU8[$6_1 >> 0] | 0;
                    break label$27;
                   }
                   $6_1 = $48($0_1 | 0) | 0;
                  }
                  if ($45($6_1 | 0) | 0) {
                   continue label$26
                  }
                  break label$26;
                 };
                 $1_1 = $1_1 + 1 | 0;
                 break label$24;
                }
                label$29 : {
                 $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if (($6_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                  break label$29
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
                 $6_1 = HEAPU8[$6_1 >> 0] | 0;
                 break label$24;
                }
                $6_1 = $48($0_1 | 0) | 0;
               }
               label$30 : {
                if (($6_1 | 0) == (HEAPU8[$1_1 >> 0] | 0 | 0)) {
                 break label$30
                }
                label$31 : {
                 i64toi32_i32$5 = $0_1;
                 i64toi32_i32$4 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
                 i64toi32_i32$5 = i64toi32_i32$4;
                 i64toi32_i32$4 = 0;
                 i64toi32_i32$0 = 0;
                 if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
                  $66_1 = 1
                 } else {
                  if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
                   if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
                    $67_1 = 0
                   } else {
                    $67_1 = 1
                   }
                   $68_1 = $67_1;
                  } else {
                   $68_1 = 0
                  }
                  $66_1 = $68_1;
                 }
                 if ($66_1) {
                  break label$31
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
                }
                if (($6_1 | 0) > (-1 | 0)) {
                 break label$2
                }
                $5_1 = 0;
                if ($7_1) {
                 break label$2
                }
                break label$4;
               }
               i64toi32_i32$0 = $0_1;
               i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
               $143$hi = i64toi32_i32$1;
               i64toi32_i32$1 = $18$hi;
               i64toi32_i32$1 = $143$hi;
               i64toi32_i32$0 = i64toi32_i32$5;
               i64toi32_i32$5 = $18$hi;
               i64toi32_i32$4 = $18_1;
               i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
               i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
               if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
               }
               $145$hi = i64toi32_i32$2;
               i64toi32_i32$0 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
               i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
               $151 = i64toi32_i32$0;
               $151$hi = i64toi32_i32$2;
               i64toi32_i32$2 = $145$hi;
               i64toi32_i32$1 = i64toi32_i32$3;
               i64toi32_i32$0 = $151$hi;
               i64toi32_i32$4 = $151;
               i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
               i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
               if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
                i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
               }
               $18_1 = i64toi32_i32$5;
               $18$hi = i64toi32_i32$3;
               $6_1 = $1_1;
               break label$13;
              }
              $6_1 = $1_1 + 2 | 0;
              $9_1 = 0;
              break label$20;
             }
             label$32 : {
              if (!($22($6_1 | 0) | 0)) {
               break label$32
              }
              if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
               break label$32
              }
              $6_1 = $1_1 + 3 | 0;
              $9_1 = $67($2_1 | 0, (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0 | 0) | 0;
              break label$20;
             }
             $6_1 = $1_1 + 1 | 0;
             $9_1 = HEAP32[$2_1 >> 2] | 0;
             $2_1 = $2_1 + 4 | 0;
            }
            $10_1 = 0;
            $1_1 = 0;
            label$33 : {
             if (!($22(HEAPU8[$6_1 >> 0] | 0 | 0) | 0)) {
              break label$33
             }
             label$34 : while (1) {
              $1_1 = (Math_imul($1_1, 10) + (HEAPU8[$6_1 >> 0] | 0) | 0) + -48 | 0;
              $11_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
              $6_1 = $6_1 + 1 | 0;
              if ($22($11_1 | 0) | 0) {
               continue label$34
              }
              break label$34;
             };
            }
            label$35 : {
             label$36 : {
              $12_1 = HEAPU8[$6_1 >> 0] | 0;
              if (($12_1 | 0) == (109 | 0)) {
               break label$36
              }
              $11_1 = $6_1;
              break label$35;
             }
             $11_1 = $6_1 + 1 | 0;
             $13_1 = 0;
             $10_1 = ($9_1 | 0) != (0 | 0);
             $12_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
             $14_1 = 0;
            }
            $6_1 = $11_1 + 1 | 0;
            $15_1 = 3;
            $5_1 = $10_1;
            label$37 : {
             label$38 : {
              switch (($12_1 & 255 | 0) + -65 | 0 | 0) {
              case 39:
               $209 = $11_1 + 2 | 0;
               $11_1 = (HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
               $6_1 = $11_1 ? $209 : $6_1;
               $15_1 = $11_1 ? -2 : -1;
               break label$37;
              case 43:
               $219 = $11_1 + 2 | 0;
               $11_1 = (HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
               $6_1 = $11_1 ? $219 : $6_1;
               $15_1 = $11_1 ? 3 : 1;
               break label$37;
              case 51:
              case 57:
               $15_1 = 1;
               break label$37;
              case 11:
               $15_1 = 2;
               break label$37;
              case 41:
               break label$37;
              case 0:
              case 2:
              case 4:
              case 5:
              case 6:
              case 18:
              case 23:
              case 26:
              case 32:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 40:
              case 45:
              case 46:
              case 47:
              case 50:
              case 52:
              case 55:
               break label$38;
              default:
               break label$7;
              };
             }
             $15_1 = 0;
             $6_1 = $11_1;
            }
            $11_1 = HEAPU8[$6_1 >> 0] | 0;
            $12_1 = ($11_1 & 47 | 0 | 0) == (3 | 0);
            $5_1 = $12_1 ? 1 : $15_1;
            label$43 : {
             $16_1 = $12_1 ? $11_1 | 32 | 0 : $11_1;
             if (($16_1 | 0) == (91 | 0)) {
              break label$43
             }
             label$44 : {
              label$45 : {
               if (($16_1 | 0) == (110 | 0)) {
                break label$45
               }
               if (($16_1 | 0) != (99 | 0)) {
                break label$44
               }
               $1_1 = ($1_1 | 0) > (1 | 0) ? $1_1 : 1;
               break label$43;
              }
              i64toi32_i32$3 = $18$hi;
              $68($9_1 | 0, $5_1 | 0, $18_1 | 0, i64toi32_i32$3 | 0);
              break label$13;
             }
             i64toi32_i32$3 = 0;
             $47($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
             label$46 : while (1) {
              label$47 : {
               label$48 : {
                $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if (($11_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                 break label$48
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $11_1 + 1 | 0;
                $11_1 = HEAPU8[$11_1 >> 0] | 0;
                break label$47;
               }
               $11_1 = $48($0_1 | 0) | 0;
              }
              if ($45($11_1 | 0) | 0) {
               continue label$46
              }
              break label$46;
             };
             $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             label$49 : {
              i64toi32_i32$2 = $0_1;
              i64toi32_i32$3 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
              i64toi32_i32$2 = i64toi32_i32$3;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = 0;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
               $69_1 = 1
              } else {
               if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
                if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$4 >>> 0) {
                 $70_1 = 0
                } else {
                 $70_1 = 1
                }
                $71_1 = $70_1;
               } else {
                $71_1 = 0
               }
               $69_1 = $71_1;
              }
              if ($69_1) {
               break label$49
              }
              $11_1 = $11_1 + -1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $11_1;
             }
             i64toi32_i32$4 = $0_1;
             i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
             $281$hi = i64toi32_i32$1;
             i64toi32_i32$1 = $18$hi;
             i64toi32_i32$1 = $281$hi;
             i64toi32_i32$4 = i64toi32_i32$2;
             i64toi32_i32$2 = $18$hi;
             i64toi32_i32$3 = $18_1;
             i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
             i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
             if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $283$hi = i64toi32_i32$5;
             i64toi32_i32$4 = $11_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
             $288 = i64toi32_i32$4;
             $288$hi = i64toi32_i32$5;
             i64toi32_i32$5 = $283$hi;
             i64toi32_i32$1 = i64toi32_i32$0;
             i64toi32_i32$4 = $288$hi;
             i64toi32_i32$3 = $288;
             i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
             i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
             }
             $18_1 = i64toi32_i32$2;
             $18$hi = i64toi32_i32$0;
            }
            i64toi32_i32$1 = $1_1;
            i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
            $19_1 = i64toi32_i32$1;
            $19$hi = i64toi32_i32$0;
            $47($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
            label$50 : {
             label$51 : {
              $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if (($11_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
               break label$51
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $11_1 + 1 | 0;
              break label$50;
             }
             if (($48($0_1 | 0) | 0 | 0) < (0 | 0)) {
              break label$8
             }
            }
            label$52 : {
             i64toi32_i32$5 = $0_1;
             i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
             i64toi32_i32$5 = i64toi32_i32$0;
             i64toi32_i32$0 = 0;
             i64toi32_i32$3 = 0;
             if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
              $72_1 = 1
             } else {
              if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
               if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
                $73_1 = 0
               } else {
                $73_1 = 1
               }
               $74_1 = $73_1;
              } else {
               $74_1 = 0
              }
              $72_1 = $74_1;
             }
             if ($72_1) {
              break label$52
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
            }
            $11_1 = 16;
            label$53 : {
             label$54 : {
              label$55 : {
               label$56 : {
                label$57 : {
                 switch ($16_1 + -88 | 0 | 0) {
                 default:
                  $1_1 = $16_1 + -65 | 0;
                  if ($1_1 >>> 0 > 6 >>> 0) {
                   break label$53
                  }
                  if (!((1 << $1_1 | 0) & 113 | 0)) {
                   break label$53
                  }
                 case 9:
                 case 13:
                 case 14:
                 case 15:
                  $55($3_1 + 8 | 0 | 0, $0_1 | 0, $5_1 | 0, 0 | 0);
                  i64toi32_i32$3 = $0_1;
                  i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                  $328 = i64toi32_i32$5;
                  $328$hi = i64toi32_i32$1;
                  i64toi32_i32$5 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
                  i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
                  $334 = i64toi32_i32$5;
                  $334$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$5 = $334$hi;
                  i64toi32_i32$0 = $334;
                  i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
                  i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
                  i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                  i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
                  $335$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $328$hi;
                  i64toi32_i32$1 = $328;
                  i64toi32_i32$3 = $335$hi;
                  i64toi32_i32$0 = i64toi32_i32$4;
                  if ((i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
                   break label$55
                  }
                  break label$9;
                 case 3:
                 case 11:
                 case 27:
                  label$63 : {
                   if (($16_1 | 16 | 0 | 0) != (115 | 0)) {
                    break label$63
                   }
                   $13($3_1 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                   HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                   if (($16_1 | 0) != (115 | 0)) {
                    break label$54
                   }
                   HEAP8[($3_1 + 65 | 0) >> 0] = 0;
                   HEAP8[($3_1 + 46 | 0) >> 0] = 0;
                   $75_1 = 0;
                   HEAP16[($3_1 + 42 | 0) >> 1] = $75_1;
                   HEAP16[($3_1 + 44 | 0) >> 1] = $75_1 >>> 16 | 0;
                   break label$54;
                  }
                  $15_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                  $11_1 = ($15_1 | 0) == (94 | 0);
                  $13($3_1 + 32 | 0 | 0, $11_1 | 0, 257 | 0) | 0;
                  HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                  $12_1 = $11_1 ? $6_1 + 2 | 0 : $6_1 + 1 | 0;
                  label$64 : {
                   label$65 : {
                    label$66 : {
                     label$67 : {
                      $6_1 = HEAPU8[($6_1 + ($11_1 ? 2 : 1) | 0) >> 0] | 0;
                      if (($6_1 | 0) == (45 | 0)) {
                       break label$67
                      }
                      if (($6_1 | 0) == (93 | 0)) {
                       break label$66
                      }
                      $15_1 = ($15_1 | 0) != (94 | 0);
                      $6_1 = $12_1;
                      break label$64;
                     }
                     $15_1 = ($15_1 | 0) != (94 | 0);
                     HEAP8[($3_1 + 78 | 0) >> 0] = $15_1;
                     break label$65;
                    }
                    $15_1 = ($15_1 | 0) != (94 | 0);
                    HEAP8[($3_1 + 126 | 0) >> 0] = $15_1;
                   }
                   $6_1 = $12_1 + 1 | 0;
                  }
                  label$68 : while (1) {
                   label$69 : {
                    label$70 : {
                     $11_1 = HEAPU8[$6_1 >> 0] | 0;
                     if (($11_1 | 0) == (45 | 0)) {
                      break label$70
                     }
                     if (!$11_1) {
                      break label$8
                     }
                     if (($11_1 | 0) == (93 | 0)) {
                      break label$54
                     }
                     break label$69;
                    }
                    $11_1 = 45;
                    $17_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                    if (!$17_1) {
                     break label$69
                    }
                    if (($17_1 | 0) == (93 | 0)) {
                     break label$69
                    }
                    $12_1 = $6_1 + 1 | 0;
                    label$71 : {
                     label$72 : {
                      $6_1 = HEAPU8[($6_1 + -1 | 0) >> 0] | 0;
                      if ($6_1 >>> 0 < $17_1 >>> 0) {
                       break label$72
                      }
                      $11_1 = $17_1;
                      break label$71;
                     }
                     label$73 : while (1) {
                      $6_1 = $6_1 + 1 | 0;
                      HEAP8[(($3_1 + 32 | 0) + $6_1 | 0) >> 0] = $15_1;
                      $11_1 = HEAPU8[$12_1 >> 0] | 0;
                      if ($6_1 >>> 0 < $11_1 >>> 0) {
                       continue label$73
                      }
                      break label$73;
                     };
                    }
                    $6_1 = $12_1;
                   }
                   HEAP8[(($11_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] = $15_1;
                   $6_1 = $6_1 + 1 | 0;
                   continue label$68;
                  };
                 case 23:
                  $11_1 = 8;
                  break label$56;
                 case 12:
                 case 29:
                  $11_1 = 10;
                  break label$56;
                 case 1:
                 case 2:
                 case 4:
                 case 5:
                 case 6:
                 case 7:
                 case 8:
                 case 10:
                 case 16:
                 case 18:
                 case 19:
                 case 20:
                 case 21:
                 case 22:
                 case 25:
                 case 26:
                 case 28:
                 case 30:
                 case 31:
                  break label$53;
                 case 0:
                 case 24:
                 case 32:
                  break label$56;
                 case 17:
                  break label$57;
                 };
                }
                $11_1 = 0;
               }
               i64toi32_i32$1 = -1;
               i64toi32_i32$1 = $59($0_1 | 0, $11_1 | 0, 0 | 0, -1 | 0, i64toi32_i32$1 | 0) | 0;
               i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
               $19_1 = i64toi32_i32$1;
               $19$hi = i64toi32_i32$2;
               i64toi32_i32$0 = $0_1;
               i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
               $434 = i64toi32_i32$2;
               $434$hi = i64toi32_i32$1;
               i64toi32_i32$2 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
               i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
               $440 = i64toi32_i32$2;
               $440$hi = i64toi32_i32$1;
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               i64toi32_i32$2 = $440$hi;
               i64toi32_i32$3 = $440;
               i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
               i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
               i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
               i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
               $441$hi = i64toi32_i32$4;
               i64toi32_i32$4 = $434$hi;
               i64toi32_i32$1 = $434;
               i64toi32_i32$0 = $441$hi;
               i64toi32_i32$3 = i64toi32_i32$5;
               if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) | 0) {
                break label$9
               }
               label$74 : {
                if (($16_1 | 0) != (112 | 0)) {
                 break label$74
                }
                if (!$9_1) {
                 break label$74
                }
                i64toi32_i32$1 = $19$hi;
                HEAP32[$9_1 >> 2] = $19_1;
                break label$53;
               }
               i64toi32_i32$1 = $19$hi;
               $68($9_1 | 0, $5_1 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
               break label$53;
              }
              if (!$9_1) {
               break label$53
              }
              i64toi32_i32$3 = $8_1;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $19_1 = i64toi32_i32$1;
              $19$hi = i64toi32_i32$4;
              i64toi32_i32$3 = $3_1;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
              $20_1 = i64toi32_i32$4;
              $20$hi = i64toi32_i32$1;
              label$75 : {
               switch ($5_1 | 0) {
               case 0:
                i64toi32_i32$1 = $20$hi;
                i64toi32_i32$1 = $19$hi;
                i64toi32_i32$1 = $20$hi;
                i64toi32_i32$4 = $19$hi;
                HEAPF32[$9_1 >> 2] = Math_fround($96($20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$4 | 0));
                break label$53;
               case 1:
                i64toi32_i32$4 = $20$hi;
                i64toi32_i32$4 = $19$hi;
                i64toi32_i32$4 = $20$hi;
                i64toi32_i32$1 = $19$hi;
                HEAPF64[$9_1 >> 3] = +$95($20_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
                break label$53;
               case 2:
                break label$75;
               default:
                break label$53;
               };
              }
              i64toi32_i32$1 = $20$hi;
              i64toi32_i32$4 = $9_1;
              HEAP32[i64toi32_i32$4 >> 2] = $20_1;
              HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$1 = $19$hi;
              HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $19_1;
              HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
              break label$53;
             }
             $12_1 = ($16_1 | 0) == (99 | 0);
             $15_1 = $12_1 ? $1_1 + 1 | 0 : 31;
             label$78 : {
              label$79 : {
               if (($5_1 | 0) != (1 | 0)) {
                break label$79
               }
               $11_1 = $9_1;
               label$80 : {
                if (!$10_1) {
                 break label$80
                }
                $11_1 = $73($15_1 << 2 | 0 | 0) | 0;
                if (!$11_1) {
                 break label$10
                }
               }
               i64toi32_i32$4 = $3_1;
               i64toi32_i32$1 = 0;
               HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] = 0;
               HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] = i64toi32_i32$1;
               $1_1 = 0;
               $17_1 = ($10_1 | 0) != (0 | 0);
               label$81 : while (1) {
                $14_1 = $11_1;
                label$82 : {
                 label$83 : while (1) {
                  label$84 : {
                   label$85 : {
                    $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                    if (($11_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                     break label$85
                    }
                    HEAP32[($0_1 + 4 | 0) >> 2] = $11_1 + 1 | 0;
                    $11_1 = HEAPU8[$11_1 >> 0] | 0;
                    break label$84;
                   }
                   $11_1 = $48($0_1 | 0) | 0;
                  }
                  if (!(HEAPU8[(($11_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                   break label$82
                  }
                  HEAP8[($3_1 + 27 | 0) >> 0] = $11_1;
                  $11_1 = $64($3_1 + 28 | 0 | 0, $3_1 + 27 | 0 | 0, 1 | 0, $3_1 + 296 | 0 | 0) | 0;
                  if (($11_1 | 0) == (-2 | 0)) {
                   continue label$83
                  }
                  $13_1 = 0;
                  if (($11_1 | 0) == (-1 | 0)) {
                   break label$8
                  }
                  label$86 : {
                   if (!$14_1) {
                    break label$86
                   }
                   HEAP32[($14_1 + ($1_1 << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                   $1_1 = $1_1 + 1 | 0;
                  }
                  if (($17_1 & ($1_1 | 0) == ($15_1 | 0) | 0 | 0) != (1 | 0)) {
                   continue label$83
                  }
                  break label$83;
                 };
                 $5_1 = 1;
                 $15_1 = $15_1 << 1 | 0 | 1 | 0;
                 $11_1 = $75($14_1 | 0, $15_1 << 2 | 0 | 0) | 0;
                 if ($11_1) {
                  continue label$81
                 }
                 break label$7;
                }
                break label$81;
               };
               $13_1 = 0;
               $15_1 = $14_1;
               if (!($65($3_1 + 296 | 0 | 0) | 0)) {
                break label$8
               }
               break label$78;
              }
              label$87 : {
               if (!$10_1) {
                break label$87
               }
               $1_1 = 0;
               $11_1 = $73($15_1 | 0) | 0;
               if (!$11_1) {
                break label$10
               }
               label$88 : while (1) {
                $14_1 = $11_1;
                label$89 : while (1) {
                 label$90 : {
                  label$91 : {
                   $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                   if (($11_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                    break label$91
                   }
                   HEAP32[($0_1 + 4 | 0) >> 2] = $11_1 + 1 | 0;
                   $11_1 = HEAPU8[$11_1 >> 0] | 0;
                   break label$90;
                  }
                  $11_1 = $48($0_1 | 0) | 0;
                 }
                 label$92 : {
                  if (HEAPU8[(($11_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                   break label$92
                  }
                  $15_1 = 0;
                  $13_1 = $14_1;
                  break label$78;
                 }
                 HEAP8[($14_1 + $1_1 | 0) >> 0] = $11_1;
                 $1_1 = $1_1 + 1 | 0;
                 if (($1_1 | 0) != ($15_1 | 0)) {
                  continue label$89
                 }
                 break label$89;
                };
                $5_1 = 1;
                $15_1 = $15_1 << 1 | 0 | 1 | 0;
                $11_1 = $75($14_1 | 0, $15_1 | 0) | 0;
                if ($11_1) {
                 continue label$88
                }
                break label$88;
               };
               $13_1 = $14_1;
               $14_1 = 0;
               break label$7;
              }
              $1_1 = 0;
              label$93 : {
               if (!$9_1) {
                break label$93
               }
               label$94 : while (1) {
                label$95 : {
                 label$96 : {
                  $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                  if (($11_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                   break label$96
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = $11_1 + 1 | 0;
                  $11_1 = HEAPU8[$11_1 >> 0] | 0;
                  break label$95;
                 }
                 $11_1 = $48($0_1 | 0) | 0;
                }
                label$97 : {
                 if (HEAPU8[(($11_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                  break label$97
                 }
                 $15_1 = 0;
                 $14_1 = $9_1;
                 $13_1 = $9_1;
                 break label$78;
                }
                HEAP8[($9_1 + $1_1 | 0) >> 0] = $11_1;
                $1_1 = $1_1 + 1 | 0;
                continue label$94;
               };
              }
              label$98 : while (1) {
               label$99 : {
                label$100 : {
                 $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                  break label$100
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                 $1_1 = HEAPU8[$1_1 >> 0] | 0;
                 break label$99;
                }
                $1_1 = $48($0_1 | 0) | 0;
               }
               if (HEAPU8[(($1_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                continue label$98
               }
               break label$98;
              };
              $14_1 = 0;
              $13_1 = 0;
              $15_1 = 0;
              $1_1 = 0;
             }
             $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             label$101 : {
              i64toi32_i32$3 = $0_1;
              i64toi32_i32$1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
              i64toi32_i32$3 = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 0;
              if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
               $76_1 = 1
              } else {
               if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
                if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
                 $77_1 = 0
                } else {
                 $77_1 = 1
                }
                $78_1 = $77_1;
               } else {
                $78_1 = 0
               }
               $76_1 = $78_1;
              }
              if ($76_1) {
               break label$101
              }
              $11_1 = $11_1 + -1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $11_1;
             }
             i64toi32_i32$0 = $0_1;
             i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
             i64toi32_i32$4 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
             $655 = i64toi32_i32$3;
             $655$hi = i64toi32_i32$4;
             i64toi32_i32$3 = $11_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$4 = i64toi32_i32$3 >> 31 | 0;
             $660 = i64toi32_i32$3;
             $660$hi = i64toi32_i32$4;
             i64toi32_i32$4 = $655$hi;
             i64toi32_i32$0 = $655;
             i64toi32_i32$3 = $660$hi;
             i64toi32_i32$1 = $660;
             i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
             i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $20_1 = i64toi32_i32$2;
             $20$hi = i64toi32_i32$5;
             if (!(i64toi32_i32$2 | i64toi32_i32$5 | 0)) {
              break label$11
             }
             label$102 : {
              if (($16_1 | 0) != (99 | 0)) {
               break label$102
              }
              i64toi32_i32$5 = $20$hi;
              i64toi32_i32$5 = $19$hi;
              i64toi32_i32$5 = $20$hi;
              i64toi32_i32$4 = $20_1;
              i64toi32_i32$0 = $19$hi;
              i64toi32_i32$1 = $19_1;
              if ((i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0) {
               break label$11
              }
             }
             label$103 : {
              if (!$10_1) {
               break label$103
              }
              HEAP32[$9_1 >> 2] = $14_1;
             }
             label$104 : {
              if ($12_1) {
               break label$104
              }
              label$105 : {
               if (!$15_1) {
                break label$105
               }
               HEAP32[($15_1 + ($1_1 << 2 | 0) | 0) >> 2] = 0;
              }
              label$106 : {
               if ($13_1) {
                break label$106
               }
               $13_1 = 0;
               break label$104;
              }
              HEAP8[($13_1 + $1_1 | 0) >> 0] = 0;
             }
             $14_1 = $15_1;
            }
            i64toi32_i32$1 = $0_1;
            i64toi32_i32$4 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
            i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
            $686$hi = i64toi32_i32$5;
            i64toi32_i32$5 = $18$hi;
            i64toi32_i32$5 = $686$hi;
            i64toi32_i32$1 = i64toi32_i32$4;
            i64toi32_i32$4 = $18$hi;
            i64toi32_i32$0 = $18_1;
            i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
            i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
             i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
            }
            $688$hi = i64toi32_i32$2;
            i64toi32_i32$1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
            i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
            $694 = i64toi32_i32$1;
            $694$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $688$hi;
            i64toi32_i32$5 = i64toi32_i32$3;
            i64toi32_i32$1 = $694$hi;
            i64toi32_i32$0 = $694;
            i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
            i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
            if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
            }
            $18_1 = i64toi32_i32$4;
            $18$hi = i64toi32_i32$3;
            $7_1 = $7_1 + (($9_1 | 0) != (0 | 0)) | 0;
           }
           $1_1 = $6_1 + 1 | 0;
           $6_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
           if ($6_1) {
            continue label$12
           }
           break label$2;
          };
         }
         $14_1 = $15_1;
         break label$9;
        }
        $5_1 = 1;
        $13_1 = 0;
        $14_1 = 0;
        break label$7;
       }
       $5_1 = $10_1;
       break label$3;
      }
      $5_1 = $10_1;
     }
     if ($7_1) {
      break label$3
     }
    }
    $7_1 = -1;
   }
   if (!$5_1) {
    break label$2
   }
   $74($13_1 | 0);
   $74($14_1 | 0);
  }
  label$107 : {
   if (!$4_1) {
    break label$107
   }
   $16($0_1 | 0);
  }
  global$0 = $3_1 + 304 | 0;
  return $7_1 | 0;
 }
 
 function $67($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $1_1 = $0_1 + ($1_1 >>> 0 > 1 >>> 0 ? ($1_1 << 2 | 0) + -4 | 0 : 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = $1_1 + 4 | 0;
  return HEAP32[$1_1 >> 2] | 0 | 0;
 }
 
 function $68($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + 2 | 0 | 0) {
    case 0:
     i64toi32_i32$0 = $2$hi;
     HEAP8[$0_1 >> 0] = $2_1;
     return;
    case 1:
     i64toi32_i32$0 = $2$hi;
     HEAP16[$0_1 >> 1] = $2_1;
     return;
    case 2:
    case 3:
     i64toi32_i32$0 = $2$hi;
     HEAP32[$0_1 >> 2] = $2_1;
     return;
    case 5:
     break label$2;
    default:
     break label$1;
    };
   }
   i64toi32_i32$0 = $2$hi;
   HEAP32[$0_1 >> 2] = $2_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $69($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  $3_1 = $13($3_1 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($3_1 + 76 | 0) >> 2] = -1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = 4;
  HEAP32[($3_1 + 84 | 0) >> 2] = $0_1;
  $0_1 = $66($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 144 | 0;
  return $0_1 | 0;
 }
 
 function $70($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $4_1 = $2_1 + 256 | 0;
  $5_1 = $23($3_1 | 0, 0 | 0, $4_1 | 0) | 0;
  $4_1 = $5_1 ? $5_1 - $3_1 | 0 : $4_1;
  $2_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
  $26($1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
  $4_1 = $3_1 + $4_1 | 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + $2_1 | 0;
  return $2_1 | 0;
 }
 
 function $71($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($62() | 0) + 88 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      HEAP32[($14() | 0) >> 2] = 25;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[($14() | 0) >> 2] = 25;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $72($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $71($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $73($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $3_1 = 0, $2_1 = 0, $11_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $1_1 = 0, $79_1 = 0, $92_1 = 0, $103_1 = 0, $111 = 0, $119 = 0, $209 = 0, $220 = 0, $228 = 0, $236 = 0, $271 = 0, $338 = 0, $345 = 0, $352 = 0, $443 = 0, $454 = 0, $462 = 0, $470 = 0, $1156 = 0, $1163 = 0, $1170 = 0, $1292 = 0, $1294 = 0, $1354 = 0, $1361 = 0, $1368 = 0, $1599 = 0, $1606 = 0, $1613 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if ($0_1 >>> 0 > 244 >>> 0) {
               break label$12
              }
              label$13 : {
               $2_1 = HEAP32[(0 + 35100 | 0) >> 2] | 0;
               $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
               $4_1 = $3_1 >>> 3 | 0;
               $0_1 = $2_1 >>> $4_1 | 0;
               if (!($0_1 & 3 | 0)) {
                break label$13
               }
               label$14 : {
                label$15 : {
                 $5_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
                 $4_1 = $5_1 << 3 | 0;
                 $0_1 = $4_1 + 35140 | 0;
                 $4_1 = HEAP32[($4_1 + 35148 | 0) >> 2] | 0;
                 $3_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                 if (($0_1 | 0) != ($3_1 | 0)) {
                  break label$15
                 }
                 HEAP32[(0 + 35100 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
                 break label$14;
                }
                HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
                HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
               }
               $0_1 = $4_1 + 8 | 0;
               $5_1 = $5_1 << 3 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
               $4_1 = $4_1 + $5_1 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
               break label$1;
              }
              $6_1 = HEAP32[(0 + 35108 | 0) >> 2] | 0;
              if ($3_1 >>> 0 <= $6_1 >>> 0) {
               break label$11
              }
              label$16 : {
               if (!$0_1) {
                break label$16
               }
               label$17 : {
                label$18 : {
                 $79_1 = $0_1 << $4_1 | 0;
                 $0_1 = 2 << $4_1 | 0;
                 $0_1 = $79_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
                 $0_1 = ($0_1 + -1 | 0) & ($0_1 ^ -1 | 0) | 0;
                 $92_1 = $0_1;
                 $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                 $4_1 = $92_1 >>> $0_1 | 0;
                 $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                 $103_1 = $5_1 | $0_1 | 0;
                 $0_1 = $4_1 >>> $5_1 | 0;
                 $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                 $111 = $103_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                 $119 = $111 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                 $4_1 = ($119 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0;
                 $0_1 = $4_1 << 3 | 0;
                 $5_1 = $0_1 + 35140 | 0;
                 $0_1 = HEAP32[($0_1 + 35148 | 0) >> 2] | 0;
                 $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                 if (($5_1 | 0) != ($7_1 | 0)) {
                  break label$18
                 }
                 $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
                 HEAP32[(0 + 35100 | 0) >> 2] = $2_1;
                 break label$17;
                }
                HEAP32[($7_1 + 12 | 0) >> 2] = $5_1;
                HEAP32[($5_1 + 8 | 0) >> 2] = $7_1;
               }
               HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               $7_1 = $0_1 + $3_1 | 0;
               $4_1 = $4_1 << 3 | 0;
               $5_1 = $4_1 - $3_1 | 0;
               HEAP32[($7_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
               HEAP32[($0_1 + $4_1 | 0) >> 2] = $5_1;
               label$19 : {
                if (!$6_1) {
                 break label$19
                }
                $3_1 = ($6_1 & -8 | 0) + 35140 | 0;
                $4_1 = HEAP32[(0 + 35120 | 0) >> 2] | 0;
                label$20 : {
                 label$21 : {
                  $8_1 = 1 << ($6_1 >>> 3 | 0) | 0;
                  if ($2_1 & $8_1 | 0) {
                   break label$21
                  }
                  HEAP32[(0 + 35100 | 0) >> 2] = $2_1 | $8_1 | 0;
                  $8_1 = $3_1;
                  break label$20;
                 }
                 $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                }
                HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
               }
               $0_1 = $0_1 + 8 | 0;
               HEAP32[(0 + 35120 | 0) >> 2] = $7_1;
               HEAP32[(0 + 35108 | 0) >> 2] = $5_1;
               break label$1;
              }
              $9_1 = HEAP32[(0 + 35104 | 0) >> 2] | 0;
              if (!$9_1) {
               break label$11
              }
              $0_1 = ($9_1 + -1 | 0) & ($9_1 ^ -1 | 0) | 0;
              $209 = $0_1;
              $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
              $4_1 = $209 >>> $0_1 | 0;
              $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
              $220 = $5_1 | $0_1 | 0;
              $0_1 = $4_1 >>> $5_1 | 0;
              $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
              $228 = $220 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
              $236 = $228 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
              $7_1 = HEAP32[(((($236 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 35404 | 0) >> 2] | 0;
              $4_1 = ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
              $5_1 = $7_1;
              label$22 : {
               label$23 : while (1) {
                label$24 : {
                 $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                 if ($0_1) {
                  break label$24
                 }
                 $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                 if (!$0_1) {
                  break label$22
                 }
                }
                $5_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $271 = $5_1;
                $5_1 = $5_1 >>> 0 < $4_1 >>> 0;
                $4_1 = $5_1 ? $271 : $4_1;
                $7_1 = $5_1 ? $0_1 : $7_1;
                $5_1 = $0_1;
                continue label$23;
               };
              }
              $10_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
              label$25 : {
               $8_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
               if (($8_1 | 0) == ($7_1 | 0)) {
                break label$25
               }
               $0_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
               HEAP32[(0 + 35116 | 0) >> 2] | 0;
               HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
               HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
               break label$2;
              }
              label$26 : {
               $5_1 = $7_1 + 20 | 0;
               $0_1 = HEAP32[$5_1 >> 2] | 0;
               if ($0_1) {
                break label$26
               }
               $0_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$10
               }
               $5_1 = $7_1 + 16 | 0;
              }
              label$27 : while (1) {
               $11_1 = $5_1;
               $8_1 = $0_1;
               $5_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$5_1 >> 2] | 0;
               if ($0_1) {
                continue label$27
               }
               $5_1 = $8_1 + 16 | 0;
               $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$27
               }
               break label$27;
              };
              HEAP32[$11_1 >> 2] = 0;
              break label$2;
             }
             $3_1 = -1;
             if ($0_1 >>> 0 > -65 >>> 0) {
              break label$11
             }
             $0_1 = $0_1 + 11 | 0;
             $3_1 = $0_1 & -8 | 0;
             $6_1 = HEAP32[(0 + 35104 | 0) >> 2] | 0;
             if (!$6_1) {
              break label$11
             }
             $11_1 = 0;
             label$28 : {
              if ($3_1 >>> 0 < 256 >>> 0) {
               break label$28
              }
              $11_1 = 31;
              if ($3_1 >>> 0 > 16777215 >>> 0) {
               break label$28
              }
              $0_1 = $0_1 >>> 8 | 0;
              $338 = $0_1;
              $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
              $4_1 = $338 << $0_1 | 0;
              $345 = $4_1;
              $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
              $5_1 = $345 << $4_1 | 0;
              $352 = $5_1;
              $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
              $0_1 = (($352 << $5_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $5_1 | 0) | 0;
              $11_1 = ($0_1 << 1 | 0 | (($3_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
             }
             $4_1 = 0 - $3_1 | 0;
             label$29 : {
              label$30 : {
               label$31 : {
                label$32 : {
                 $5_1 = HEAP32[(($11_1 << 2 | 0) + 35404 | 0) >> 2] | 0;
                 if ($5_1) {
                  break label$32
                 }
                 $0_1 = 0;
                 $8_1 = 0;
                 break label$31;
                }
                $0_1 = 0;
                $7_1 = $3_1 << (($11_1 | 0) == (31 | 0) ? 0 : 25 - ($11_1 >>> 1 | 0) | 0) | 0;
                $8_1 = 0;
                label$33 : while (1) {
                 label$34 : {
                  $2_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                  if ($2_1 >>> 0 >= $4_1 >>> 0) {
                   break label$34
                  }
                  $4_1 = $2_1;
                  $8_1 = $5_1;
                  if ($4_1) {
                   break label$34
                  }
                  $4_1 = 0;
                  $8_1 = $5_1;
                  $0_1 = $5_1;
                  break label$30;
                 }
                 $2_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                 $5_1 = HEAP32[(($5_1 + (($7_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                 $0_1 = $2_1 ? (($2_1 | 0) == ($5_1 | 0) ? $0_1 : $2_1) : $0_1;
                 $7_1 = $7_1 << 1 | 0;
                 if ($5_1) {
                  continue label$33
                 }
                 break label$33;
                };
               }
               label$35 : {
                if ($0_1 | $8_1 | 0) {
                 break label$35
                }
                $8_1 = 0;
                $0_1 = 2 << $11_1 | 0;
                $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $6_1 | 0;
                if (!$0_1) {
                 break label$11
                }
                $0_1 = ($0_1 + -1 | 0) & ($0_1 ^ -1 | 0) | 0;
                $443 = $0_1;
                $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                $5_1 = $443 >>> $0_1 | 0;
                $7_1 = ($5_1 >>> 5 | 0) & 8 | 0;
                $454 = $7_1 | $0_1 | 0;
                $0_1 = $5_1 >>> $7_1 | 0;
                $5_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                $462 = $454 | $5_1 | 0;
                $0_1 = $0_1 >>> $5_1 | 0;
                $5_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                $470 = $462 | $5_1 | 0;
                $0_1 = $0_1 >>> $5_1 | 0;
                $5_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                $0_1 = HEAP32[(((($470 | $5_1 | 0) + ($0_1 >>> $5_1 | 0) | 0) << 2 | 0) + 35404 | 0) >> 2] | 0;
               }
               if (!$0_1) {
                break label$29
               }
              }
              label$36 : while (1) {
               $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $7_1 = $2_1 >>> 0 < $4_1 >>> 0;
               label$37 : {
                $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                if ($5_1) {
                 break label$37
                }
                $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
               }
               $4_1 = $7_1 ? $2_1 : $4_1;
               $8_1 = $7_1 ? $0_1 : $8_1;
               $0_1 = $5_1;
               if ($0_1) {
                continue label$36
               }
               break label$36;
              };
             }
             if (!$8_1) {
              break label$11
             }
             if ($4_1 >>> 0 >= ((HEAP32[(0 + 35108 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
              break label$11
             }
             $11_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
             label$38 : {
              $7_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
              if (($7_1 | 0) == ($8_1 | 0)) {
               break label$38
              }
              $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
              HEAP32[(0 + 35116 | 0) >> 2] | 0;
              HEAP32[($0_1 + 12 | 0) >> 2] = $7_1;
              HEAP32[($7_1 + 8 | 0) >> 2] = $0_1;
              break label$3;
             }
             label$39 : {
              $5_1 = $8_1 + 20 | 0;
              $0_1 = HEAP32[$5_1 >> 2] | 0;
              if ($0_1) {
               break label$39
              }
              $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$9
              }
              $5_1 = $8_1 + 16 | 0;
             }
             label$40 : while (1) {
              $2_1 = $5_1;
              $7_1 = $0_1;
              $5_1 = $0_1 + 20 | 0;
              $0_1 = HEAP32[$5_1 >> 2] | 0;
              if ($0_1) {
               continue label$40
              }
              $5_1 = $7_1 + 16 | 0;
              $0_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
              if ($0_1) {
               continue label$40
              }
              break label$40;
             };
             HEAP32[$2_1 >> 2] = 0;
             break label$3;
            }
            label$41 : {
             $0_1 = HEAP32[(0 + 35108 | 0) >> 2] | 0;
             if ($0_1 >>> 0 < $3_1 >>> 0) {
              break label$41
             }
             $4_1 = HEAP32[(0 + 35120 | 0) >> 2] | 0;
             label$42 : {
              label$43 : {
               $5_1 = $0_1 - $3_1 | 0;
               if ($5_1 >>> 0 < 16 >>> 0) {
                break label$43
               }
               HEAP32[(0 + 35108 | 0) >> 2] = $5_1;
               $7_1 = $4_1 + $3_1 | 0;
               HEAP32[(0 + 35120 | 0) >> 2] = $7_1;
               HEAP32[($7_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
               HEAP32[($4_1 + $0_1 | 0) >> 2] = $5_1;
               HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               break label$42;
              }
              HEAP32[(0 + 35120 | 0) >> 2] = 0;
              HEAP32[(0 + 35108 | 0) >> 2] = 0;
              HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
              $0_1 = $4_1 + $0_1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
             }
             $0_1 = $4_1 + 8 | 0;
             break label$1;
            }
            label$44 : {
             $7_1 = HEAP32[(0 + 35112 | 0) >> 2] | 0;
             if ($7_1 >>> 0 <= $3_1 >>> 0) {
              break label$44
             }
             $4_1 = $7_1 - $3_1 | 0;
             HEAP32[(0 + 35112 | 0) >> 2] = $4_1;
             $0_1 = HEAP32[(0 + 35124 | 0) >> 2] | 0;
             $5_1 = $0_1 + $3_1 | 0;
             HEAP32[(0 + 35124 | 0) >> 2] = $5_1;
             HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
             HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
             $0_1 = $0_1 + 8 | 0;
             break label$1;
            }
            label$45 : {
             label$46 : {
              if (!(HEAP32[(0 + 35572 | 0) >> 2] | 0)) {
               break label$46
              }
              $4_1 = HEAP32[(0 + 35580 | 0) >> 2] | 0;
              break label$45;
             }
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = -1;
             HEAP32[(i64toi32_i32$1 + 35584 | 0) >> 2] = -1;
             HEAP32[(i64toi32_i32$1 + 35588 | 0) >> 2] = i64toi32_i32$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = 4096;
             HEAP32[(i64toi32_i32$1 + 35576 | 0) >> 2] = 4096;
             HEAP32[(i64toi32_i32$1 + 35580 | 0) >> 2] = i64toi32_i32$0;
             HEAP32[(0 + 35572 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
             HEAP32[(0 + 35592 | 0) >> 2] = 0;
             HEAP32[(0 + 35544 | 0) >> 2] = 0;
             $4_1 = 4096;
            }
            $0_1 = 0;
            $6_1 = $3_1 + 47 | 0;
            $2_1 = $4_1 + $6_1 | 0;
            $11_1 = 0 - $4_1 | 0;
            $8_1 = $2_1 & $11_1 | 0;
            if ($8_1 >>> 0 <= $3_1 >>> 0) {
             break label$1
            }
            $0_1 = 0;
            label$47 : {
             $4_1 = HEAP32[(0 + 35540 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$47
             }
             $5_1 = HEAP32[(0 + 35532 | 0) >> 2] | 0;
             $9_1 = $5_1 + $8_1 | 0;
             if ($9_1 >>> 0 <= $5_1 >>> 0) {
              break label$1
             }
             if ($9_1 >>> 0 > $4_1 >>> 0) {
              break label$1
             }
            }
            if ((HEAPU8[(0 + 35544 | 0) >> 0] | 0) & 4 | 0) {
             break label$6
            }
            label$48 : {
             label$49 : {
              label$50 : {
               $4_1 = HEAP32[(0 + 35124 | 0) >> 2] | 0;
               if (!$4_1) {
                break label$50
               }
               $0_1 = 35548;
               label$51 : while (1) {
                label$52 : {
                 $5_1 = HEAP32[$0_1 >> 2] | 0;
                 if ($5_1 >>> 0 > $4_1 >>> 0) {
                  break label$52
                 }
                 if (($5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                  break label$49
                 }
                }
                $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                if ($0_1) {
                 continue label$51
                }
                break label$51;
               };
              }
              $7_1 = $79(0 | 0) | 0;
              if (($7_1 | 0) == (-1 | 0)) {
               break label$7
              }
              $2_1 = $8_1;
              label$53 : {
               $0_1 = HEAP32[(0 + 35576 | 0) >> 2] | 0;
               $4_1 = $0_1 + -1 | 0;
               if (!($4_1 & $7_1 | 0)) {
                break label$53
               }
               $2_1 = ($8_1 - $7_1 | 0) + (($4_1 + $7_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
              }
              if ($2_1 >>> 0 <= $3_1 >>> 0) {
               break label$7
              }
              if ($2_1 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              label$54 : {
               $0_1 = HEAP32[(0 + 35540 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$54
               }
               $4_1 = HEAP32[(0 + 35532 | 0) >> 2] | 0;
               $5_1 = $4_1 + $2_1 | 0;
               if ($5_1 >>> 0 <= $4_1 >>> 0) {
                break label$7
               }
               if ($5_1 >>> 0 > $0_1 >>> 0) {
                break label$7
               }
              }
              $0_1 = $79($2_1 | 0) | 0;
              if (($0_1 | 0) != ($7_1 | 0)) {
               break label$48
              }
              break label$5;
             }
             $2_1 = ($2_1 - $7_1 | 0) & $11_1 | 0;
             if ($2_1 >>> 0 > 2147483646 >>> 0) {
              break label$7
             }
             $7_1 = $79($2_1 | 0) | 0;
             if (($7_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
              break label$8
             }
             $0_1 = $7_1;
            }
            label$55 : {
             if (($0_1 | 0) == (-1 | 0)) {
              break label$55
             }
             if (($3_1 + 48 | 0) >>> 0 <= $2_1 >>> 0) {
              break label$55
             }
             label$56 : {
              $4_1 = HEAP32[(0 + 35580 | 0) >> 2] | 0;
              $4_1 = (($6_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
              if ($4_1 >>> 0 <= 2147483646 >>> 0) {
               break label$56
              }
              $7_1 = $0_1;
              break label$5;
             }
             label$57 : {
              if (($79($4_1 | 0) | 0 | 0) == (-1 | 0)) {
               break label$57
              }
              $2_1 = $4_1 + $2_1 | 0;
              $7_1 = $0_1;
              break label$5;
             }
             $79(0 - $2_1 | 0 | 0) | 0;
             break label$7;
            }
            $7_1 = $0_1;
            if (($0_1 | 0) != (-1 | 0)) {
             break label$5
            }
            break label$7;
           }
           $8_1 = 0;
           break label$2;
          }
          $7_1 = 0;
          break label$3;
         }
         if (($7_1 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 35544 | 0) >> 2] = HEAP32[(0 + 35544 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8_1 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $7_1 = $79($8_1 | 0) | 0;
       $0_1 = $79(0 | 0) | 0;
       if (($7_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if ($7_1 >>> 0 >= $0_1 >>> 0) {
        break label$4
       }
       $2_1 = $0_1 - $7_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break label$4
       }
      }
      $0_1 = (HEAP32[(0 + 35532 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 35532 | 0) >> 2] = $0_1;
      label$58 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 35536 | 0) >> 2] | 0) >>> 0) {
        break label$58
       }
       HEAP32[(0 + 35536 | 0) >> 2] = $0_1;
      }
      label$59 : {
       label$60 : {
        label$61 : {
         label$62 : {
          $4_1 = HEAP32[(0 + 35124 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$62
          }
          $0_1 = 35548;
          label$63 : while (1) {
           $5_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($7_1 | 0) == ($5_1 + $8_1 | 0 | 0)) {
            break label$61
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$63
           }
           break label$60;
          };
         }
         label$64 : {
          label$65 : {
           $0_1 = HEAP32[(0 + 35116 | 0) >> 2] | 0;
           if (!$0_1) {
            break label$65
           }
           if ($7_1 >>> 0 >= $0_1 >>> 0) {
            break label$64
           }
          }
          HEAP32[(0 + 35116 | 0) >> 2] = $7_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 35552 | 0) >> 2] = $2_1;
         HEAP32[(0 + 35548 | 0) >> 2] = $7_1;
         HEAP32[(0 + 35132 | 0) >> 2] = -1;
         HEAP32[(0 + 35136 | 0) >> 2] = HEAP32[(0 + 35572 | 0) >> 2] | 0;
         HEAP32[(0 + 35560 | 0) >> 2] = 0;
         label$66 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $5_1 = $4_1 + 35140 | 0;
          HEAP32[($4_1 + 35148 | 0) >> 2] = $5_1;
          HEAP32[($4_1 + 35152 | 0) >> 2] = $5_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label$66
          }
          break label$66;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = ($7_1 + 8 | 0) & 7 | 0 ? (-8 - $7_1 | 0) & 7 | 0 : 0;
         $5_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 35112 | 0) >> 2] = $5_1;
         $4_1 = $7_1 + $4_1 | 0;
         HEAP32[(0 + 35124 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
         HEAP32[(($7_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 35128 | 0) >> 2] = HEAP32[(0 + 35588 | 0) >> 2] | 0;
         break label$59;
        }
        if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$60
        }
        if ($4_1 >>> 0 < $5_1 >>> 0) {
         break label$60
        }
        if ($4_1 >>> 0 >= $7_1 >>> 0) {
         break label$60
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
        $5_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 35124 | 0) >> 2] = $5_1;
        $7_1 = (HEAP32[(0 + 35112 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $7_1 - $0_1 | 0;
        HEAP32[(0 + 35112 | 0) >> 2] = $0_1;
        HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $7_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 35128 | 0) >> 2] = HEAP32[(0 + 35588 | 0) >> 2] | 0;
        break label$59;
       }
       label$67 : {
        $8_1 = HEAP32[(0 + 35116 | 0) >> 2] | 0;
        if ($7_1 >>> 0 >= $8_1 >>> 0) {
         break label$67
        }
        HEAP32[(0 + 35116 | 0) >> 2] = $7_1;
        $8_1 = $7_1;
       }
       $5_1 = $7_1 + $2_1 | 0;
       $0_1 = 35548;
       label$68 : {
        label$69 : {
         label$70 : {
          label$71 : {
           label$72 : {
            label$73 : {
             label$74 : {
              label$75 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($5_1 | 0)) {
                break label$74
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$75
               }
               break label$73;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$72
             }
            }
            $0_1 = 35548;
            label$76 : while (1) {
             label$77 : {
              $5_1 = HEAP32[$0_1 >> 2] | 0;
              if ($5_1 >>> 0 > $4_1 >>> 0) {
               break label$77
              }
              $5_1 = $5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($5_1 >>> 0 > $4_1 >>> 0) {
               break label$71
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$76;
            };
           }
           HEAP32[$0_1 >> 2] = $7_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $11_1 = $7_1 + (($7_1 + 8 | 0) & 7 | 0 ? (-8 - $7_1 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($11_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $2_1 = $5_1 + (($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0) | 0;
           $3_1 = $11_1 + $3_1 | 0;
           $0_1 = $2_1 - $3_1 | 0;
           label$78 : {
            if (($2_1 | 0) != ($4_1 | 0)) {
             break label$78
            }
            HEAP32[(0 + 35124 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 35112 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 35112 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$69;
           }
           label$79 : {
            if (($2_1 | 0) != (HEAP32[(0 + 35120 | 0) >> 2] | 0 | 0)) {
             break label$79
            }
            HEAP32[(0 + 35120 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 35108 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 35108 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($3_1 + $0_1 | 0) >> 2] = $0_1;
            break label$69;
           }
           label$80 : {
            $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
            if (($4_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$80
            }
            $6_1 = $4_1 & -8 | 0;
            label$81 : {
             label$82 : {
              if ($4_1 >>> 0 > 255 >>> 0) {
               break label$82
              }
              $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
              $8_1 = $4_1 >>> 3 | 0;
              $7_1 = ($8_1 << 3 | 0) + 35140 | 0;
              label$83 : {
               $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($4_1 | 0) != ($5_1 | 0)) {
                break label$83
               }
               HEAP32[(0 + 35100 | 0) >> 2] = (HEAP32[(0 + 35100 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0;
               break label$81;
              }
              HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
              break label$81;
             }
             $9_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
             label$84 : {
              label$85 : {
               $7_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($7_1 | 0) == ($2_1 | 0)) {
                break label$85
               }
               $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
               HEAP32[($4_1 + 12 | 0) >> 2] = $7_1;
               HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
               break label$84;
              }
              label$86 : {
               $4_1 = $2_1 + 20 | 0;
               $5_1 = HEAP32[$4_1 >> 2] | 0;
               if ($5_1) {
                break label$86
               }
               $4_1 = $2_1 + 16 | 0;
               $5_1 = HEAP32[$4_1 >> 2] | 0;
               if ($5_1) {
                break label$86
               }
               $7_1 = 0;
               break label$84;
              }
              label$87 : while (1) {
               $8_1 = $4_1;
               $7_1 = $5_1;
               $4_1 = $5_1 + 20 | 0;
               $5_1 = HEAP32[$4_1 >> 2] | 0;
               if ($5_1) {
                continue label$87
               }
               $4_1 = $7_1 + 16 | 0;
               $5_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
               if ($5_1) {
                continue label$87
               }
               break label$87;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$81
             }
             label$88 : {
              label$89 : {
               $5_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
               $4_1 = ($5_1 << 2 | 0) + 35404 | 0;
               if (($2_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
                break label$89
               }
               HEAP32[$4_1 >> 2] = $7_1;
               if ($7_1) {
                break label$88
               }
               HEAP32[(0 + 35104 | 0) >> 2] = (HEAP32[(0 + 35104 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
               break label$81;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $7_1;
              if (!$7_1) {
               break label$81
              }
             }
             HEAP32[($7_1 + 24 | 0) >> 2] = $9_1;
             label$90 : {
              $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$90
              }
              HEAP32[($7_1 + 16 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 24 | 0) >> 2] = $7_1;
             }
             $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$81
             }
             HEAP32[($7_1 + 20 | 0) >> 2] = $4_1;
             HEAP32[($4_1 + 24 | 0) >> 2] = $7_1;
            }
            $0_1 = $6_1 + $0_1 | 0;
            $2_1 = $2_1 + $6_1 | 0;
            $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
           }
           HEAP32[($2_1 + 4 | 0) >> 2] = $4_1 & -2 | 0;
           HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
           HEAP32[($3_1 + $0_1 | 0) >> 2] = $0_1;
           label$91 : {
            if ($0_1 >>> 0 > 255 >>> 0) {
             break label$91
            }
            $4_1 = ($0_1 & -8 | 0) + 35140 | 0;
            label$92 : {
             label$93 : {
              $5_1 = HEAP32[(0 + 35100 | 0) >> 2] | 0;
              $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
              if ($5_1 & $0_1 | 0) {
               break label$93
              }
              HEAP32[(0 + 35100 | 0) >> 2] = $5_1 | $0_1 | 0;
              $0_1 = $4_1;
              break label$92;
             }
             $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
            HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
            HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
            HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
            break label$69;
           }
           $4_1 = 31;
           label$94 : {
            if ($0_1 >>> 0 > 16777215 >>> 0) {
             break label$94
            }
            $4_1 = $0_1 >>> 8 | 0;
            $1156 = $4_1;
            $4_1 = (($4_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $5_1 = $1156 << $4_1 | 0;
            $1163 = $5_1;
            $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $7_1 = $1163 << $5_1 | 0;
            $1170 = $7_1;
            $7_1 = (($7_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $4_1 = (($1170 << $7_1 | 0) >>> 15 | 0) - ($4_1 | $5_1 | 0 | $7_1 | 0) | 0;
            $4_1 = ($4_1 << 1 | 0 | (($0_1 >>> ($4_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($3_1 + 28 | 0) >> 2] = $4_1;
           i64toi32_i32$1 = $3_1;
           i64toi32_i32$0 = 0;
           HEAP32[($3_1 + 16 | 0) >> 2] = 0;
           HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $5_1 = ($4_1 << 2 | 0) + 35404 | 0;
           label$95 : {
            label$96 : {
             $7_1 = HEAP32[(0 + 35104 | 0) >> 2] | 0;
             $8_1 = 1 << $4_1 | 0;
             if ($7_1 & $8_1 | 0) {
              break label$96
             }
             HEAP32[(0 + 35104 | 0) >> 2] = $7_1 | $8_1 | 0;
             HEAP32[$5_1 >> 2] = $3_1;
             HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
             break label$95;
            }
            $4_1 = $0_1 << (($4_1 | 0) == (31 | 0) ? 0 : 25 - ($4_1 >>> 1 | 0) | 0) | 0;
            $7_1 = HEAP32[$5_1 >> 2] | 0;
            label$97 : while (1) {
             $5_1 = $7_1;
             if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
              break label$70
             }
             $7_1 = $4_1 >>> 29 | 0;
             $4_1 = $4_1 << 1 | 0;
             $8_1 = ($5_1 + ($7_1 & 4 | 0) | 0) + 16 | 0;
             $7_1 = HEAP32[$8_1 >> 2] | 0;
             if ($7_1) {
              continue label$97
             }
             break label$97;
            };
            HEAP32[$8_1 >> 2] = $3_1;
            HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
           }
           HEAP32[($3_1 + 12 | 0) >> 2] = $3_1;
           HEAP32[($3_1 + 8 | 0) >> 2] = $3_1;
           break label$69;
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = ($7_1 + 8 | 0) & 7 | 0 ? (-8 - $7_1 | 0) & 7 | 0 : 0;
          $11_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 35112 | 0) >> 2] = $11_1;
          $8_1 = $7_1 + $8_1 | 0;
          HEAP32[(0 + 35124 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $11_1 | 1 | 0;
          HEAP32[(($7_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 35128 | 0) >> 2] = HEAP32[(0 + 35588 | 0) >> 2] | 0;
          $0_1 = ($5_1 + (($5_1 + -39 | 0) & 7 | 0 ? (39 - $5_1 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 35556 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 35560 | 0) >> 2] | 0;
          $1292 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1292;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 35548 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 35552 | 0) >> 2] | 0;
          $1294 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1294;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 35556 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 35552 | 0) >> 2] = $2_1;
          HEAP32[(0 + 35548 | 0) >> 2] = $7_1;
          HEAP32[(0 + 35560 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$98 : while (1) {
           HEAP32[($0_1 + 4 | 0) >> 2] = 7;
           $7_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($7_1 >>> 0 < $5_1 >>> 0) {
            continue label$98
           }
           break label$98;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$59
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $7_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $7_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $7_1;
          label$99 : {
           if ($7_1 >>> 0 > 255 >>> 0) {
            break label$99
           }
           $0_1 = ($7_1 & -8 | 0) + 35140 | 0;
           label$100 : {
            label$101 : {
             $5_1 = HEAP32[(0 + 35100 | 0) >> 2] | 0;
             $7_1 = 1 << ($7_1 >>> 3 | 0) | 0;
             if ($5_1 & $7_1 | 0) {
              break label$101
             }
             HEAP32[(0 + 35100 | 0) >> 2] = $5_1 | $7_1 | 0;
             $5_1 = $0_1;
             break label$100;
            }
            $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
           break label$59;
          }
          $0_1 = 31;
          label$102 : {
           if ($7_1 >>> 0 > 16777215 >>> 0) {
            break label$102
           }
           $0_1 = $7_1 >>> 8 | 0;
           $1354 = $0_1;
           $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $5_1 = $1354 << $0_1 | 0;
           $1361 = $5_1;
           $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $8_1 = $1361 << $5_1 | 0;
           $1368 = $8_1;
           $8_1 = (($8_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0_1 = (($1368 << $8_1 | 0) >>> 15 | 0) - ($0_1 | $5_1 | 0 | $8_1 | 0) | 0;
           $0_1 = ($0_1 << 1 | 0 | (($7_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          $5_1 = ($0_1 << 2 | 0) + 35404 | 0;
          label$103 : {
           label$104 : {
            $8_1 = HEAP32[(0 + 35104 | 0) >> 2] | 0;
            $2_1 = 1 << $0_1 | 0;
            if ($8_1 & $2_1 | 0) {
             break label$104
            }
            HEAP32[(0 + 35104 | 0) >> 2] = $8_1 | $2_1 | 0;
            HEAP32[$5_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
            break label$103;
           }
           $0_1 = $7_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $8_1 = HEAP32[$5_1 >> 2] | 0;
           label$105 : while (1) {
            $5_1 = $8_1;
            if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($7_1 | 0)) {
             break label$68
            }
            $8_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $2_1 = ($5_1 + ($8_1 & 4 | 0) | 0) + 16 | 0;
            $8_1 = HEAP32[$2_1 >> 2] | 0;
            if ($8_1) {
             continue label$105
            }
            break label$105;
           };
           HEAP32[$2_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
          }
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$59;
         }
         $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($5_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 24 | 0) >> 2] = 0;
         HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $11_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 35112 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 35112 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 35124 | 0) >> 2] | 0;
      $5_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 35124 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break label$1;
     }
     HEAP32[($14() | 0) >> 2] = 48;
     $0_1 = 0;
     break label$1;
    }
    label$106 : {
     if (!$11_1) {
      break label$106
     }
     label$107 : {
      label$108 : {
       $5_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($5_1 << 2 | 0) + 35404 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$108
       }
       HEAP32[$0_1 >> 2] = $7_1;
       if ($7_1) {
        break label$107
       }
       $6_1 = $6_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       HEAP32[(0 + 35104 | 0) >> 2] = $6_1;
       break label$106;
      }
      HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $7_1;
      if (!$7_1) {
       break label$106
      }
     }
     HEAP32[($7_1 + 24 | 0) >> 2] = $11_1;
     label$109 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$109
      }
      HEAP32[($7_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $7_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$106
     }
     HEAP32[($7_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $7_1;
    }
    label$110 : {
     label$111 : {
      if ($4_1 >>> 0 > 15 >>> 0) {
       break label$111
      }
      $0_1 = $4_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$110;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     $7_1 = $8_1 + $3_1 | 0;
     HEAP32[($7_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
     HEAP32[($7_1 + $4_1 | 0) >> 2] = $4_1;
     label$112 : {
      if ($4_1 >>> 0 > 255 >>> 0) {
       break label$112
      }
      $0_1 = ($4_1 & -8 | 0) + 35140 | 0;
      label$113 : {
       label$114 : {
        $5_1 = HEAP32[(0 + 35100 | 0) >> 2] | 0;
        $4_1 = 1 << ($4_1 >>> 3 | 0) | 0;
        if ($5_1 & $4_1 | 0) {
         break label$114
        }
        HEAP32[(0 + 35100 | 0) >> 2] = $5_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$113;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $7_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $7_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
      break label$110;
     }
     $0_1 = 31;
     label$115 : {
      if ($4_1 >>> 0 > 16777215 >>> 0) {
       break label$115
      }
      $0_1 = $4_1 >>> 8 | 0;
      $1599 = $0_1;
      $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $5_1 = $1599 << $0_1 | 0;
      $1606 = $5_1;
      $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3_1 = $1606 << $5_1 | 0;
      $1613 = $3_1;
      $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0_1 = (($1613 << $3_1 | 0) >>> 15 | 0) - ($0_1 | $5_1 | 0 | $3_1 | 0) | 0;
      $0_1 = ($0_1 << 1 | 0 | (($4_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$0 = 0;
     HEAP32[($7_1 + 16 | 0) >> 2] = 0;
     HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $5_1 = ($0_1 << 2 | 0) + 35404 | 0;
     label$116 : {
      label$117 : {
       label$118 : {
        $3_1 = 1 << $0_1 | 0;
        if ($6_1 & $3_1 | 0) {
         break label$118
        }
        HEAP32[(0 + 35104 | 0) >> 2] = $6_1 | $3_1 | 0;
        HEAP32[$5_1 >> 2] = $7_1;
        HEAP32[($7_1 + 24 | 0) >> 2] = $5_1;
        break label$117;
       }
       $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $3_1 = HEAP32[$5_1 >> 2] | 0;
       label$119 : while (1) {
        $5_1 = $3_1;
        if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
         break label$116
        }
        $3_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $2_1 = ($5_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
        $3_1 = HEAP32[$2_1 >> 2] | 0;
        if ($3_1) {
         continue label$119
        }
        break label$119;
       };
       HEAP32[$2_1 >> 2] = $7_1;
       HEAP32[($7_1 + 24 | 0) >> 2] = $5_1;
      }
      HEAP32[($7_1 + 12 | 0) >> 2] = $7_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $7_1;
      break label$110;
     }
     $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $7_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $7_1;
     HEAP32[($7_1 + 24 | 0) >> 2] = 0;
     HEAP32[($7_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($7_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$1;
   }
   label$120 : {
    if (!$10_1) {
     break label$120
    }
    label$121 : {
     label$122 : {
      $5_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($5_1 << 2 | 0) + 35404 | 0;
      if (($7_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$122
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$121
      }
      HEAP32[(0 + 35104 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
      break label$120;
     }
     HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($7_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$120
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $10_1;
    label$123 : {
     $0_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$123
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$120
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$124 : {
    label$125 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$125
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($7_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $7_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$124;
    }
    HEAP32[($7_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    $5_1 = $7_1 + $3_1 | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($5_1 + $4_1 | 0) >> 2] = $4_1;
    label$126 : {
     if (!$6_1) {
      break label$126
     }
     $3_1 = ($6_1 & -8 | 0) + 35140 | 0;
     $0_1 = HEAP32[(0 + 35120 | 0) >> 2] | 0;
     label$127 : {
      label$128 : {
       $8_1 = 1 << ($6_1 >>> 3 | 0) | 0;
       if ($8_1 & $2_1 | 0) {
        break label$128
       }
       HEAP32[(0 + 35100 | 0) >> 2] = $8_1 | $2_1 | 0;
       $8_1 = $3_1;
       break label$127;
      }
      $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($8_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
    }
    HEAP32[(0 + 35120 | 0) >> 2] = $5_1;
    HEAP32[(0 + 35108 | 0) >> 2] = $4_1;
   }
   $0_1 = $7_1 + 8 | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $74($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $6_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $378 = 0, $385 = 0, $392 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 35116 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if (($1_1 | 0) == (HEAP32[(0 + 35120 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      $5_1 = $2_1 >>> 3 | 0;
      $6_1 = ($5_1 << 3 | 0) + 35140 | 0;
      label$5 : {
       $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($2_1 | 0) != ($4_1 | 0)) {
        break label$5
       }
       HEAP32[(0 + 35100 | 0) >> 2] = (HEAP32[(0 + 35100 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $6_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($1_1 | 0)) {
        break label$7
       }
       $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
       break label$6;
      }
      label$8 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$8
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$8
       }
       $6_1 = 0;
       break label$6;
      }
      label$9 : while (1) {
       $5_1 = $2_1;
       $6_1 = $4_1;
       $2_1 = $6_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$9
       }
       $2_1 = $6_1 + 16 | 0;
       $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$9
       }
       break label$9;
      };
      HEAP32[$5_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$10 : {
      label$11 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 35404 | 0;
       if (($1_1 | 0) != (HEAP32[$2_1 >> 2] | 0 | 0)) {
        break label$11
       }
       HEAP32[$2_1 >> 2] = $6_1;
       if ($6_1) {
        break label$10
       }
       HEAP32[(0 + 35104 | 0) >> 2] = (HEAP32[(0 + 35104 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$2
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
     label$12 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$12
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 35108 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    return;
   }
   if ($1_1 >>> 0 >= $3_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$13 : {
    label$14 : {
     if ($2_1 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if (($3_1 | 0) != (HEAP32[(0 + 35124 | 0) >> 2] | 0 | 0)) {
       break label$15
      }
      HEAP32[(0 + 35124 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 35112 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 35112 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 35120 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 35108 | 0) >> 2] = 0;
      HEAP32[(0 + 35120 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if (($3_1 | 0) != (HEAP32[(0 + 35120 | 0) >> 2] | 0 | 0)) {
       break label$16
      }
      HEAP32[(0 + 35120 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 35108 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 35108 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$17 : {
      label$18 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       $5_1 = $2_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 35140 | 0;
       label$19 : {
        $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($2_1 | 0) != ($4_1 | 0)) {
         break label$19
        }
        HEAP32[(0 + 35100 | 0) >> 2] = (HEAP32[(0 + 35100 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
       break label$17;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 35116 | 0) >> 2] | 0;
        HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
        break label$20;
       }
       label$22 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$22
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$22
        }
        $6_1 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5_1 = $2_1;
        $6_1 = $4_1;
        $2_1 = $6_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$23
        }
        $2_1 = $6_1 + 16 | 0;
        $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 35404 | 0;
        if (($3_1 | 0) != (HEAP32[$2_1 >> 2] | 0 | 0)) {
         break label$25
        }
        HEAP32[$2_1 >> 2] = $6_1;
        if ($6_1) {
         break label$24
        }
        HEAP32[(0 + 35104 | 0) >> 2] = (HEAP32[(0 + 35104 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$17
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$26 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$26
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$17
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     if (($1_1 | 0) != (HEAP32[(0 + 35120 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 35108 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
   }
   label$27 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $2_1 = ($0_1 & -8 | 0) + 35140 | 0;
    label$28 : {
     label$29 : {
      $4_1 = HEAP32[(0 + 35100 | 0) >> 2] | 0;
      $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
      if ($4_1 & $0_1 | 0) {
       break label$29
      }
      HEAP32[(0 + 35100 | 0) >> 2] = $4_1 | $0_1 | 0;
      $0_1 = $2_1;
      break label$28;
     }
     $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $2_1 = 31;
   label$30 : {
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $2_1 = $0_1 >>> 8 | 0;
    $378 = $2_1;
    $2_1 = (($2_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $378 << $2_1 | 0;
    $385 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $385 << $4_1 | 0;
    $392 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2_1 = (($392 << $6_1 | 0) >>> 15 | 0) - ($2_1 | $4_1 | 0 | $6_1 | 0) | 0;
    $2_1 = ($2_1 << 1 | 0 | (($0_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   $4_1 = ($2_1 << 2 | 0) + 35404 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      label$34 : {
       $6_1 = HEAP32[(0 + 35104 | 0) >> 2] | 0;
       $3_1 = 1 << $2_1 | 0;
       if ($6_1 & $3_1 | 0) {
        break label$34
       }
       HEAP32[(0 + 35104 | 0) >> 2] = $6_1 | $3_1 | 0;
       HEAP32[$4_1 >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
       break label$33;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $6_1 = HEAP32[$4_1 >> 2] | 0;
      label$35 : while (1) {
       $4_1 = $6_1;
       if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$32
       }
       $6_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
       $6_1 = HEAP32[$3_1 >> 2] | 0;
       if ($6_1) {
        continue label$35
       }
       break label$35;
      };
      HEAP32[$3_1 >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$31;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   }
   $1_1 = (HEAP32[(0 + 35132 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 35132 | 0) >> 2] = $1_1 ? $1_1 : -1;
  }
 }
 
 function $75($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return $73($1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1_1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   HEAP32[($14() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$3 : {
   $2_1 = $76($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   return $2_1 + 8 | 0 | 0;
  }
  label$4 : {
   $2_1 = $73($1_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   return 0 | 0;
  }
  $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
  $3_1 = ($3_1 & 3 | 0 ? -4 : -8) + ($3_1 & -8 | 0) | 0;
  $26($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
  $74($0_1 | 0);
  return $2_1 | 0;
 }
 
 function $76($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $2_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $8_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = $2_1 & -8 | 0;
  label$1 : {
   label$2 : {
    if ($2_1 & 3 | 0) {
     break label$2
    }
    label$3 : {
     if ($1_1 >>> 0 >= 256 >>> 0) {
      break label$3
     }
     return 0 | 0;
    }
    label$4 : {
     if ($3_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
      break label$4
     }
     $4_1 = $0_1;
     if (($3_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 35580 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$1
     }
    }
    return 0 | 0;
   }
   $5_1 = $0_1 + $3_1 | 0;
   label$5 : {
    label$6 : {
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$6
     }
     $3_1 = $3_1 - $1_1 | 0;
     if ($3_1 >>> 0 < 16 >>> 0) {
      break label$5
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $1_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     $77($1_1 | 0, $3_1 | 0);
     break label$5;
    }
    $4_1 = 0;
    label$7 : {
     if (($5_1 | 0) != (HEAP32[(0 + 35124 | 0) >> 2] | 0 | 0)) {
      break label$7
     }
     $3_1 = (HEAP32[(0 + 35112 | 0) >> 2] | 0) + $3_1 | 0;
     if ($3_1 >>> 0 <= $1_1 >>> 0) {
      break label$1
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $2_1 = $0_1 + $1_1 | 0;
     $1_1 = $3_1 - $1_1 | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[(0 + 35112 | 0) >> 2] = $1_1;
     HEAP32[(0 + 35124 | 0) >> 2] = $2_1;
     break label$5;
    }
    label$8 : {
     if (($5_1 | 0) != (HEAP32[(0 + 35120 | 0) >> 2] | 0 | 0)) {
      break label$8
     }
     $4_1 = 0;
     $3_1 = (HEAP32[(0 + 35108 | 0) >> 2] | 0) + $3_1 | 0;
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$1
     }
     label$9 : {
      label$10 : {
       $4_1 = $3_1 - $1_1 | 0;
       if ($4_1 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
       $1_1 = $0_1 + $1_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
       $3_1 = $0_1 + $3_1 | 0;
       HEAP32[$3_1 >> 2] = $4_1;
       HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $3_1 | 0 | 2 | 0;
      $1_1 = $0_1 + $3_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $4_1 = 0;
      $1_1 = 0;
     }
     HEAP32[(0 + 35120 | 0) >> 2] = $1_1;
     HEAP32[(0 + 35108 | 0) >> 2] = $4_1;
     break label$5;
    }
    $4_1 = 0;
    $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    if ($6_1 & 2 | 0) {
     break label$1
    }
    $7_1 = ($6_1 & -8 | 0) + $3_1 | 0;
    if ($7_1 >>> 0 < $1_1 >>> 0) {
     break label$1
    }
    $8_1 = $7_1 - $1_1 | 0;
    label$11 : {
     label$12 : {
      if ($6_1 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
      $9_1 = $6_1 >>> 3 | 0;
      $6_1 = ($9_1 << 3 | 0) + 35140 | 0;
      label$13 : {
       $4_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($4_1 | 0) != ($3_1 | 0)) {
        break label$13
       }
       HEAP32[(0 + 35100 | 0) >> 2] = (HEAP32[(0 + 35100 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
      break label$11;
     }
     $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     label$14 : {
      label$15 : {
       $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($5_1 | 0)) {
        break label$15
       }
       $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[(0 + 35116 | 0) >> 2] | 0;
       HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
       break label$14;
      }
      label$16 : {
       $3_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$16
       }
       $3_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$16
       }
       $6_1 = 0;
       break label$14;
      }
      label$17 : while (1) {
       $9_1 = $3_1;
       $6_1 = $4_1;
       $3_1 = $6_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        continue label$17
       }
       $3_1 = $6_1 + 16 | 0;
       $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$17
       }
       break label$17;
      };
      HEAP32[$9_1 >> 2] = 0;
     }
     if (!$10_1) {
      break label$11
     }
     label$18 : {
      label$19 : {
       $4_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($4_1 << 2 | 0) + 35404 | 0;
       if (($5_1 | 0) != (HEAP32[$3_1 >> 2] | 0 | 0)) {
        break label$19
       }
       HEAP32[$3_1 >> 2] = $6_1;
       if ($6_1) {
        break label$18
       }
       HEAP32[(0 + 35104 | 0) >> 2] = (HEAP32[(0 + 35104 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$11
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $10_1;
     label$20 : {
      $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$20
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     $3_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$11
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
     HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
    }
    label$21 : {
     if ($8_1 >>> 0 > 15 >>> 0) {
      break label$21
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $7_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $7_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$5;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
    $1_1 = $0_1 + $1_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $8_1 | 3 | 0;
    $3_1 = $0_1 + $7_1 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $77($1_1 | 0, $8_1 | 0);
   }
   $4_1 = $0_1;
  }
  return $4_1 | 0;
 }
 
 function $77($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $6_1 = 0, $4_1 = 0, $2_1 = 0, $5_1 = 0, $7_1 = 0, $359 = 0, $366 = 0, $373 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($3_1 & 1 | 0) {
     break label$2
    }
    if (!($3_1 & 3 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $3_1 + $1_1 | 0;
    label$3 : {
     label$4 : {
      $0_1 = $0_1 - $3_1 | 0;
      if (($0_1 | 0) == (HEAP32[(0 + 35120 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      label$5 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$5
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       $5_1 = $3_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 35140 | 0;
       $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if (($3_1 | 0) != ($4_1 | 0)) {
        break label$3
       }
       HEAP32[(0 + 35100 | 0) >> 2] = (HEAP32[(0 + 35100 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      label$6 : {
       label$7 : {
        $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($0_1 | 0)) {
         break label$7
        }
        $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 35116 | 0) >> 2] | 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$6;
       }
       label$8 : {
        $3_1 = $0_1 + 20 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         break label$8
        }
        $3_1 = $0_1 + 16 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         break label$8
        }
        $6_1 = 0;
        break label$6;
       }
       label$9 : while (1) {
        $5_1 = $3_1;
        $6_1 = $4_1;
        $3_1 = $6_1 + 20 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         continue label$9
        }
        $3_1 = $6_1 + 16 | 0;
        $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$9
        }
        break label$9;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$2
      }
      label$10 : {
       label$11 : {
        $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($4_1 << 2 | 0) + 35404 | 0;
        if (($0_1 | 0) != (HEAP32[$3_1 >> 2] | 0 | 0)) {
         break label$11
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$10
        }
        HEAP32[(0 + 35104 | 0) >> 2] = (HEAP32[(0 + 35104 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$2;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$2
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$12 : {
       $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$12
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$2
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      break label$2;
     }
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
      break label$2
     }
     HEAP32[(0 + 35108 | 0) >> 2] = $1_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[$2_1 >> 2] = $1_1;
     return;
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
   }
   label$13 : {
    label$14 : {
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if ($3_1 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if (($2_1 | 0) != (HEAP32[(0 + 35124 | 0) >> 2] | 0 | 0)) {
       break label$15
      }
      HEAP32[(0 + 35124 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 35112 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 35112 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      if (($0_1 | 0) != (HEAP32[(0 + 35120 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 35108 | 0) >> 2] = 0;
      HEAP32[(0 + 35120 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if (($2_1 | 0) != (HEAP32[(0 + 35120 | 0) >> 2] | 0 | 0)) {
       break label$16
      }
      HEAP32[(0 + 35120 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 35108 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 35108 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
      return;
     }
     $1_1 = ($3_1 & -8 | 0) + $1_1 | 0;
     label$17 : {
      label$18 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
       $5_1 = $3_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 35140 | 0;
       label$19 : {
        $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($3_1 | 0) != ($4_1 | 0)) {
         break label$19
        }
        HEAP32[(0 + 35100 | 0) >> 2] = (HEAP32[(0 + 35100 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
       break label$17;
      }
      $7_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($2_1 | 0)) {
         break label$21
        }
        $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 35116 | 0) >> 2] | 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$20;
       }
       label$22 : {
        $4_1 = $2_1 + 20 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         break label$22
        }
        $4_1 = $2_1 + 16 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         break label$22
        }
        $6_1 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5_1 = $4_1;
        $6_1 = $3_1;
        $4_1 = $3_1 + 20 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         continue label$23
        }
        $4_1 = $6_1 + 16 | 0;
        $3_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($3_1) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($4_1 << 2 | 0) + 35404 | 0;
        if (($2_1 | 0) != (HEAP32[$3_1 >> 2] | 0 | 0)) {
         break label$25
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$24
        }
        HEAP32[(0 + 35104 | 0) >> 2] = (HEAP32[(0 + 35104 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$17
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$26 : {
       $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$26
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$17
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
     if (($0_1 | 0) != (HEAP32[(0 + 35120 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 35108 | 0) >> 2] = $1_1;
     return;
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
   }
   label$27 : {
    if ($1_1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $3_1 = ($1_1 & -8 | 0) + 35140 | 0;
    label$28 : {
     label$29 : {
      $4_1 = HEAP32[(0 + 35100 | 0) >> 2] | 0;
      $1_1 = 1 << ($1_1 >>> 3 | 0) | 0;
      if ($4_1 & $1_1 | 0) {
       break label$29
      }
      HEAP32[(0 + 35100 | 0) >> 2] = $4_1 | $1_1 | 0;
      $1_1 = $3_1;
      break label$28;
     }
     $1_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    return;
   }
   $3_1 = 31;
   label$30 : {
    if ($1_1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $3_1 = $1_1 >>> 8 | 0;
    $359 = $3_1;
    $3_1 = (($3_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $359 << $3_1 | 0;
    $366 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $366 << $4_1 | 0;
    $373 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $3_1 = (($373 << $6_1 | 0) >>> 15 | 0) - ($3_1 | $4_1 | 0 | $6_1 | 0) | 0;
    $3_1 = ($3_1 << 1 | 0 | (($1_1 >>> ($3_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   $4_1 = ($3_1 << 2 | 0) + 35404 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      $6_1 = HEAP32[(0 + 35104 | 0) >> 2] | 0;
      $2_1 = 1 << $3_1 | 0;
      if ($6_1 & $2_1 | 0) {
       break label$33
      }
      HEAP32[(0 + 35104 | 0) >> 2] = $6_1 | $2_1 | 0;
      HEAP32[$4_1 >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
      break label$32;
     }
     $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
     $6_1 = HEAP32[$4_1 >> 2] | 0;
     label$34 : while (1) {
      $4_1 = $6_1;
      if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
       break label$31
      }
      $6_1 = $3_1 >>> 29 | 0;
      $3_1 = $3_1 << 1 | 0;
      $2_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
      $6_1 = HEAP32[$2_1 >> 2] | 0;
      if ($6_1) {
       continue label$34
      }
      break label$34;
     };
     HEAP32[$2_1 >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  }
 }
 
 function $78() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function $79($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[(0 + 2140 | 0) >> 2] | 0;
  $2_1 = ($0_1 + 7 | 0) & -8 | 0;
  $0_1 = $1_1 + $2_1 | 0;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    if ($0_1 >>> 0 <= $1_1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0_1 >>> 0 <= ($78() | 0) >>> 0) {
     break label$3
    }
    if (!(fimport$1($0_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 2140 | 0) >> 2] = $0_1;
   return $1_1 | 0;
  }
  HEAP32[($14() | 0) >> 2] = 48;
  return -1 | 0;
 }
 
 function $80($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $10$hi = 0, $10_1 = 0, $6_1 = 0, $9$hi = 0, $7_1 = 0, $5_1 = 0, $9_1 = 0, $12$hi = 0, $11$hi = 0, i64toi32_i32$6 = 0, $11_1 = 0, $8_1 = 0, $12_1 = 0, $135 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $20_1 = 0, $25_1 = 0, $30_1 = 0, $34_1 = 0, $40_1 = 0, $48_1 = 0, $50_1 = 0, $58_1 = 0, $58$hi = 0, $64_1 = 0, $64$hi = 0, $68_1 = 0, $68$hi = 0, $78_1 = 0, $78$hi = 0, $106_1 = 0, $109 = 0, $136 = 0, $137 = 0, $137$hi = 0, $138 = 0, $138$hi = 0, $145$hi = 0, $148$hi = 0, $168 = 0, $169 = 0, $169$hi = 0, $170 = 0, $170$hi = 0, $177$hi = 0, $180$hi = 0, $193 = 0, $193$hi = 0, $195$hi = 0, $199 = 0, $199$hi = 0, $201$hi = 0, $228 = 0, $228$hi = 0, $230 = 0, $230$hi = 0, $234 = 0, $234$hi = 0, $236 = 0, $237$hi = 0, $251 = 0, $251$hi = 0, $254 = 0, $254$hi = 0, $262$hi = 0, $265 = 0, $266$hi = 0, $271 = 0, $272 = 0, $272$hi = 0, $273 = 0, $273$hi = 0, $280$hi = 0, $283$hi = 0, $298 = 0, $298$hi = 0, $304 = 0, $305$hi = 0, $311 = 0, $311$hi = 0, $313$hi = 0, $314 = 0, $314$hi = 0, $316 = 0, $316$hi = 0, $343 = 0, $343$hi = 0, $345 = 0, $345$hi = 0, $349 = 0, $349$hi = 0, $351 = 0, $352$hi = 0, $358 = 0, $358$hi = 0, $360$hi = 0, $364 = 0, $364$hi = 0, $367 = 0, $367$hi = 0, $368$hi = 0, $375 = 0, $375$hi = 0, $379$hi = 0, $383 = 0, $384$hi = 0, $389 = 0, $389$hi = 0, $397 = 0, $398$hi = 0, $400 = 0, $400$hi = 0, $406 = 0, $407$hi = 0, $411 = 0, $412$hi = 0, $415 = 0, $415$hi = 0, $421 = 0, $422$hi = 0, $426 = 0, $427$hi = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     $6_1 = !($1_1 | i64toi32_i32$1 | 0);
     $20_1 = $6_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $10_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$0 = -2147418112;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$3 = 0;
     $25_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = $10$hi;
     if (!($10_1 | i64toi32_i32$2 | 0) ? $20_1 : $25_1) {
      break label$3
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 0;
     $30_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = -2147418112;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$5 = 0;
     $34_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$4 = -2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $30_1 : $34_1) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$4 = 0;
     $40_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $10_1;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $6_1 : $40_1) {
      break label$4
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$1 = $3$hi;
     $48_1 = !($3_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$4 = $9_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$5 = 0;
     $50_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48_1 : $50_1) {
      break label$5
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$4;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
     $58_1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     $58$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $58$hi;
     i64toi32_i32$1 = $58_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
     $64_1 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
     $64$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$3 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $68_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $68$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $64$hi;
     i64toi32_i32$1 = $64_1;
     i64toi32_i32$5 = $68$hi;
     i64toi32_i32$4 = $68_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $6_1 = !(i64toi32_i32$1 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$2 ? 0 : $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$1;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$2 ? 0 : $1_1;
     i64toi32_i32$2 = i64toi32_i32$2 ? i64toi32_i32$3 : i64toi32_i32$4;
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
    $78_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $78$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = $78$hi;
    i64toi32_i32$3 = $78_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    if (!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
     break label$1
    }
    label$7 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $3_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $4$hi = i64toi32_i32$5;
     break label$1;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$3 = $9_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    if (!!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
     break label$2
    }
    i64toi32_i32$1 = $1$hi;
    $3_1 = $1_1;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    $4_1 = $2_1;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   $106_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$3 = $9_1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   $109 = i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$2 = $9_1;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = $10_1;
   $7_1 = (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) | 0 ? $106_1 : $109;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $1_1;
   i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
   $9_1 = i64toi32_i32$5;
   $9$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = i64toi32_i32$4 ? $4_1 : $2_1;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$5;
   $11_1 = i64toi32_i32$2;
   $11$hi = i64toi32_i32$4;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
   $10_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $10$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$1 = i64toi32_i32$5 ? $2_1 : $4_1;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$2 : i64toi32_i32$3;
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $135 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
    $135 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $8_1 = $135 & 32767 | 0;
   label$8 : {
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $139 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     $139 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
    }
    $6_1 = $139 & 32767 | 0;
    if ($6_1) {
     break label$8
    }
    $136 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $9$hi;
    $137 = $9_1;
    $137$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $138 = $10_1;
    $138$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $10$hi;
    $6_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$2 = i64toi32_i32$3 ? $9_1 : $10_1;
    i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $140 = Math_clz32(i64toi32_i32$2) + 32 | 0
    } else {
     $140 = i64toi32_i32$5
    }
    $145$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $148$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $145$hi;
    i64toi32_i32$2 = $140;
    i64toi32_i32$1 = $148$hi;
    i64toi32_i32$5 = $6_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $6_1 = i64toi32_i32$4;
    i64toi32_i32$0 = $137$hi;
    i64toi32_i32$2 = $138$hi;
    $81($136 | 0, $137 | 0, i64toi32_i32$0 | 0, $138 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $6_1 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$2;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$0;
    $9$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$1 ? $1_1 : $3_1;
   i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$2 : i64toi32_i32$0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   label$9 : {
    if ($8_1) {
     break label$9
    }
    $168 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $169 = $3_1;
    $169$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    $170 = $4_1;
    $170$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $4$hi;
    $7_1 = !($4_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$2 = i64toi32_i32$0 ? $3_1 : $4_1;
    i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$1;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$3);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $141 = Math_clz32(i64toi32_i32$2) + 32 | 0
    } else {
     $141 = i64toi32_i32$5
    }
    $177$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $180$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $177$hi;
    i64toi32_i32$2 = $141;
    i64toi32_i32$3 = $180$hi;
    i64toi32_i32$5 = $7_1 << 6 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$1;
    i64toi32_i32$4 = $169$hi;
    i64toi32_i32$2 = $170$hi;
    $81($168 | 0, $169 | 0, i64toi32_i32$4 | 0, $170 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 + -15 | 0 | 0);
    $8_1 = 16 - i64toi32_i32$1 | 0;
    i64toi32_i32$0 = $5_1 + 88 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $142 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
    $142 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $193 = $142;
   $193$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $143 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
    $143 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
   }
   $195$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $193$hi;
   i64toi32_i32$4 = $193;
   i64toi32_i32$2 = $195$hi;
   i64toi32_i32$5 = $143;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   $1_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $144 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $144 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $199 = $144;
   $199$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $145 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $145 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $201$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $199$hi;
   i64toi32_i32$0 = $199;
   i64toi32_i32$4 = $201$hi;
   i64toi32_i32$5 = $145;
   i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $146 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $146 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $10_1 = $146;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$4 = $11_1;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   label$10 : {
    if (($6_1 | 0) == ($8_1 | 0)) {
     break label$10
    }
    label$11 : {
     $7_1 = $6_1 - $8_1 | 0;
     if ($7_1 >>> 0 <= 127 >>> 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $10_1 = 1;
     $10$hi = i64toi32_i32$2;
     break label$10;
    }
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$4 = $1$hi;
    $81($5_1 + 64 | 0 | 0, $10_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$4 | 0, 128 - $7_1 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    $91($5_1 + 48 | 0 | 0, $10_1 | 0, i64toi32_i32$4 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $228 = i64toi32_i32$2;
    $228$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $230 = i64toi32_i32$4;
    $230$hi = i64toi32_i32$2;
    i64toi32_i32$0 = (i64toi32_i32$0 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $234 = i64toi32_i32$2;
    $234$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $230$hi;
    i64toi32_i32$0 = $230;
    i64toi32_i32$2 = $234$hi;
    i64toi32_i32$5 = $234;
    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    $236 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $237$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $228$hi;
    i64toi32_i32$5 = $228;
    i64toi32_i32$2 = $237$hi;
    i64toi32_i32$0 = $236;
    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $10_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$2 = 524288;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
   $12_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $12$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$5 = $9_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 3;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
    $147 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
    $147 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
   }
   $9_1 = $147;
   $9$hi = i64toi32_i32$4;
   label$12 : {
    label$13 : {
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $148 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $149 = 0
       } else {
        $149 = 1
       }
       $150 = $149;
      } else {
       $150 = 0
      }
      $148 = $150;
     }
     if ($148) {
      break label$13
     }
     i64toi32_i32$2 = 0;
     $3_1 = 0;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $251 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $251$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $254 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
     $254$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $251$hi;
     i64toi32_i32$4 = $251;
     i64toi32_i32$2 = $254$hi;
     i64toi32_i32$5 = $254;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     if (!(i64toi32_i32$4 | i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0)) {
      break label$1
     }
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     $2_1 = i64toi32_i32$3;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
     $262$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$5 = $10_1;
     $265 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $266$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $262$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$3 = $266$hi;
     i64toi32_i32$2 = $265;
     i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$5 = 524287;
     i64toi32_i32$2 = -1;
     if (i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
      break label$12
     }
     $271 = $5_1 + 32 | 0;
     i64toi32_i32$1 = $2$hi;
     $272 = $2_1;
     $272$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     $273 = $4_1;
     $273$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     $7_1 = !($4_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$3 ? $2_1 : $4_1;
     i64toi32_i32$2 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$4;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$2);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $151 = Math_clz32(i64toi32_i32$5) + 32 | 0
     } else {
      $151 = i64toi32_i32$1
     }
     $280$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $283$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $280$hi;
     i64toi32_i32$5 = $151;
     i64toi32_i32$2 = $283$hi;
     i64toi32_i32$1 = $7_1 << 6 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $7_1 = i64toi32_i32$4 + -12 | 0;
     i64toi32_i32$0 = $272$hi;
     i64toi32_i32$5 = $273$hi;
     $81($271 | 0, $272 | 0, i64toi32_i32$0 | 0, $273 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
     $6_1 = $6_1 - $7_1 | 0;
     i64toi32_i32$3 = $5_1 + 40 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$5;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$0;
     $2$hi = i64toi32_i32$5;
     break label$12;
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$1 = $12_1;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $298 = i64toi32_i32$2;
    $298$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$4 = $9$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$1 = $10_1;
    $304 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $305$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $298$hi;
    i64toi32_i32$1 = $298;
    i64toi32_i32$2 = $305$hi;
    i64toi32_i32$5 = $304;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = 1048576;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    if (!(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$1 | 0)) {
     break label$12
    }
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $152 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
     $152 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
    }
    $311 = $152;
    $311$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 63;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $153 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
     $153 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    $313$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $311$hi;
    i64toi32_i32$4 = $311;
    i64toi32_i32$1 = $313$hi;
    i64toi32_i32$5 = $153;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $314 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $314$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
    $316 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $316$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $314$hi;
    i64toi32_i32$1 = $314;
    i64toi32_i32$0 = $316$hi;
    i64toi32_i32$5 = $316;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $2$hi = i64toi32_i32$0;
    $6_1 = $6_1 + 1 | 0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $154 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
     $154 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4_1 = $154;
    $4$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$0 = $11_1;
   i64toi32_i32$4 = -2147483648;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
   $10_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $10$hi = i64toi32_i32$4;
   label$14 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$14
    }
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    break label$1;
   }
   $7_1 = 0;
   label$15 : {
    label$16 : {
     if (($6_1 | 0) <= (0 | 0)) {
      break label$16
     }
     $7_1 = $6_1;
     break label$15;
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $4$hi;
    $81($5_1 + 16 | 0 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $6_1 + 127 | 0 | 0);
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    $91($5_1 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $343 = i64toi32_i32$0;
    $343$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
    $345 = i64toi32_i32$1;
    $345$hi = i64toi32_i32$0;
    i64toi32_i32$4 = (i64toi32_i32$4 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $349 = i64toi32_i32$0;
    $349$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $345$hi;
    i64toi32_i32$4 = $345;
    i64toi32_i32$0 = $349$hi;
    i64toi32_i32$5 = $349;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    $351 = (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$1 = 0;
    $352$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $343$hi;
    i64toi32_i32$5 = $343;
    i64toi32_i32$0 = $352$hi;
    i64toi32_i32$4 = $351;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 3;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $155 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    $155 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $358 = $155;
   $358$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 61;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    $156 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
    $156 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
   }
   $360$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $358$hi;
   i64toi32_i32$0 = $358;
   i64toi32_i32$5 = $360$hi;
   i64toi32_i32$4 = $156;
   i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
   $3_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 48;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $157 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $157 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $364 = $157;
   $364$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 3;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $158 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $158 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
   }
   i64toi32_i32$0 = $158;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$4 = -1;
   i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $367 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $367$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $364$hi;
   i64toi32_i32$1 = $364;
   i64toi32_i32$0 = $367$hi;
   i64toi32_i32$4 = $367;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $368$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$0 = $368$hi;
   i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$4 = $10_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   $6_1 = $2_1 & 7 | 0;
   label$17 : {
    label$18 : {
     label$19 : {
      switch ($89() | 0 | 0) {
      case 0:
       i64toi32_i32$1 = $4$hi;
       $375 = $4_1;
       $375$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$1 = 0;
       $379$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$0 = $3_1;
       i64toi32_i32$5 = $379$hi;
       i64toi32_i32$4 = $6_1 >>> 0 > 4 >>> 0;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $10_1 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$1 = i64toi32_i32$2;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$4 = $3_1;
       $383 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
       i64toi32_i32$1 = 0;
       $384$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $375$hi;
       i64toi32_i32$4 = $375;
       i64toi32_i32$3 = $384$hi;
       i64toi32_i32$0 = $383;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $4_1 = i64toi32_i32$5;
       $4$hi = i64toi32_i32$2;
       label$22 : {
        if (($6_1 | 0) == (4 | 0)) {
         break label$22
        }
        i64toi32_i32$2 = $10$hi;
        $3_1 = $10_1;
        $3$hi = i64toi32_i32$2;
        break label$18;
       }
       i64toi32_i32$2 = $4$hi;
       $389 = $4_1;
       $389$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $10$hi;
       i64toi32_i32$1 = $10_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
       $1_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
       $1$hi = i64toi32_i32$4;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$0 = $10_1;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $3_1 = i64toi32_i32$3;
       $3$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $1$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$4 = i64toi32_i32$3;
       i64toi32_i32$2 = $1$hi;
       i64toi32_i32$0 = $1_1;
       $397 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $398$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $389$hi;
       i64toi32_i32$0 = $389;
       i64toi32_i32$5 = $398$hi;
       i64toi32_i32$2 = $397;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $4_1 = i64toi32_i32$1;
       $4$hi = i64toi32_i32$3;
       break label$17;
      case 1:
       i64toi32_i32$3 = $4$hi;
       $400 = $4_1;
       $400$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$4 = $10_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$2 = 0;
       $406 = ((i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) & ($6_1 | 0) != (0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $407$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$3 = $407$hi;
       i64toi32_i32$0 = $406;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $10_1 = i64toi32_i32$5;
       $10$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$0 = $3_1;
       $411 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $412$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $400$hi;
       i64toi32_i32$0 = $400;
       i64toi32_i32$1 = $412$hi;
       i64toi32_i32$2 = $411;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $4_1 = i64toi32_i32$3;
       $4$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $10$hi;
       $3_1 = $10_1;
       $3$hi = i64toi32_i32$5;
       break label$18;
      case 2:
       break label$19;
      default:
       break label$18;
      };
     }
     i64toi32_i32$5 = $4$hi;
     $415 = $4_1;
     $415$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $10$hi;
     $421 = !($10_1 | i64toi32_i32$5 | 0) & ($6_1 | 0) != (0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $422$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $422$hi;
     i64toi32_i32$2 = $421;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $426 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $427$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $415$hi;
     i64toi32_i32$2 = $415;
     i64toi32_i32$3 = $427$hi;
     i64toi32_i32$4 = $426;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     $3_1 = $10_1;
     $3$hi = i64toi32_i32$1;
    }
    if (!$6_1) {
     break label$1
    }
   }
   $90() | 0;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 112 | 0;
 }
 
 function $81($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $82($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    $4_1 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4_1 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $83($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $84($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$6 = 0, $13$hi = 0, $10$hi = 0, $13_1 = 0, $10_1 = 0, $16$hi = 0, $15$hi = 0, $12$hi = 0, $17$hi = 0, $21$hi = 0, $15_1 = 0, $11$hi = 0, $12_1 = 0, $6_1 = 0, $16_1 = 0, $11_1 = 0, $21_1 = 0, $14$hi = 0, $8_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $18_1 = 0, $22_1 = 0, $22$hi = 0, $24$hi = 0, $9_1 = 0, $19_1 = 0, $19$hi = 0, $322 = 0, $323 = 0, $7_1 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $341 = 0, $342 = 0, $344 = 0, $345 = 0, $20_1 = 0, $20$hi = 0, $346 = 0, $347 = 0, $348 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $355 = 0, $23_1 = 0, $23$hi = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $24_1 = 0, $360 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $368 = 0, $369 = 0, $371 = 0, $372 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $380 = 0, $381 = 0, $382 = 0, $51_1 = 0, $55_1 = 0, $62_1 = 0, $66_1 = 0, $75_1 = 0, $75$hi = 0, $80_1 = 0, $80$hi = 0, $88_1 = 0, $88$hi = 0, $110 = 0, $111 = 0, $111$hi = 0, $112 = 0, $112$hi = 0, $119$hi = 0, $122$hi = 0, $137 = 0, $138 = 0, $138$hi = 0, $139 = 0, $139$hi = 0, $146$hi = 0, $149$hi = 0, $164 = 0, $166 = 0, $166$hi = 0, $170$hi = 0, $181 = 0, $181$hi = 0, $182$hi = 0, $185 = 0, $188 = 0, $188$hi = 0, $193$hi = 0, $203 = 0, $203$hi = 0, $204$hi = 0, $206 = 0, $209 = 0, $209$hi = 0, $214$hi = 0, $224 = 0, $224$hi = 0, $225$hi = 0, $227 = 0, $230 = 0, $230$hi = 0, $235$hi = 0, $245 = 0, $245$hi = 0, $246$hi = 0, $248 = 0, $249 = 0, $249$hi = 0, $252 = 0, $252$hi = 0, $257$hi = 0, $262 = 0, $264$hi = 0, $267 = 0, $268 = 0, $268$hi = 0, $272 = 0, $272$hi = 0, $279 = 0, $279$hi = 0, $283 = 0, $284$hi = 0, $285$hi = 0, $287 = 0, $288$hi = 0, $289$hi = 0, $290$hi = 0, $294$hi = 0, $305 = 0, $305$hi = 0, $308 = 0, $308$hi = 0, $314$hi = 0, $315 = 0, $315$hi = 0, $321 = 0, $321$hi = 0, $330 = 0, $330$hi = 0, $335 = 0, $335$hi = 0, $340 = 0, $340$hi = 0, $342$hi = 0, $343 = 0, $343$hi = 0, $345$hi = 0, $346$hi = 0, $349 = 0, $350$hi = 0, $351$hi = 0, $354 = 0, $355$hi = 0, $361 = 0, $361$hi = 0, $366 = 0, $366$hi = 0, $367 = 0, $367$hi = 0, $370 = 0, $370$hi = 0, $373 = 0, $373$hi = 0, $375$hi = 0, $379 = 0, $379$hi = 0, $383 = 0, $384$hi = 0, $385$hi = 0, $388 = 0, $388$hi = 0, $389 = 0, $389$hi = 0, $396 = 0, $396$hi = 0, $402 = 0, $402$hi = 0, $404$hi = 0, $405 = 0, $405$hi = 0, $406 = 0, $406$hi = 0, $407 = 0, $407$hi = 0, $409$hi = 0, $413 = 0, $414$hi = 0, $415 = 0, $415$hi = 0, $416 = 0, $416$hi = 0, $425 = 0, $425$hi = 0, $429 = 0, $430 = 0, $430$hi = 0, $436 = 0, $436$hi = 0, $440 = 0, $441$hi = 0, $442$hi = 0, $446 = 0, $447$hi = 0, $448 = 0, $448$hi = 0, $449 = 0, $449$hi = 0, $456 = 0, $456$hi = 0, $461 = 0, $461$hi = 0, $466 = 0, $466$hi = 0, $469 = 0, $469$hi = 0, $472 = 0, $473$hi = 0, $476 = 0, $477$hi = 0, $478$hi = 0, $481 = 0, $482$hi = 0, $484$hi = 0, $485 = 0, $485$hi = 0, $489 = 0, $490$hi = 0, $491 = 0, $491$hi = 0, $492 = 0, $492$hi = 0, $493 = 0, $493$hi = 0, $500 = 0, $500$hi = 0, $503 = 0, $503$hi = 0, $506 = 0, $508$hi = 0, $509 = 0, $509$hi = 0, $514 = 0, $514$hi = 0, $515 = 0, $515$hi = 0, $517$hi = 0, $518$hi = 0, $520 = 0, $521$hi = 0, $522$hi = 0, $526 = 0, $527$hi = 0, $541$hi = 0, $545 = 0, $545$hi = 0, $546$hi = 0, $550 = 0, $551$hi = 0, $558 = 0, $560 = 0, $560$hi = 0, $562$hi = 0, $564 = 0, $564$hi = 0, $571$hi = 0, $575 = 0, $575$hi = 0, $576$hi = 0, $580 = 0, $581$hi = 0, $595 = 0, $595$hi = 0, $597$hi = 0, $601$hi = 0, $603 = 0, $603$hi = 0, $636 = 0, $636$hi = 0, $641 = 0, $641$hi = 0, $645$hi = 0, $646 = 0, $646$hi = 0, $647 = 0, $647$hi = 0, $650 = 0, $650$hi = 0, $654 = 0, $655$hi = 0, $667 = 0, $667$hi = 0, $668 = 0, $668$hi = 0, $676 = 0, $680 = 0, $681$hi = 0, $685 = 0, $689 = 0, $690$hi = 0, $694 = 0, $695$hi = 0, $697 = 0, $697$hi = 0, $700 = 0, $703 = 0, $703$hi = 0, $704 = 0, $711 = 0, $716 = 0, $717$hi = 0, $721 = 0, $722$hi = 0, $724 = 0, $724$hi = 0, $727 = 0, $730 = 0, $730$hi = 0, $731 = 0, $737 = 0, $742 = 0, $743$hi = 0, $747 = 0, $748$hi = 0, $749$hi = 0;
  $5_1 = global$0 - 336 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $322 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $322 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $322 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $323 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $323 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $323 & 32767 | 0;
     if (($7_1 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$0 = $1$hi;
     $51_1 = !($1_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $13_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     $55_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $51_1 : $55_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $12$hi = i64toi32_i32$0;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$0 = $3$hi;
     $62_1 = !($3_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     $66_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $62_1 : $66_1) {
      break label$5
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $75_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
     $75$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = $75$hi;
     i64toi32_i32$2 = $75_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $80_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $80$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $80$hi;
      i64toi32_i32$0 = $80_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 2147450880;
      $12_1 = 0;
      $12$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$3;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
     $88_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $88$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $88$hi;
     i64toi32_i32$0 = $88_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$9 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$9
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = !(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = 2147450880;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$0 = i64toi32_i32$4 ? 0 : $12_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
     $12_1 = i64toi32_i32$0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    $8_1 = 0;
    label$11 : {
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$2 = 65535;
     i64toi32_i32$4 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$11
     }
     $110 = $5_1 + 320 | 0;
     i64toi32_i32$1 = $1$hi;
     $111 = $1_1;
     $111$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     $112 = $11_1;
     $112$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $11$hi;
     $8_1 = !($11_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $8_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$3 ? $1_1 : $11_1;
     i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$0;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$4);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $324 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $324 = i64toi32_i32$1
     }
     $119$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $122$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $119$hi;
     i64toi32_i32$2 = $324;
     i64toi32_i32$4 = $122$hi;
     i64toi32_i32$1 = $8_1 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$0;
     i64toi32_i32$5 = $111$hi;
     i64toi32_i32$2 = $112$hi;
     $81($110 | 0, $111 | 0, i64toi32_i32$5 | 0, $112 | 0, i64toi32_i32$2 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$0 | 0;
     i64toi32_i32$3 = $5_1 + 328 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$2;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$5;
     $1$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$2
    }
    $137 = $5_1 + 304 | 0;
    i64toi32_i32$3 = $3$hi;
    $138 = $3_1;
    $138$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $10$hi;
    $139 = $10_1;
    $139$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    $9_1 = !($10_1 | i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $10_1;
    i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$2;
    i64toi32_i32$3 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$3 | 0) == (32 | 0)) {
     $325 = Math_clz32(i64toi32_i32$5) + 32 | 0
    } else {
     $325 = i64toi32_i32$3
    }
    $146$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $149$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $146$hi;
    i64toi32_i32$5 = $325;
    i64toi32_i32$1 = $149$hi;
    i64toi32_i32$3 = $9_1 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $9_1 = i64toi32_i32$2;
    i64toi32_i32$0 = $138$hi;
    i64toi32_i32$5 = $139$hi;
    $81($137 | 0, $138 | 0, i64toi32_i32$0 | 0, $139 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = (i64toi32_i32$2 + $8_1 | 0) + -16 | 0;
    i64toi32_i32$4 = $5_1 + 312 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$5;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$5;
   }
   $164 = $5_1 + 288 | 0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 49;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $326 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    $326 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $166 = $326;
   $166$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$5 = $10_1;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $14_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$4;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 15;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    $327 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $327 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
   }
   $170$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $166$hi;
   i64toi32_i32$4 = $166;
   i64toi32_i32$0 = $170$hi;
   i64toi32_i32$3 = $327;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 1963258675;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = 0;
   $93($164 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$5 = ($5_1 + 288 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $181 = i64toi32_i32$3;
   $181$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $181$hi;
   i64toi32_i32$2 = $181;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
   $182$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $182$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = 0;
   $93($5_1 + 272 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $185 = $5_1 + 256 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $328 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $328 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $188 = $328;
   $188$hi = i64toi32_i32$2;
   i64toi32_i32$0 = ($5_1 + 272 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $329 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $329 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $193$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $188$hi;
   i64toi32_i32$5 = $188;
   i64toi32_i32$0 = $193$hi;
   i64toi32_i32$1 = $329;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   $93($185 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = ($5_1 + 256 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $203 = i64toi32_i32$1;
   $203$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $203$hi;
   i64toi32_i32$0 = $203;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
   $204$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $204$hi;
   i64toi32_i32$0 = 0;
   $93($5_1 + 240 | 0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $206 = $5_1 + 224 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 63;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $331 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $331 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
   }
   $209 = $331;
   $209$hi = i64toi32_i32$0;
   i64toi32_i32$2 = ($5_1 + 240 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $332 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
    $332 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $214$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $209$hi;
   i64toi32_i32$5 = $209;
   i64toi32_i32$2 = $214$hi;
   i64toi32_i32$4 = $332;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$4 = 0;
   $93($206 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$5 = ($5_1 + 224 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $224 = i64toi32_i32$4;
   $224$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $224$hi;
   i64toi32_i32$2 = $224;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   $225$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $225$hi;
   i64toi32_i32$2 = 0;
   $93($5_1 + 208 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $227 = $5_1 + 192 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 208 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 212 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $333 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $333 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $230 = $333;
   $230$hi = i64toi32_i32$2;
   i64toi32_i32$0 = ($5_1 + 208 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $334 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $334 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $235$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $230$hi;
   i64toi32_i32$5 = $230;
   i64toi32_i32$0 = $235$hi;
   i64toi32_i32$3 = $334;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = 0;
   $93($227 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$5 = ($5_1 + 192 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $245 = i64toi32_i32$3;
   $245$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $245$hi;
   i64toi32_i32$0 = $245;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
   $246$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $246$hi;
   i64toi32_i32$0 = 0;
   $93($5_1 + 176 | 0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $248 = $5_1 + 160 | 0;
   i64toi32_i32$0 = $2$hi;
   $249 = $2_1;
   $249$hi = i64toi32_i32$0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $336 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $336 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $252 = $336;
   $252$hi = i64toi32_i32$0;
   i64toi32_i32$2 = ($5_1 + 176 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $337 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $337 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $257$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $252$hi;
   i64toi32_i32$5 = $252;
   i64toi32_i32$2 = $257$hi;
   i64toi32_i32$1 = $337;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $249$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = 0;
   $93($248 | 0, $249 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   $262 = $5_1 + 144 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    $338 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
    $338 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
   }
   $264$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $264$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = 0;
   $93($262 | 0, $338 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
   $267 = $5_1 + 112 | 0;
   i64toi32_i32$4 = i64toi32_i32$1;
   $268 = $4_1;
   $268$hi = i64toi32_i32$1;
   i64toi32_i32$0 = ($5_1 + 160 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $272 = i64toi32_i32$4;
   $272$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$0 = (i64toi32_i32$0 + 144 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $279 = i64toi32_i32$4;
   $279$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$0 = $10_1;
   i64toi32_i32$4 = $279$hi;
   i64toi32_i32$2 = $279;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2_1 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$2 = $10_1;
   $283 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $284$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $272$hi;
   i64toi32_i32$2 = $272;
   i64toi32_i32$3 = $284$hi;
   i64toi32_i32$0 = $283;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $285$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 1;
   $287 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $288$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $285$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$5 = $288$hi;
   i64toi32_i32$2 = $287;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $289$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $289$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
   $290$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $268$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = $290$hi;
   i64toi32_i32$2 = 0;
   $93($267 | 0, $268 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $294$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $294$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = 0;
   $93($5_1 + 128 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
   label$12 : {
    label$13 : {
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $339 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $339 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $16_1 = $339;
     $16$hi = i64toi32_i32$3;
     $305 = $16_1;
     $305$hi = i64toi32_i32$3;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 128 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $341 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $341 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $308 = $341;
     $308$hi = i64toi32_i32$3;
     i64toi32_i32$1 = ($5_1 + 128 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $342 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $342 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $314$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $308$hi;
     i64toi32_i32$2 = $308;
     i64toi32_i32$1 = $314$hi;
     i64toi32_i32$5 = $342;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $315 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $315$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $305$hi;
     i64toi32_i32$3 = $305;
     i64toi32_i32$2 = $315$hi;
     i64toi32_i32$5 = $315;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $13_1 = i64toi32_i32$4;
     $13$hi = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = -13927;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $18_1 = i64toi32_i32$2;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $344 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $344 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $2_1 = $344;
     $2$hi = i64toi32_i32$1;
     $321 = $2_1;
     $321$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$0 = 65536;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $19_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      $345 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $345 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
     }
     $20_1 = $345;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $20_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $346 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $346 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $4_1 = $346;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $321$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = __wasm_i64_mul($321 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$0;
     $21$hi = i64toi32_i32$1;
     $330 = i64toi32_i32$0;
     $330$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      $347 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $347 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $22_1 = $347;
     $22$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $348 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $348 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $10_1 = $348;
     $10$hi = i64toi32_i32$4;
     $335 = $10_1;
     $335$hi = i64toi32_i32$4;
     i64toi32_i32$0 = ($5_1 + 112 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $350 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $350 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $340 = $350;
     $340$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$1 = $15_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $351 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $351 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $342$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $340$hi;
     i64toi32_i32$4 = $340;
     i64toi32_i32$1 = $342$hi;
     i64toi32_i32$5 = $351;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $343 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $343$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$0 = $17_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $352 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $352 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $345$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $343$hi;
     i64toi32_i32$1 = $343;
     i64toi32_i32$0 = $345$hi;
     i64toi32_i32$5 = $352;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $346$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$5 = $16_1;
     $349 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $350$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $346$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$2 = $350$hi;
     i64toi32_i32$1 = $349;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $351$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$4 = $18_1;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$1 = $13_1;
     $354 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $355$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $351$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$3 = $355$hi;
     i64toi32_i32$5 = $354;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $353 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $353 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
     }
     $13_1 = $353;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $335$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = __wasm_i64_mul($335 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $361 = i64toi32_i32$0;
     $361$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $330$hi;
     i64toi32_i32$2 = $330;
     i64toi32_i32$0 = $361$hi;
     i64toi32_i32$5 = $361;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$5 = $21_1;
     i64toi32_i32$4 = 0;
     $366 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     $366$hi = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$3;
     $367 = i64toi32_i32$1;
     $367$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $15_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $15_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $15$hi = i64toi32_i32$3;
     $370 = $15_1;
     $370$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $355 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      $355 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $23_1 = $355;
     $23$hi = i64toi32_i32$5;
     $373 = $23_1;
     $373$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $356 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $356 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $375$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $373$hi;
     i64toi32_i32$5 = $373;
     i64toi32_i32$3 = $375$hi;
     i64toi32_i32$2 = $356;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $370$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = __wasm_i64_mul($370 | 0, i64toi32_i32$5 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $379 = i64toi32_i32$4;
     $379$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $367$hi;
     i64toi32_i32$3 = $367;
     i64toi32_i32$4 = $379$hi;
     i64toi32_i32$2 = $379;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $17_1 = i64toi32_i32$0;
     $17$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16_1;
     $383 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $384$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $366$hi;
     i64toi32_i32$2 = $366;
     i64toi32_i32$1 = $384$hi;
     i64toi32_i32$3 = $383;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $385$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $388 = i64toi32_i32$2;
     $388$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $385$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $388$hi;
     i64toi32_i32$3 = $388;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $389 = i64toi32_i32$1;
     $389$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $396 = i64toi32_i32$5;
     $396$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$0 = $21_1;
     i64toi32_i32$5 = $396$hi;
     i64toi32_i32$3 = $396;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $16_1 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$3 = $21_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $357 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
      $357 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $402 = $357;
     $402$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $358 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $358 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
     }
     $404$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $402$hi;
     i64toi32_i32$1 = $402;
     i64toi32_i32$4 = $404$hi;
     i64toi32_i32$0 = $358;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $405 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $405$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $389$hi;
     i64toi32_i32$3 = $389;
     i64toi32_i32$1 = $405$hi;
     i64toi32_i32$0 = $405;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $406 = i64toi32_i32$5;
     $406$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $17$hi;
     $407 = $17_1;
     $407$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $359 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $359 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $409$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $407$hi;
     i64toi32_i32$2 = $407;
     i64toi32_i32$4 = $409$hi;
     i64toi32_i32$0 = $359;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$0 = $17_1;
     $413 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $414$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $406$hi;
     i64toi32_i32$0 = $406;
     i64toi32_i32$5 = $414$hi;
     i64toi32_i32$2 = $413;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $415 = i64toi32_i32$4;
     $415$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     $416 = $16_1;
     $416$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$3 = $18_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$0 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$3;
     $21$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $425 = i64toi32_i32$3;
     $425$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$1 = $21_1;
     i64toi32_i32$3 = $425$hi;
     i64toi32_i32$2 = $425;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $17_1 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$2 = $21_1;
     $429 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $430 = $429;
     $430$hi = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$2 = $22_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = -2;
     i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
     $21_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $436 = i64toi32_i32$2;
     $436$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$2 = $436$hi;
     i64toi32_i32$1 = $436;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $24_1 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$1 = $17_1;
     $440 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $441$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $430$hi;
     i64toi32_i32$1 = $430;
     i64toi32_i32$5 = $441$hi;
     i64toi32_i32$0 = $440;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $442$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $416$hi;
     i64toi32_i32$4 = $416;
     i64toi32_i32$1 = $442$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $17_1 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$0 = $16_1;
     $446 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $447$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $415$hi;
     i64toi32_i32$0 = $415;
     i64toi32_i32$2 = $447$hi;
     i64toi32_i32$4 = $446;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $448 = i64toi32_i32$1;
     $448$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     $449 = $17_1;
     $449$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $16_1 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $456 = i64toi32_i32$0;
     $456$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = $16_1;
     i64toi32_i32$0 = $456$hi;
     i64toi32_i32$4 = $456;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $461 = i64toi32_i32$3;
     $461$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$3 = $461$hi;
     i64toi32_i32$4 = $461;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $13_1 = i64toi32_i32$0;
     $13$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $466 = i64toi32_i32$5;
     $466$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$5 = $466$hi;
     i64toi32_i32$4 = $466;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $360 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      $360 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
     }
     $469 = $360;
     $469$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     $472 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $473$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$2 = $4_1;
     $476 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $477$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $473$hi;
     i64toi32_i32$2 = $472;
     i64toi32_i32$0 = $477$hi;
     i64toi32_i32$1 = $476;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $478$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$4 = $15_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$1 = $13_1;
     $481 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $482$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $478$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$3 = $482$hi;
     i64toi32_i32$2 = $481;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      $362 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
      $362 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $484$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $469$hi;
     i64toi32_i32$5 = $469;
     i64toi32_i32$4 = $484$hi;
     i64toi32_i32$2 = $362;
     i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
     $485 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $485$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $449$hi;
     i64toi32_i32$1 = $449;
     i64toi32_i32$5 = $485$hi;
     i64toi32_i32$2 = $485;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$2 = $17_1;
     $489 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $490$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $448$hi;
     i64toi32_i32$2 = $448;
     i64toi32_i32$0 = $490$hi;
     i64toi32_i32$1 = $489;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $491 = i64toi32_i32$5;
     $491$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $492 = $4_1;
     $492$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $24$hi;
     $493 = $24_1;
     $493$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $500 = i64toi32_i32$2;
     $500$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = $500$hi;
     i64toi32_i32$1 = $500;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $363 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $363 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
     }
     $503 = $363;
     $503$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     $506 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = $506;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      $364 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
      $364 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     }
     $508$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $503$hi;
     i64toi32_i32$5 = $503;
     i64toi32_i32$1 = $508$hi;
     i64toi32_i32$3 = $364;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $509 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $509$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $493$hi;
     i64toi32_i32$4 = $493;
     i64toi32_i32$5 = $509$hi;
     i64toi32_i32$3 = $509;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$3 = $24_1;
     i64toi32_i32$1 = 0;
     $514 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     $514$hi = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$0;
     $515 = i64toi32_i32$2;
     $515$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$3 = $15_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $365 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
      $365 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $517$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $515$hi;
     i64toi32_i32$1 = $515;
     i64toi32_i32$3 = $517$hi;
     i64toi32_i32$4 = $365;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $518$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $518$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2_1;
     $520 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $521$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $514$hi;
     i64toi32_i32$4 = $514;
     i64toi32_i32$2 = $521$hi;
     i64toi32_i32$1 = $520;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $522$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $492$hi;
     i64toi32_i32$0 = $492;
     i64toi32_i32$4 = $522$hi;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     $526 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $527$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $491$hi;
     i64toi32_i32$1 = $491;
     i64toi32_i32$3 = $527$hi;
     i64toi32_i32$0 = $526;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = 131071;
     i64toi32_i32$0 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$13
     }
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = $23$hi;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$0 = $20_1;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$1 = $23_1;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $19_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $19$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $14$hi;
     $93($5_1 + 80 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 49;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $368 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $368 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $541$hi = i64toi32_i32$5;
     i64toi32_i32$1 = ($5_1 + 80 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $545 = i64toi32_i32$5;
     $545$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $541$hi;
     i64toi32_i32$1 = $368;
     i64toi32_i32$5 = $545$hi;
     i64toi32_i32$2 = $545;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     $546$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     $550 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = 0;
     $551$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $546$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$1 = $551$hi;
     i64toi32_i32$4 = $550;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
     $13_1 = i64toi32_i32$5;
     $13$hi = i64toi32_i32$3;
     $6_1 = $6_1 + 16382 | 0;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$5;
     break label$12;
    }
    $558 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $369 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $369 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $560 = $369;
    $560$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
     $371 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
     $371 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    }
    $562$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $560$hi;
    i64toi32_i32$0 = $560;
    i64toi32_i32$5 = $562$hi;
    i64toi32_i32$4 = $371;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $2_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$5;
    $564 = $2_1;
    $564$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $372 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $372 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4_1 = $372;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$0 = $564$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $14$hi;
    $93($558 | 0, $564 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $374 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
     $374 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $571$hi = i64toi32_i32$5;
    i64toi32_i32$4 = ($5_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $575 = i64toi32_i32$5;
    $575$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $571$hi;
    i64toi32_i32$4 = $374;
    i64toi32_i32$5 = $575$hi;
    i64toi32_i32$0 = $575;
    i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $576$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$4;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    $580 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$3 = 0;
    $581$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $576$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$4 = $581$hi;
    i64toi32_i32$1 = $580;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    $13_1 = i64toi32_i32$5;
    $13$hi = i64toi32_i32$2;
    $6_1 = $6_1 + 16383 | 0;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    $10_1 = i64toi32_i32$4;
    $10$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    $22_1 = $1_1;
    $22$hi = i64toi32_i32$5;
   }
   label$14 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$14
    }
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $12$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$3;
    break label$1;
   }
   label$15 : {
    label$16 : {
     if (($6_1 | 0) < (1 | 0)) {
      break label$16
     }
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$5 = $13_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $375 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $375 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $595 = $375;
     $595$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 63;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $376 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $376 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $597$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $595$hi;
     i64toi32_i32$2 = $595;
     i64toi32_i32$3 = $597$hi;
     i64toi32_i32$1 = $376;
     i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $13_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $13$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 48;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $377 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $377 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $601$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$5 = 65535;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $603 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $603$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $601$hi;
     i64toi32_i32$2 = $377;
     i64toi32_i32$3 = $603$hi;
     i64toi32_i32$1 = $603;
     i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $15_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $15$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $378 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $378 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $4_1 = $378;
     $4$hi = i64toi32_i32$2;
     break label$15;
    }
    label$17 : {
     if (($6_1 | 0) > (-113 | 0)) {
      break label$17
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$5 = $4$hi;
    $91($5_1 + 64 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$2 = $19$hi;
    $81($5_1 + 48 | 0 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$2 | 0, $6_1 + 112 | 0 | 0);
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$5;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $15_1 = i64toi32_i32$5;
    $15$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$1 = $15$hi;
    $93($5_1 + 32 | 0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $636 = i64toi32_i32$1;
    $636$hi = i64toi32_i32$3;
    i64toi32_i32$5 = ($5_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $380 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $380 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $641 = $380;
    $641$hi = i64toi32_i32$3;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$5;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $381 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $381 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $645$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $641$hi;
    i64toi32_i32$5 = $641;
    i64toi32_i32$1 = $645$hi;
    i64toi32_i32$2 = $381;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $646 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $646$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $636$hi;
    i64toi32_i32$3 = $636;
    i64toi32_i32$5 = $646$hi;
    i64toi32_i32$2 = $646;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
    $647 = i64toi32_i32$0;
    $647$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$3;
    $650 = i64toi32_i32$4;
    $650$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     $382 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
     $382 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
    }
    $1_1 = $382;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $650$hi;
    i64toi32_i32$3 = $650;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $1_1;
    $654 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $655$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $647$hi;
    i64toi32_i32$2 = $647;
    i64toi32_i32$4 = $655$hi;
    i64toi32_i32$1 = $654;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    $13_1 = i64toi32_i32$5;
    $13$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $93($5_1 + 16 | 0 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$3 | 0, 3 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   $93($5_1 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $14_1 | 0, i64toi32_i32$0 | 0, 5 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$5 = $15$hi;
   $667 = $15_1;
   $667$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   $668 = $2_1;
   $668$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
   $1_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$1 = $3_1;
   $676 = i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$5 = $1_1;
   $680 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $681$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$5 = $13_1;
   i64toi32_i32$3 = $681$hi;
   i64toi32_i32$4 = $680;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$4 = $14_1;
   $685 = i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$5 = $14_1;
   $689 = (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $676 : $685;
   i64toi32_i32$4 = 0;
   $690$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $668$hi;
   i64toi32_i32$5 = $668;
   i64toi32_i32$1 = $690$hi;
   i64toi32_i32$2 = $689;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = $2_1;
   $694 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $695$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $667$hi;
   i64toi32_i32$2 = $667;
   i64toi32_i32$0 = $695$hi;
   i64toi32_i32$5 = $694;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$3;
   $697 = i64toi32_i32$1;
   $697$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$2 = 2147418112;
   i64toi32_i32$5 = 0;
   $700 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
   $703 = i64toi32_i32$4;
   $703$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$4 = $703$hi;
   i64toi32_i32$2 = $703;
   $704 = i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$2 = ($5_1 + 16 | 0) + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2_1;
   $711 = i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$5 = $2_1;
   $716 = $700 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) | 0 ? $704 : $711) | 0;
   i64toi32_i32$4 = 0;
   $717$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$2 = $717$hi;
   i64toi32_i32$3 = $716;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3_1;
   $721 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $722$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $697$hi;
   i64toi32_i32$3 = $697;
   i64toi32_i32$1 = $722$hi;
   i64toi32_i32$5 = $721;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $3_1 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$0;
   $724 = i64toi32_i32$2;
   $724$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$5 = 0;
   $727 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $730 = i64toi32_i32$4;
   $730$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$4 = $730$hi;
   i64toi32_i32$3 = $730;
   $731 = i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$3 = $5_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   $737 = i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $4_1;
   $742 = $727 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) | 0 ? $731 : $737) | 0;
   i64toi32_i32$4 = 0;
   $743$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = $743$hi;
   i64toi32_i32$0 = $742;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $747 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $748$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $724$hi;
   i64toi32_i32$0 = $724;
   i64toi32_i32$2 = $748$hi;
   i64toi32_i32$5 = $747;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $749$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$1 = $749$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $12_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $12$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $12_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $5_1 + 336 | 0;
 }
 
 function $85($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $6_1 = 0, $6$hi = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $3_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $33$hi = 0, $37_1 = 0, $50_1 = 0, $50$hi = 0, $54$hi = 0, $63_1 = 0, $63$hi = 0, $64_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$1_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 60;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $26_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $26_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $6_1 = $26_1;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 4;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $27_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $27_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $27_1;
    i64toi32_i32$1 = 1006632960;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$2;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$0 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $28_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $28_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $6_1 = $28_1;
    $6$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $29_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    i64toi32_i32$4 = $29_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $5_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $5$hi;
    if (!!($5_1 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   $32_1 = $2_1;
   i64toi32_i32$3 = $5$hi;
   $33_1 = $5_1;
   $33$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   $37_1 = Math_clz32($4_1) + 32 | 0;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $30_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $30_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = 0;
   $3_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $37_1 : Math_clz32($30_1);
   i64toi32_i32$3 = $33$hi;
   i64toi32_i32$4 = 0;
   $81($32_1 | 0, $33_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$5 = $2_1 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $50_1 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $50$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 15372 - $3_1 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $31_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $31_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $54$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $50$hi;
   i64toi32_i32$4 = $50_1;
   i64toi32_i32$3 = $54$hi;
   i64toi32_i32$0 = $31_1;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$3;
   $6$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$5 = $4_1;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $63_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $63$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = $63$hi;
  i64toi32_i32$0 = $63_1;
  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
  $64_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = $0_1;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $64_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $86($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $3_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $30_1 = 0, $38_1 = 0, $38$hi = 0, $42$hi = 0, $48_1 = 0, $49_1 = 0, $49$hi = 0, $53$hi = 0, $54_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
    $4_1 = $3_1 & 2147483647 | 0;
    if (($4_1 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $24_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $24_1;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$5;
    break label$1;
   }
   label$3 : {
    if ($4_1 >>> 0 < 2139095040 >>> 0) {
     break label$3
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $25_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $25_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $25_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    break label$1;
   }
   label$4 : {
    if ($4_1) {
     break label$4
    }
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = 0;
   $30_1 = $4_1;
   $4_1 = Math_clz32($4_1);
   i64toi32_i32$5 = 0;
   $81($2_1 | 0, $30_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 + 81 | 0 | 0);
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $38_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $4_1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $26_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $26_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $42$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $38$hi;
   i64toi32_i32$5 = $38_1;
   i64toi32_i32$1 = $42$hi;
   i64toi32_i32$3 = $26_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $48_1 = i64toi32_i32$1;
  i64toi32_i32$5 = $5$hi;
  $49_1 = $5_1;
  $49$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $3_1 & -2147483648 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $27_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $27_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $53$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$5 = $49_1;
  i64toi32_i32$0 = $53$hi;
  i64toi32_i32$3 = $27_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $54_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $48_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $54_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $87($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $5_1 = 0, $5$hi = 0, $21_1 = 0, $22_1 = 0, $19_1 = 0, $27_1 = 0, $27$hi = 0, $31$hi = 0, $32_1 = 0, $32$hi = 0, $36$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   $3_1 = $1_1 >> 31 | 0;
   $3_1 = ($1_1 ^ $3_1 | 0) - $3_1 | 0;
   i64toi32_i32$0 = 0;
   $19_1 = $3_1;
   $3_1 = Math_clz32($3_1);
   i64toi32_i32$1 = 0;
   $81($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $27_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $31$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$1 = $27_1;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $32_1 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1_1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$5 = $32_1;
   i64toi32_i32$2 = $36$hi;
   i64toi32_i32$3 = $22_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $88($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $3_1 = 0, $3$hi = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $11_1 = 0, $19_1 = 0, $19$hi = 0, $23$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $1_1;
   $1_1 = Math_clz32($1_1);
   i64toi32_i32$1 = 0;
   $81($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $1_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $19_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19_1;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $17_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $89() {
  return 0 | 0;
 }
 
 function $90() {
  return 0 | 0;
 }
 
 function $91($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $92($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $14$hi = 0, $5_1 = 0, $11$hi = 0, $11_1 = 0, $14_1 = 0, $12$hi = 0, $6_1 = 0, $18$hi = 0, $12_1 = 0, $16$hi = 0, $10$hi = 0, $8_1 = 0, $10_1 = 0, $18_1 = 0, $20$hi = 0, $16_1 = 0, $7_1 = 0, $17$hi = 0, $13_1 = 0, $13$hi = 0, $15$hi = 0, $17_1 = 0, $20_1 = 0, $15_1 = 0, $9_1 = 0, $19$hi = 0, $21$hi = 0, $22$hi = 0, $23$hi = 0, $24$hi = 0, $220 = 0, $221 = 0, $223 = 0, $224 = 0, $226 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $19_1 = 0, $233 = 0, $234 = 0, $235 = 0, $237 = 0, $21_1 = 0, $239 = 0, $22_1 = 0, $240 = 0, $24_1 = 0, $241 = 0, $242 = 0, $243 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $53_1 = 0, $57_1 = 0, $64_1 = 0, $68_1 = 0, $77_1 = 0, $77$hi = 0, $89_1 = 0, $89$hi = 0, $111 = 0, $112 = 0, $112$hi = 0, $113 = 0, $113$hi = 0, $120$hi = 0, $123$hi = 0, $140 = 0, $141 = 0, $141$hi = 0, $142 = 0, $142$hi = 0, $149$hi = 0, $152$hi = 0, $170 = 0, $170$hi = 0, $175 = 0, $175$hi = 0, $182 = 0, $182$hi = 0, $189 = 0, $189$hi = 0, $194 = 0, $194$hi = 0, $203 = 0, $203$hi = 0, $205 = 0, $205$hi = 0, $207 = 0, $207$hi = 0, $215 = 0, $215$hi = 0, $217 = 0, $217$hi = 0, $219 = 0, $219$hi = 0, $222 = 0, $224$hi = 0, $225 = 0, $225$hi = 0, $227 = 0, $227$hi = 0, $236 = 0, $236$hi = 0, $238 = 0, $238$hi = 0, $244 = 0, $244$hi = 0, $249 = 0, $249$hi = 0, $252$hi = 0, $23_1 = 0, $268 = 0, $268$hi = 0, $272 = 0, $273 = 0, $273$hi = 0, $277 = 0, $277$hi = 0, $281 = 0, $282$hi = 0, $283$hi = 0, $286 = 0, $286$hi = 0, $287 = 0, $287$hi = 0, $288 = 0, $288$hi = 0, $291 = 0, $292$hi = 0, $295 = 0, $296$hi = 0, $297$hi = 0, $301 = 0, $302$hi = 0, $303 = 0, $303$hi = 0, $310 = 0, $310$hi = 0, $314 = 0, $316 = 0, $316$hi = 0, $318$hi = 0, $319 = 0, $319$hi = 0, $320 = 0, $320$hi = 0, $321 = 0, $321$hi = 0, $323$hi = 0, $327 = 0, $328$hi = 0, $329 = 0, $329$hi = 0, $330 = 0, $330$hi = 0, $332 = 0, $332$hi = 0, $335 = 0, $336$hi = 0, $339 = 0, $340$hi = 0, $341$hi = 0, $344 = 0, $345$hi = 0, $347$hi = 0, $348 = 0, $348$hi = 0, $352 = 0, $353$hi = 0, $354 = 0, $354$hi = 0, $355 = 0, $355$hi = 0, $358 = 0, $359$hi = 0, $362 = 0, $363$hi = 0, $364$hi = 0, $368 = 0, $369$hi = 0, $379 = 0, $379$hi = 0, $381$hi = 0, $384 = 0, $384$hi = 0, $386$hi = 0, $390 = 0, $390$hi = 0, $392$hi = 0, $426 = 0, $426$hi = 0, $428 = 0, $428$hi = 0, $429 = 0, $429$hi = 0, $431 = 0, $431$hi = 0, $435 = 0, $435$hi = 0, $437 = 0, $438$hi = 0, $443 = 0, $443$hi = 0, $447 = 0, $447$hi = 0, $456$hi = 0, $458 = 0, $458$hi = 0, $464 = 0, $470 = 0, $470$hi = 0, $475 = 0, $476$hi = 0, $480 = 0, $480$hi = 0, $484 = 0, $484$hi = 0, $487 = 0, $487$hi = 0, $491 = 0, $492$hi = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $11_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $12_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $220 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $220 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $13_1 = $220;
  $13$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $221 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $221 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $221 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $223 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $223 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $223 & 32767 | 0;
     if (($7_1 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$1 = $1$hi;
     $53_1 = !($1_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $14$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $14_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     $57_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $53_1 : $57_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$1;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$1 = $3$hi;
     $64_1 = !($3_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     $68_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0 ? $64_1 : $68_1) {
      break label$5
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$2 = $14_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $77_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $77$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$2 = $77$hi;
     i64toi32_i32$0 = $77_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$0 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $89_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
     $89$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$2 = $89$hi;
     i64toi32_i32$1 = $89_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $14$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$0 = $14_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     label$9 : {
      i64toi32_i32$2 = $2$hi;
      if (!!($2_1 | i64toi32_i32$2 | 0)) {
       break label$9
      }
      i64toi32_i32$2 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$1;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$3 = $14$hi;
     i64toi32_i32$0 = $14_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    $8_1 = 0;
    label$12 : {
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$2 = $14_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$0 = -1;
     if (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$12
     }
     $111 = $5_1 + 80 | 0;
     i64toi32_i32$2 = $1$hi;
     $112 = $1_1;
     $112$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $12$hi;
     $113 = $12_1;
     $113$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $12$hi;
     $8_1 = !($12_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $12_1;
     i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$1;
     i64toi32_i32$2 = Math_clz32(i64toi32_i32$0);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$2 | 0) == (32 | 0)) {
      $224 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $224 = i64toi32_i32$2
     }
     $120$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $123$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $120$hi;
     i64toi32_i32$3 = $224;
     i64toi32_i32$0 = $123$hi;
     i64toi32_i32$2 = $8_1 << 6 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$1;
     i64toi32_i32$5 = $112$hi;
     i64toi32_i32$3 = $113$hi;
     $81($111 | 0, $112 | 0, i64toi32_i32$5 | 0, $113 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$1 | 0;
     i64toi32_i32$4 = $5_1 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $12_1 = i64toi32_i32$3;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $226 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $226 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $13_1 = $226;
     $13$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 80 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$2 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$2
    }
    $140 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $141 = $3_1;
    $141$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $142 = $10_1;
    $142$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $10$hi;
    $9_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$3 = i64toi32_i32$0 ? $3_1 : $10_1;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $228 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $228 = i64toi32_i32$5
    }
    $149$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $152$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $149$hi;
    i64toi32_i32$3 = $228;
    i64toi32_i32$2 = $152$hi;
    i64toi32_i32$5 = $9_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    i64toi32_i32$1 = $141$hi;
    i64toi32_i32$3 = $142$hi;
    $81($140 | 0, $141 | 0, i64toi32_i32$1 | 0, $142 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$0 = $5_1 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$3;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $229 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
    $229 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $14_1 = $229;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $14_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$0;
   $170 = $2_1;
   $170$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $230 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $230 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $4_1 = $230;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $170$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($170 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $15_1 = i64toi32_i32$1;
   $15$hi = i64toi32_i32$3;
   $175 = i64toi32_i32$1;
   $175$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $231 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
    $231 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
   }
   $14_1 = $231;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$3 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $182 = i64toi32_i32$3;
   $182$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $175$hi;
   i64toi32_i32$1 = $175;
   i64toi32_i32$3 = $182$hi;
   i64toi32_i32$5 = $182;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $16_1 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $232 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $232 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $17_1 = $232;
   $17$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $189 = i64toi32_i32$0;
   $189$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $17$hi;
   i64toi32_i32$4 = $17_1;
   i64toi32_i32$0 = $189$hi;
   i64toi32_i32$5 = $189;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $18_1 = i64toi32_i32$3;
   $18$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $17$hi;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$4 = $17$hi;
   i64toi32_i32$5 = $17_1;
   i64toi32_i32$1 = 0;
   $194 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $194$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $12_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $12$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $203 = i64toi32_i32$5;
   $203$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19_1;
   i64toi32_i32$5 = $203$hi;
   i64toi32_i32$4 = $203;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $17_1 = i64toi32_i32$0;
   $17$hi = i64toi32_i32$3;
   $205 = i64toi32_i32$0;
   $205$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 49;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $233 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
    $233 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
   }
   $207 = $233;
   $207$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    $234 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
    $234 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
   }
   $20_1 = $234;
   $20$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $207$hi;
   i64toi32_i32$1 = $207;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$4 = $20_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $3_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $215 = i64toi32_i32$2;
   $215$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $205$hi;
   i64toi32_i32$3 = $205;
   i64toi32_i32$2 = $215$hi;
   i64toi32_i32$4 = $215;
   i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $10_1 = i64toi32_i32$5;
   $10$hi = i64toi32_i32$0;
   $217 = i64toi32_i32$5;
   $217$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = $16_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $235 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $235 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $219 = $235;
   $219$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$0 = $16_1;
   i64toi32_i32$1 = $15$hi;
   i64toi32_i32$4 = $15_1;
   $222 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = $222;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
    $237 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
    $237 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
   }
   $224$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $219$hi;
   i64toi32_i32$0 = $219;
   i64toi32_i32$4 = $224$hi;
   i64toi32_i32$1 = $237;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $225 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $225$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $217$hi;
   i64toi32_i32$3 = $217;
   i64toi32_i32$0 = $225$hi;
   i64toi32_i32$1 = $225;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $15_1 = i64toi32_i32$2;
   $15$hi = i64toi32_i32$5;
   $227 = i64toi32_i32$2;
   $227$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $13$hi;
   i64toi32_i32$4 = $13_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $16_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $16$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$4 = $16$hi;
   i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $21_1 = i64toi32_i32$4;
   $21$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$4 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $236 = i64toi32_i32$4;
   $236$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$5 = $21_1;
   i64toi32_i32$4 = $236$hi;
   i64toi32_i32$1 = $236;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $13_1 = i64toi32_i32$0;
   $13$hi = i64toi32_i32$2;
   $238 = i64toi32_i32$0;
   $238$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $20$hi;
   i64toi32_i32$3 = $20_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $239 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $239 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   i64toi32_i32$2 = $239;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = -2147483648;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $244 = i64toi32_i32$2;
   $244$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $238$hi;
   i64toi32_i32$5 = $238;
   i64toi32_i32$2 = $244$hi;
   i64toi32_i32$1 = $244;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $20_1 = i64toi32_i32$4;
   $20$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $249 = i64toi32_i32$5;
   $249$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$5 = $249$hi;
   i64toi32_i32$1 = $249;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $22_1 = i64toi32_i32$2;
   $22$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    $240 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
    $240 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
   }
   $252$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $227$hi;
   i64toi32_i32$4 = $227;
   i64toi32_i32$0 = $252$hi;
   i64toi32_i32$1 = $240;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $23_1 = i64toi32_i32$5;
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $194$hi;
   i64toi32_i32$3 = $194;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$5;
   $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
   label$13 : {
    label$14 : {
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $24_1 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$5 | 0, $16_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $268 = i64toi32_i32$3;
     $268$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$2 = $24_1;
     i64toi32_i32$3 = $268$hi;
     i64toi32_i32$1 = $268;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$1 = $24_1;
     $272 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $273 = $272;
     $273$hi = i64toi32_i32$5;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $277 = i64toi32_i32$0;
     $277$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = $277$hi;
     i64toi32_i32$2 = $277;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $14_1 = i64toi32_i32$3;
     $14$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $14$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     $281 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $282$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $273$hi;
     i64toi32_i32$2 = $273;
     i64toi32_i32$4 = $282$hi;
     i64toi32_i32$1 = $281;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $283$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $286 = i64toi32_i32$2;
     $286$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $283$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$2 = $286$hi;
     i64toi32_i32$1 = $286;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $287 = i64toi32_i32$4;
     $287$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $14$hi;
     $288 = $14_1;
     $288$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$3 = $17_1;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19_1;
     $291 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $292$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$5 = $17_1;
     $295 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $296$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $292$hi;
     i64toi32_i32$5 = $291;
     i64toi32_i32$3 = $296$hi;
     i64toi32_i32$0 = $295;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $297$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $288$hi;
     i64toi32_i32$1 = $288;
     i64toi32_i32$5 = $297$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$0 = $14_1;
     $301 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $302$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $287$hi;
     i64toi32_i32$0 = $287;
     i64toi32_i32$2 = $302$hi;
     i64toi32_i32$1 = $301;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $303 = i64toi32_i32$5;
     $303$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $310 = i64toi32_i32$0;
     $310$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $310$hi;
     i64toi32_i32$1 = $310;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $314 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = $314;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $241 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $241 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $316 = $241;
     $316$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $242 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $242 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $318$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $316$hi;
     i64toi32_i32$5 = $316;
     i64toi32_i32$3 = $318$hi;
     i64toi32_i32$4 = $242;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $319 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $319$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $303$hi;
     i64toi32_i32$1 = $303;
     i64toi32_i32$5 = $319$hi;
     i64toi32_i32$4 = $319;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $320 = i64toi32_i32$0;
     $320$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     $321 = $4_1;
     $321$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $243 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
      $243 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $323$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $321$hi;
     i64toi32_i32$2 = $321;
     i64toi32_i32$3 = $323$hi;
     i64toi32_i32$4 = $243;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$4 = $4_1;
     $327 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $328$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $320$hi;
     i64toi32_i32$4 = $320;
     i64toi32_i32$0 = $328$hi;
     i64toi32_i32$2 = $327;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $329 = i64toi32_i32$3;
     $329$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     $330 = $2_1;
     $330$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $245 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $245 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     $332 = $245;
     $332$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$5 = $13_1;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$2 = $21_1;
     $335 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $336$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$2 = $20_1;
     i64toi32_i32$1 = $13_1;
     $339 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $340$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $336$hi;
     i64toi32_i32$1 = $335;
     i64toi32_i32$5 = $340$hi;
     i64toi32_i32$4 = $339;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $341$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$2 = $22_1;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$4 = $20_1;
     $344 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $345$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $341$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$3 = $345$hi;
     i64toi32_i32$1 = $344;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      $246 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $246 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     }
     $347$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $332$hi;
     i64toi32_i32$0 = $332;
     i64toi32_i32$2 = $347$hi;
     i64toi32_i32$1 = $246;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $348 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $348$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $330$hi;
     i64toi32_i32$4 = $330;
     i64toi32_i32$0 = $348$hi;
     i64toi32_i32$1 = $348;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$1 = $2_1;
     $352 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $353$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $329$hi;
     i64toi32_i32$1 = $329;
     i64toi32_i32$5 = $353$hi;
     i64toi32_i32$4 = $352;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $354 = i64toi32_i32$0;
     $354$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $355 = $4_1;
     $355$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$2 = $15_1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$4 = $10_1;
     $358 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $359$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$4 = $23_1;
     i64toi32_i32$1 = $15_1;
     $362 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $363$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $359$hi;
     i64toi32_i32$1 = $358;
     i64toi32_i32$2 = $363$hi;
     i64toi32_i32$3 = $362;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $364$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $355$hi;
     i64toi32_i32$4 = $355;
     i64toi32_i32$1 = $364$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$3 = $4_1;
     $368 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $369$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $354$hi;
     i64toi32_i32$3 = $354;
     i64toi32_i32$5 = $369$hi;
     i64toi32_i32$4 = $368;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = 65536;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$4 | 0 | i64toi32_i32$3 | 0)) {
      break label$14
     }
     $6_1 = $6_1 + 1 | 0;
     break label$13;
    }
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$2 = $18_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $247 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
     $247 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
    }
    $3_1 = $247;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $248 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $248 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $379 = $248;
    $379$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $250 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     $250 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
    }
    $381$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $379$hi;
    i64toi32_i32$2 = $379;
    i64toi32_i32$0 = $381$hi;
    i64toi32_i32$4 = $250;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $251 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $251 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $384 = $251;
    $384$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $252 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     $252 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
    }
    $386$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $384$hi;
    i64toi32_i32$2 = $384;
    i64toi32_i32$0 = $386$hi;
    i64toi32_i32$4 = $252;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$3 = $18_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $253 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $253 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $18_1 = $253;
    $18$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    $390 = $3_1;
    $390$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     $254 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
     $254 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    }
    $392$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $390$hi;
    i64toi32_i32$2 = $390;
    i64toi32_i32$0 = $392$hi;
    i64toi32_i32$4 = $254;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $1$hi = i64toi32_i32$0;
   }
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$3 = $11_1;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $11_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$2;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if (($6_1 | 0) > (0 | 0)) {
      break label$17
     }
     label$18 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 < 128 >>> 0) {
       break label$18
      }
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $1$hi;
     $6_1 = $6_1 + 127 | 0;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$3 = $1$hi;
     $81($5_1 + 48 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $6_1 | 0);
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     $81($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $6_1 | 0);
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$3 = $1$hi;
     $91($5_1 + 16 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0);
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     $91($5_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $426 = i64toi32_i32$2;
     $426$hi = i64toi32_i32$3;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     $428 = i64toi32_i32$3;
     $428$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $426$hi;
     i64toi32_i32$0 = $426;
     i64toi32_i32$3 = $428$hi;
     i64toi32_i32$4 = $428;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $429 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
     $429$hi = i64toi32_i32$3;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
     $431 = i64toi32_i32$3;
     $431$hi = i64toi32_i32$0;
     i64toi32_i32$2 = (i64toi32_i32$2 + 48 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $435 = i64toi32_i32$0;
     $435$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $431$hi;
     i64toi32_i32$2 = $431;
     i64toi32_i32$0 = $435$hi;
     i64toi32_i32$4 = $435;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 0;
     $437 = (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = 0;
     $438$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $429$hi;
     i64toi32_i32$4 = $429;
     i64toi32_i32$0 = $438$hi;
     i64toi32_i32$2 = $437;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$3 = ($5_1 + 32 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $443 = i64toi32_i32$0;
     $443$hi = i64toi32_i32$4;
     i64toi32_i32$3 = ($5_1 + 16 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $447 = i64toi32_i32$4;
     $447$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $443$hi;
     i64toi32_i32$3 = $443;
     i64toi32_i32$4 = $447$hi;
     i64toi32_i32$2 = $447;
     i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
     $1_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $5_1 + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$3;
     $2$hi = i64toi32_i32$4;
     break label$16;
    }
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     $255 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
     $255 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    }
    $456$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$2 = -1;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $458 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
    $458$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $456$hi;
    i64toi32_i32$3 = $255;
    i64toi32_i32$4 = $458$hi;
    i64toi32_i32$2 = $458;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    $4_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $11_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $11$hi = i64toi32_i32$3;
   label$19 : {
    i64toi32_i32$3 = $18$hi;
    $464 = !($18_1 | i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = -1;
    if ((i64toi32_i32$3 | 0) > (i64toi32_i32$0 | 0)) {
     $256 = 1
    } else {
     if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$2 >>> 0) {
       $257 = 0
      } else {
       $257 = 1
      }
      $258 = $257;
     } else {
      $258 = 0
     }
     $256 = $258;
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $464 : $256) {
     break label$19
    }
    i64toi32_i32$2 = $11$hi;
    $470 = $11_1;
    $470$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1_1 = i64toi32_i32$5;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2_1;
    $475 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = 0;
    $476$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $470$hi;
    i64toi32_i32$3 = $470;
    i64toi32_i32$1 = $476$hi;
    i64toi32_i32$0 = $475;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $11_1 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$5;
    break label$1;
   }
   label$20 : {
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $480 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $480$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$5 = $18_1;
    i64toi32_i32$2 = $480$hi;
    i64toi32_i32$0 = $480;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0) {
     break label$20
    }
    i64toi32_i32$3 = $2$hi;
    $1_1 = $2_1;
    $1$hi = i64toi32_i32$3;
    break label$1;
   }
   i64toi32_i32$3 = $11$hi;
   $484 = $11_1;
   $484$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $487 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $487$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = $487$hi;
   i64toi32_i32$5 = $487;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$5 = $2_1;
   $491 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   $492$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $484$hi;
   i64toi32_i32$5 = $484;
   i64toi32_i32$4 = $492$hi;
   i64toi32_i32$3 = $491;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $11_1 = i64toi32_i32$0;
   $11$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 96 | 0;
 }
 
 function $93($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $46_1;
  $2$hi = i64toi32_i32$2;
  $16_1 = $2_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $48_1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $1_1 = i64toi32_i32$4;
  $1$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $94($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $14_1 = 0, $14$hi = 0, $20_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  $80($5_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$3;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $95($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $4$hi = 0, $5$hi = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $17_1 = 0, $17$hi = 0, $19$hi = 0, $33_1 = 0, $33$hi = 0, $36_1 = 0, $38_1 = 0, $43_1 = 0, $43$hi = 0, $45$hi = 0, $73_1 = 0, $73$hi = 0, $77$hi = 0, $80_1 = 0, $80$hi = 0, $82_1 = 0, $82$hi = 0, $86_1 = 0, $86$hi = 0, $88_1 = 0, $89$hi = 0, $98$hi = 0, $105_1 = 0, $105$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $44_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $44_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $44_1;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $45_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $45_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17_1;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $45_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $33_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
    $33$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = $33$hi;
    i64toi32_i32$5 = $33_1;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$1;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $36_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$5 = 0;
    $38_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$4;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $36_1 : $38_1) {
     break label$4
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $46_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
     $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
    }
    $43_1 = $46_1;
    $43$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
     $47_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
     $47_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
    }
    $45$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $43$hi;
    i64toi32_i32$0 = $43_1;
    i64toi32_i32$5 = $45$hi;
    i64toi32_i32$4 = $47_1;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
    i64toi32_i32$2 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $5_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $5$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 2146435072;
   $5_1 = 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$5 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $5_1 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $48_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $48_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $48_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $4$hi;
   $81($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   $91($2_1 | 0, $0_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 60;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $49_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $49_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $73_1 = $49_1;
   $73$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 4;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $50_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $50_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $77$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $73$hi;
   i64toi32_i32$4 = $73_1;
   i64toi32_i32$2 = $77$hi;
   i64toi32_i32$5 = $50_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $5$hi = i64toi32_i32$2;
   label$5 : {
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
    $80_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $80$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $82_1 = i64toi32_i32$4;
    $82$hi = i64toi32_i32$0;
    i64toi32_i32$2 = (i64toi32_i32$2 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $86_1 = i64toi32_i32$0;
    $86$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $82$hi;
    i64toi32_i32$2 = $82_1;
    i64toi32_i32$0 = $86$hi;
    i64toi32_i32$5 = $86_1;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    $88_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$4 = 0;
    $89$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $80$hi;
    i64toi32_i32$5 = $80_1;
    i64toi32_i32$0 = $89$hi;
    i64toi32_i32$2 = $88_1;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$2 = 1;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $5_1 = i64toi32_i32$3;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$2 = 134217728;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $98$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$1 = $98$hi;
   i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $5_1 = i64toi32_i32$0;
   $5$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$4 = -2147483648;
  i64toi32_i32$2 = 0;
  i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
  $105_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $105$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$1 = $105$hi;
  i64toi32_i32$2 = $105_1;
  i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$2 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $96($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $5$hi = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $20_1 = 0, $24_1 = 0, $34_1 = 0, $34$hi = 0, $42_1 = 0, $44_1 = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $93_1 = 0, $97_1 = 0, $105_1 = 0, $105$hi = 0, $114 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = $1_1 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1065418752;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = -1082064896;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 25;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $37_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $37_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $3_1 = $37_1;
    label$3 : {
     i64toi32_i32$4 = $0$hi;
     $20_1 = !($0_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 33554431;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $5_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $5$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 16777216;
     $24_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 16777216;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $20_1 : $24_1) {
      break label$3
     }
     $4_1 = $3_1 + 1073741825 | 0;
     break label$1;
    }
    $4_1 = $3_1 + 1073741824 | 0;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
    $34_1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $34$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$5 = $34$hi;
    i64toi32_i32$3 = $34_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$1
    }
    $4_1 = $4_1 + ($3_1 & 1 | 0) | 0;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $42_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$1 = 0;
    $44_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $42_1 : $44_1) {
     break label$4
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 25;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $38_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $38_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $4_1 = $38_1 & 4194303 | 0 | 2143289344 | 0;
    break label$1;
   }
   $4_1 = 2139095040;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$5 = 1082064895;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $39_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    $39_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $3_1 = $39_1;
   if ($3_1 >>> 0 < 16145 >>> 0) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   $81($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, i64toi32_i32$3 | 0, $3_1 + -16129 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   $91($2_1 | 0, $0_1 | 0, i64toi32_i32$3 | 0, $5_1 | 0, i64toi32_i32$1 | 0, 16257 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$1;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 25;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $40_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $40_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $4_1 = $40_1;
   label$5 : {
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $81_1 = i64toi32_i32$1;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$1;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$3 = $83_1;
    i64toi32_i32$1 = $87$hi;
    i64toi32_i32$5 = $87_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$5 = $81_1;
    i64toi32_i32$1 = $90$hi;
    i64toi32_i32$3 = $89_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $0_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$1;
    $93_1 = !($0_1 | i64toi32_i32$1 | 0);
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 33554431;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $5_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    $97_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 16777216;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $93_1 : $97_1) {
     break label$5
    }
    $4_1 = $4_1 + 1 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 16777216;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $105_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $105$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$4 = $105$hi;
   i64toi32_i32$5 = $105_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
    break label$1
   }
   $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
  }
  global$0 = $2_1 + 32 | 0;
  $114 = $4_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $41_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   $41_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(2, $114 | ($41_1 & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
 }
 
 function $97() {
  return global$0 | 0;
 }
 
 function $98($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $99($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $100() {
  global$2 = 5278480;
  global$1 = (35596 + 15 | 0) & -16 | 0;
 }
 
 function $101() {
  return global$0 - global$1 | 0 | 0;
 }
 
 function $102() {
  return global$2 | 0;
 }
 
 function $103() {
  return global$1 | 0;
 }
 
 function $104($0_1) {
  $0_1 = $0_1 | 0;
  global$3 = $0_1;
 }
 
 function $105() {
  return global$3 | 0;
 }
 
 function $106($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $1_1 = 0;
   label$2 : {
    if (!(HEAP32[(0 + 34924 | 0) >> 2] | 0)) {
     break label$2
    }
    $1_1 = $106(HEAP32[(0 + 34924 | 0) >> 2] | 0 | 0) | 0;
   }
   label$3 : {
    if (!(HEAP32[(0 + 34924 | 0) >> 2] | 0)) {
     break label$3
    }
    $1_1 = $106(HEAP32[(0 + 34924 | 0) >> 2] | 0 | 0) | 0 | $1_1 | 0;
   }
   label$4 : {
    $0_1 = HEAP32[($19() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$4
    }
    label$5 : while (1) {
     $2_1 = 0;
     label$6 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$6
      }
      $2_1 = $15($0_1 | 0) | 0;
     }
     label$7 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
       break label$7
      }
      $1_1 = $106($0_1 | 0) | 0 | $1_1 | 0;
     }
     label$8 : {
      if (!$2_1) {
       break label$8
      }
      $16($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$5
     }
     break label$5;
    };
   }
   $20();
   return $1_1 | 0;
  }
  $2_1 = 0;
  label$9 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$9
   }
   $2_1 = $15($0_1 | 0) | 0;
  }
  label$10 : {
   label$11 : {
    label$12 : {
     if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
      break label$12
     }
     FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
     if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
      break label$12
     }
     $1_1 = -1;
     if ($2_1) {
      break label$11
     }
     break label$10;
    }
    label$13 : {
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (($1_1 | 0) == ($3_1 | 0)) {
      break label$13
     }
     i64toi32_i32$1 = $1_1 - $3_1 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    }
    $1_1 = 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$1 = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$1 = 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
    if (!$2_1) {
     break label$10
    }
   }
   $16($0_1 | 0);
  }
  return $1_1 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140 = 0, $140$hi = 0, $142$hi = 0, $144 = 0, $144$hi = 0, $151 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              i64toi32_i32$1 = var$1$hi;
              var$3 = var$1;
              if (!var$3) {
               break label$11
              }
              i64toi32_i32$1 = var$1$hi;
              i64toi32_i32$0 = var$1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
               i64toi32_i32$2 = 0;
               $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
               i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              var$4 = $38_1;
              if (!var$4) {
               break label$9
              }
              var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
              if (var$2 >>> 0 <= 31 >>> 0) {
               break label$8
              }
              break label$2;
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      i64toi32_i32$2 = var$1$hi;
      i64toi32_i32$1 = var$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      var$8 = i64toi32_i32$4;
      var$8$hi = i64toi32_i32$5;
      label$15 : while (1) {
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$2 = var$5;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        $45_1 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
        $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       }
       $140 = $45_1;
       $140$hi = i64toi32_i32$1;
       i64toi32_i32$1 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
       }
       $142$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $140$hi;
       i64toi32_i32$1 = $140;
       i64toi32_i32$5 = $142$hi;
       i64toi32_i32$0 = $46_1;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       var$5$hi = i64toi32_i32$5;
       $144 = var$5;
       $144$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$2 = var$8;
       i64toi32_i32$1 = var$5$hi;
       i64toi32_i32$0 = var$5;
       i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$3;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
       }
       var$6 = $47_1;
       var$6$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$2 = var$6$hi;
       i64toi32_i32$4 = var$6;
       i64toi32_i32$5 = var$1$hi;
       i64toi32_i32$0 = var$1;
       i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
       $151 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
       $151$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $144$hi;
       i64toi32_i32$2 = $144;
       i64toi32_i32$4 = $151$hi;
       i64toi32_i32$0 = $151;
       i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
       var$5 = i64toi32_i32$1;
       var$5$hi = i64toi32_i32$3;
       i64toi32_i32$3 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        $48_1 = 0;
       } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
       }
       $154$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$7$hi;
       i64toi32_i32$2 = $154$hi;
       i64toi32_i32$3 = $48_1;
       i64toi32_i32$5 = var$7$hi;
       i64toi32_i32$0 = var$7;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       var$0$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$6$hi;
       i64toi32_i32$2 = var$6;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
       var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       var$6$hi = i64toi32_i32$3;
       var$7 = var$6;
       var$7$hi = i64toi32_i32$3;
       var$2 = var$2 + -1 | 0;
       if (var$2) {
        continue label$15
       }
       break label$15;
      };
      break label$13;
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(imports);
 var FUNCTION_TABLE = Table([null, $38, $39, $42, $70]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": $0, 
  "crc64_init": $1, 
  "crc64": $6, 
  "str_to_uint64": $9, 
  "uint64_to_str": $10, 
  "__errno_location": $14, 
  "fflush": $106, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "malloc": $73, 
  "free": $74, 
  "setTempRet0": $104, 
  "getTempRet0": $105, 
  "emscripten_stack_init": $100, 
  "emscripten_stack_get_free": $101, 
  "emscripten_stack_get_base": $102, 
  "emscripten_stack_get_end": $103, 
  "stackSave": $97, 
  "stackRestore": $98, 
  "stackAlloc": $99
 };
}

  return asmFunc(info);
}

)(info);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module, info)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly != 'object') {
  abort('no native wasm support detected');
}

// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed' + (text ? ': ' + text : ''));
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.
/**
 * heapOrArray is either a regular array, or a JavaScript typed array view.
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
    return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
  }
  var str = '';
  // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
  while (idx < endPtr) {
    // For UTF8 byte structure, see:
    // http://en.wikipedia.org/wiki/UTF-8#Description
    // https://www.ietf.org/rfc/rfc2279.txt
    // https://tools.ietf.org/html/rfc3629
    var u0 = heapOrArray[idx++];
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    var u1 = heapOrArray[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    var u2 = heapOrArray[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
      u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
    }

    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u > 0x10FFFF) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var c = str.charCodeAt(i); // possibly a lead surrogate
    if (c <= 0x7F) {
      len++;
    } else if (c <= 0x7FF) {
      len += 2;
    } else if (c >= 0xD800 && c <= 0xDFFF) {
      len += 4; ++i;
    } else {
      len += 3;
    }
  }
  return len;
}

// end include: runtime_strings.js
// Memory management

var HEAP,
/** @type {!ArrayBuffer} */
  buffer,
/** @type {!Int8Array} */
  HEAP8,
/** @type {!Uint8Array} */
  HEAPU8,
/** @type {!Int16Array} */
  HEAP16,
/** @type {!Uint16Array} */
  HEAPU16,
/** @type {!Int32Array} */
  HEAP32,
/** @type {!Uint32Array} */
  HEAPU32,
/** @type {!Float32Array} */
  HEAPF32,
/** @type {!Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;legacyModuleProp('INITIAL_MEMORY', 'INITIAL_MEMORY');

assert(INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array != 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js


// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536,
      'maximum': INITIAL_MEMORY / 65536
    });
  }

if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_MEMORY % 65536 === 0);
updateGlobalBufferAndViews(buffer);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // The stack grow downwards towards _emscripten_stack_get_end.
  // We write cookies to the final two words in the stack and detect if they are
  // ever overwritten.
  HEAPU32[((max)>>2)] = 0x2135467;
  HEAPU32[(((max)+(4))>>2)] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAPU32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  var cookie1 = HEAPU32[((max)>>2)];
  var cookie2 = HEAPU32[(((max)+(4))>>2)];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten at 0x' + max.toString(16) + ', expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' 0x' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAPU32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)';
})();

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;

function keepRuntimeAlive() {
  return noExitRuntime;
}

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  checkStackCookie();

  
  callRuntimeCallbacks(__ATINIT__);
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval != 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {
  {
    if (Module['onAbort']) {
      Module['onAbort'](what);
    }
  }

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // defintion for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// show errors on likely calls to FS when it was not included
var FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with -sFORCE_FILESYSTEM');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;

// include: URIUtils.js


// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
/** @param {boolean=} fixedasm */
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile;
  wasmBinaryFile = 'crc.wasm';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    }
    throw "sync fetching of the wasm failed: you can preload it to Module['wasmBinary'] manually, or emcc.py will do that for you when generating HTML (but not JS)";
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch == 'function'
      && !isFileURI(wasmBinaryFile)
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
    else {
      if (readAsync) {
        // fetch is not available or url is file => try XHR (readAsync uses XHR internally)
        return new Promise(function(resolve, reject) {
          readAsync(wasmBinaryFile, function(response) { resolve(new Uint8Array(/** @type{!ArrayBuffer} */(response))) }, reject)
        });
      }
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

function instantiateSync(file, info) {
  var instance;
  var module;
  var binary;
  try {
    binary = getBinary(file);
    module = new WebAssembly.Module(binary);
    instance = new WebAssembly.Instance(module, info);
  } catch (e) {
    var str = e.toString();
    err('failed to compile wasm module: ' + str);
    if (str.includes('imported Memory') ||
        str.includes('memory import')) {
      err('Memory size incompatibility issues may be due to changing INITIAL_MEMORY at runtime to something too large. Use ALLOW_MEMORY_GROWTH to allow any size memory (and also make sure not to set INITIAL_MEMORY at runtime to something smaller than it was at compile time).');
    }
    throw e;
  }
  return [instance, module];
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');

  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  // Also pthreads and wasm workers initialize the wasm instance through this path.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
        return false;
    }
  }

  var result = instantiateSync(wasmBinaryFile, info);
  // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193,
  // the above line no longer optimizes out down to the following line.
  // When the regression is fixed, we can remove this if/else.
  receiveInstance(result[0]);
  return Module['asm']; // exports were assigned here
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};






  /** @constructor */
  function ExitStatus(status) {
      this.name = 'ExitStatus';
      this.message = 'Program terminated with exit(' + status + ')';
      this.status = status;
    }

  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        // Pass the module as the first argument.
        callbacks.shift()(Module);
      }
    }

  
    /**
     * @param {number} ptr
     * @param {string} type
     */
  function getValue(ptr, type = 'i8') {
      if (type.endsWith('*')) type = '*';
      switch (type) {
        case 'i1': return HEAP8[((ptr)>>0)];
        case 'i8': return HEAP8[((ptr)>>0)];
        case 'i16': return HEAP16[((ptr)>>1)];
        case 'i32': return HEAP32[((ptr)>>2)];
        case 'i64': return HEAP32[((ptr)>>2)];
        case 'float': return HEAPF32[((ptr)>>2)];
        case 'double': return HEAPF64[((ptr)>>3)];
        case '*': return HEAPU32[((ptr)>>2)];
        default: abort('invalid type for getValue: ' + type);
      }
      return null;
    }

  function intArrayToString(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      var chr = array[i];
      if (chr > 0xFF) {
        if (ASSERTIONS) {
          assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
        }
        chr &= 0xFF;
      }
      ret.push(String.fromCharCode(chr));
    }
    return ret.join('');
  }

  
    /**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */
  function setValue(ptr, value, type = 'i8') {
      if (type.endsWith('*')) type = '*';
      switch (type) {
        case 'i1': HEAP8[((ptr)>>0)] = value; break;
        case 'i8': HEAP8[((ptr)>>0)] = value; break;
        case 'i16': HEAP16[((ptr)>>1)] = value; break;
        case 'i32': HEAP32[((ptr)>>2)] = value; break;
        case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
        case 'float': HEAPF32[((ptr)>>2)] = value; break;
        case 'double': HEAPF64[((ptr)>>3)] = value; break;
        case '*': HEAPU32[((ptr)>>2)] = value; break;
        default: abort('invalid type for setValue: ' + type);
      }
    }

  function warnOnce(text) {
      if (!warnOnce.shown) warnOnce.shown = {};
      if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        if (ENVIRONMENT_IS_NODE) text = 'warning: ' + text;
        err(text);
      }
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function getHeapMax() {
      return HEAPU8.length;
    }
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with -sINITIAL_MEMORY=X with X higher than the current value ' + HEAP8.length + ', (2) compile with -sALLOW_MEMORY_GROWTH which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with -sABORTING_MALLOC=0');
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  function writeArrayToMemory(array, buffer) {
      assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
      HEAP8.set(array, buffer);
    }
var ASSERTIONS = true;

// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob == 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE == 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf = Buffer.from(s, 'base64');
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


function checkIncomingModuleAPI() {
  ignoredModuleProp('fetchSettings');
}
var asmLibraryArg = {
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "memory": wasmMemory
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors", asm);

/** @type {function(...*):?} */
var _crc64_init = Module["_crc64_init"] = createExportWrapper("crc64_init", asm);

/** @type {function(...*):?} */
var _crc64 = Module["_crc64"] = createExportWrapper("crc64", asm);

/** @type {function(...*):?} */
var _str_to_uint64 = Module["_str_to_uint64"] = createExportWrapper("str_to_uint64", asm);

/** @type {function(...*):?} */
var _uint64_to_str = Module["_uint64_to_str"] = createExportWrapper("uint64_to_str", asm);

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location", asm);

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush", asm);

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc", asm);

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free", asm);

/** @type {function(...*):?} */
var setTempRet0 = Module["setTempRet0"] = createExportWrapper("setTempRet0", asm);

/** @type {function(...*):?} */
var getTempRet0 = Module["getTempRet0"] = createExportWrapper("getTempRet0", asm);

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = asm["emscripten_stack_init"]

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = asm["emscripten_stack_get_free"]

/** @type {function(...*):?} */
var _emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = asm["emscripten_stack_get_base"]

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = asm["emscripten_stack_get_end"]

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave", asm);

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore", asm);

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc", asm);





// === Auto-generated postamble setup entry stuff ===

Module["UTF8ToString"] = UTF8ToString;
Module["stringToUTF8"] = stringToUTF8;
Module["writeArrayToMemory"] = writeArrayToMemory;
var unexportedRuntimeSymbols = [
  'run',
  'UTF8ArrayToString',
  'stringToUTF8Array',
  'lengthBytesUTF8',
  'addOnPreRun',
  'addOnInit',
  'addOnPreMain',
  'addOnExit',
  'addOnPostRun',
  'addRunDependency',
  'removeRunDependency',
  'FS_createFolder',
  'FS_createPath',
  'FS_createDataFile',
  'FS_createPreloadedFile',
  'FS_createLazyFile',
  'FS_createLink',
  'FS_createDevice',
  'FS_unlink',
  'getLEB',
  'getFunctionTables',
  'alignFunctionTables',
  'registerFunctions',
  'prettyPrint',
  'getCompilerSetting',
  'print',
  'printErr',
  'callMain',
  'abort',
  'keepRuntimeAlive',
  'wasmMemory',
  'stackAlloc',
  'stackSave',
  'stackRestore',
  'getTempRet0',
  'setTempRet0',
  'writeStackCookie',
  'checkStackCookie',
  'intArrayFromBase64',
  'tryParseAsDataURI',
  'ptrToString',
  'zeroMemory',
  'stringToNewUTF8',
  'exitJS',
  'getHeapMax',
  'abortOnCannotGrowMemory',
  'emscripten_realloc_buffer',
  'ENV',
  'ERRNO_CODES',
  'ERRNO_MESSAGES',
  'setErrNo',
  'inetPton4',
  'inetNtop4',
  'inetPton6',
  'inetNtop6',
  'readSockaddr',
  'writeSockaddr',
  'DNS',
  'getHostByName',
  'Protocols',
  'Sockets',
  'getRandomDevice',
  'warnOnce',
  'traverseStack',
  'UNWIND_CACHE',
  'convertPCtoSourceLocation',
  'readAsmConstArgsArray',
  'readAsmConstArgs',
  'mainThreadEM_ASM',
  'jstoi_q',
  'jstoi_s',
  'getExecutableName',
  'listenOnce',
  'autoResumeAudioContext',
  'dynCallLegacy',
  'getDynCaller',
  'dynCall',
  'handleException',
  'runtimeKeepalivePush',
  'runtimeKeepalivePop',
  'callUserCallback',
  'maybeExit',
  'safeSetTimeout',
  'asmjsMangle',
  'asyncLoad',
  'alignMemory',
  'mmapAlloc',
  'writeI53ToI64',
  'writeI53ToI64Clamped',
  'writeI53ToI64Signaling',
  'writeI53ToU64Clamped',
  'writeI53ToU64Signaling',
  'readI53FromI64',
  'readI53FromU64',
  'convertI32PairToI53',
  'convertI32PairToI53Checked',
  'convertU32PairToI53',
  'getCFunc',
  'ccall',
  'cwrap',
  'uleb128Encode',
  'sigToWasmTypes',
  'generateFuncType',
  'convertJsFunctionToWasm',
  'freeTableIndexes',
  'functionsInTableMap',
  'getEmptyTableSlot',
  'updateTableMap',
  'addFunction',
  'removeFunction',
  'reallyNegative',
  'unSign',
  'strLen',
  'reSign',
  'formatString',
  'setValue',
  'getValue',
  'PATH',
  'PATH_FS',
  'intArrayFromString',
  'intArrayToString',
  'AsciiToString',
  'stringToAscii',
  'UTF16Decoder',
  'UTF16ToString',
  'stringToUTF16',
  'lengthBytesUTF16',
  'UTF32ToString',
  'stringToUTF32',
  'lengthBytesUTF32',
  'allocateUTF8',
  'allocateUTF8OnStack',
  'writeStringToMemory',
  'writeAsciiToMemory',
  'SYSCALLS',
  'getSocketFromFD',
  'getSocketAddress',
  'JSEvents',
  'registerKeyEventCallback',
  'specialHTMLTargets',
  'maybeCStringToJsString',
  'findEventTarget',
  'findCanvasEventTarget',
  'getBoundingClientRect',
  'fillMouseEventData',
  'registerMouseEventCallback',
  'registerWheelEventCallback',
  'registerUiEventCallback',
  'registerFocusEventCallback',
  'fillDeviceOrientationEventData',
  'registerDeviceOrientationEventCallback',
  'fillDeviceMotionEventData',
  'registerDeviceMotionEventCallback',
  'screenOrientation',
  'fillOrientationChangeEventData',
  'registerOrientationChangeEventCallback',
  'fillFullscreenChangeEventData',
  'registerFullscreenChangeEventCallback',
  'JSEvents_requestFullscreen',
  'JSEvents_resizeCanvasForFullscreen',
  'registerRestoreOldStyle',
  'hideEverythingExceptGivenElement',
  'restoreHiddenElements',
  'setLetterbox',
  'currentFullscreenStrategy',
  'restoreOldWindowedStyle',
  'softFullscreenResizeWebGLRenderTarget',
  'doRequestFullscreen',
  'fillPointerlockChangeEventData',
  'registerPointerlockChangeEventCallback',
  'registerPointerlockErrorEventCallback',
  'requestPointerLock',
  'fillVisibilityChangeEventData',
  'registerVisibilityChangeEventCallback',
  'registerTouchEventCallback',
  'fillGamepadEventData',
  'registerGamepadEventCallback',
  'registerBeforeUnloadEventCallback',
  'fillBatteryEventData',
  'battery',
  'registerBatteryEventCallback',
  'setCanvasElementSize',
  'getCanvasElementSize',
  'demangle',
  'demangleAll',
  'jsStackTrace',
  'stackTrace',
  'ExitStatus',
  'getEnvStrings',
  'checkWasiClock',
  'flush_NO_FILESYSTEM',
  'dlopenMissingError',
  'createDyncallWrapper',
  'setImmediateWrapped',
  'clearImmediateWrapped',
  'polyfillSetImmediate',
  'uncaughtExceptionCount',
  'exceptionLast',
  'exceptionCaught',
  'ExceptionInfo',
  'exception_addRef',
  'exception_decRef',
  'Browser',
  'setMainLoop',
  'wget',
  'FS',
  'MEMFS',
  'TTY',
  'PIPEFS',
  'SOCKFS',
  '_setNetworkCallback',
  'tempFixedLengthArray',
  'miniTempWebGLFloatBuffers',
  'heapObjectForWebGLType',
  'heapAccessShiftForWebGLHeap',
  'GL',
  'emscriptenWebGLGet',
  'computeUnpackAlignedImageSize',
  'emscriptenWebGLGetTexPixelData',
  'emscriptenWebGLGetUniform',
  'webglGetUniformLocation',
  'webglPrepareUniformLocationsBeforeFirstUse',
  'webglGetLeftBracePos',
  'emscriptenWebGLGetVertexAttrib',
  'writeGLArray',
  'AL',
  'SDL_unicode',
  'SDL_ttfContext',
  'SDL_audio',
  'SDL',
  'SDL_gfx',
  'GLUT',
  'EGL',
  'GLFW_Window',
  'GLFW',
  'GLEW',
  'IDBStore',
  'runAndAbortIfError',
  'ALLOC_NORMAL',
  'ALLOC_STACK',
  'allocate',
];
unexportedRuntimeSymbols.forEach(unexportedRuntimeSymbol);
var missingLibrarySymbols = [
  'ptrToString',
  'zeroMemory',
  'stringToNewUTF8',
  'exitJS',
  'emscripten_realloc_buffer',
  'setErrNo',
  'inetPton4',
  'inetNtop4',
  'inetPton6',
  'inetNtop6',
  'readSockaddr',
  'writeSockaddr',
  'getHostByName',
  'getRandomDevice',
  'traverseStack',
  'convertPCtoSourceLocation',
  'readAsmConstArgs',
  'mainThreadEM_ASM',
  'jstoi_q',
  'jstoi_s',
  'getExecutableName',
  'listenOnce',
  'autoResumeAudioContext',
  'dynCallLegacy',
  'getDynCaller',
  'dynCall',
  'handleException',
  'runtimeKeepalivePush',
  'runtimeKeepalivePop',
  'callUserCallback',
  'maybeExit',
  'safeSetTimeout',
  'asmjsMangle',
  'asyncLoad',
  'alignMemory',
  'mmapAlloc',
  'writeI53ToI64',
  'writeI53ToI64Clamped',
  'writeI53ToI64Signaling',
  'writeI53ToU64Clamped',
  'writeI53ToU64Signaling',
  'readI53FromI64',
  'readI53FromU64',
  'convertI32PairToI53',
  'convertI32PairToI53Checked',
  'convertU32PairToI53',
  'getCFunc',
  'ccall',
  'cwrap',
  'uleb128Encode',
  'sigToWasmTypes',
  'generateFuncType',
  'convertJsFunctionToWasm',
  'getEmptyTableSlot',
  'updateTableMap',
  'addFunction',
  'removeFunction',
  'reallyNegative',
  'unSign',
  'strLen',
  'reSign',
  'formatString',
  'intArrayFromString',
  'AsciiToString',
  'stringToAscii',
  'UTF16ToString',
  'stringToUTF16',
  'lengthBytesUTF16',
  'UTF32ToString',
  'stringToUTF32',
  'lengthBytesUTF32',
  'allocateUTF8',
  'allocateUTF8OnStack',
  'writeStringToMemory',
  'writeAsciiToMemory',
  'getSocketFromFD',
  'getSocketAddress',
  'registerKeyEventCallback',
  'maybeCStringToJsString',
  'findEventTarget',
  'findCanvasEventTarget',
  'getBoundingClientRect',
  'fillMouseEventData',
  'registerMouseEventCallback',
  'registerWheelEventCallback',
  'registerUiEventCallback',
  'registerFocusEventCallback',
  'fillDeviceOrientationEventData',
  'registerDeviceOrientationEventCallback',
  'fillDeviceMotionEventData',
  'registerDeviceMotionEventCallback',
  'screenOrientation',
  'fillOrientationChangeEventData',
  'registerOrientationChangeEventCallback',
  'fillFullscreenChangeEventData',
  'registerFullscreenChangeEventCallback',
  'JSEvents_requestFullscreen',
  'JSEvents_resizeCanvasForFullscreen',
  'registerRestoreOldStyle',
  'hideEverythingExceptGivenElement',
  'restoreHiddenElements',
  'setLetterbox',
  'softFullscreenResizeWebGLRenderTarget',
  'doRequestFullscreen',
  'fillPointerlockChangeEventData',
  'registerPointerlockChangeEventCallback',
  'registerPointerlockErrorEventCallback',
  'requestPointerLock',
  'fillVisibilityChangeEventData',
  'registerVisibilityChangeEventCallback',
  'registerTouchEventCallback',
  'fillGamepadEventData',
  'registerGamepadEventCallback',
  'registerBeforeUnloadEventCallback',
  'fillBatteryEventData',
  'battery',
  'registerBatteryEventCallback',
  'setCanvasElementSize',
  'getCanvasElementSize',
  'demangle',
  'demangleAll',
  'jsStackTrace',
  'stackTrace',
  'getEnvStrings',
  'checkWasiClock',
  'flush_NO_FILESYSTEM',
  'createDyncallWrapper',
  'setImmediateWrapped',
  'clearImmediateWrapped',
  'polyfillSetImmediate',
  'ExceptionInfo',
  'exception_addRef',
  'exception_decRef',
  'setMainLoop',
  '_setNetworkCallback',
  'heapObjectForWebGLType',
  'heapAccessShiftForWebGLHeap',
  'emscriptenWebGLGet',
  'computeUnpackAlignedImageSize',
  'emscriptenWebGLGetTexPixelData',
  'emscriptenWebGLGetUniform',
  'webglGetUniformLocation',
  'webglPrepareUniformLocationsBeforeFirstUse',
  'webglGetLeftBracePos',
  'emscriptenWebGLGetVertexAttrib',
  'writeGLArray',
  'SDL_unicode',
  'SDL_ttfContext',
  'SDL_audio',
  'GLFW_Window',
  'runAndAbortIfError',
  'ALLOC_NORMAL',
  'ALLOC_STACK',
  'allocate',
];
missingLibrarySymbols.forEach(missingLibrarySymbol)


var calledRun;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  _emscripten_stack_init();
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  writeStackCookie();
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

    stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = (x) => {
    has = true;
  }
  try { // it doesn't matter if it fails
    _fflush(0);
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
    warnOnce('(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)');
  }
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();





